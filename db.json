{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/kaze/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","path":"js/lib/busuanzi.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lozad.min.js","path":"js/lib/lozad.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/md5.min.js","path":"js/lib/md5.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","path":"js/lib/lightbox/baguetteBox.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","path":"js/lib/lightbox/baguetteBox.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","path":"js/lib/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","path":"js/lib/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","path":"js/lib/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","path":"js/lib/prism/prism-line-numbers.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","path":"js/lib/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","path":"js/lib/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","path":"js/lib/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","path":"js/lib/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","path":"js/lib/prism/prism.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Fiddler-Proxy.md","hash":"3b6bee462ad402334e33435e6f47817ebf002042","modified":1634200627059},{"_id":"source/_posts/Hexo_Article.md","hash":"51115c3c677ec82685d1130605ba8db2865940a8","modified":1634201685529},{"_id":"source/_posts/Linux-Crontab.md","hash":"c098521de12cc25cf24e3ea0564a782c8cb57a6a","modified":1634201685534},{"_id":"source/_posts/Python-Selenium.md","hash":"68e0176c859dad43e52c27f345f0a0c8a778dcb6","modified":1634201685488},{"_id":"source/_posts/Server_Screen.md","hash":"3ae542750d5dbefcc6e0b7324bf24535ca0bf361","modified":1634201685396},{"_id":"source/_posts/Submit-Test.md","hash":"916f589dad486e2dac2d075bf7de324535a36a26","modified":1634201685549},{"_id":"source/_posts/Web_Hexo.md","hash":"fa401e69e6ea7a30965d64127c1c86cf8c184146","modified":1634201685319},{"_id":"source/about/index.md","hash":"82275a14b91eefc14262c4d58506f37c3ce66188","modified":1630573750096},{"_id":"source/_posts/Fiddler-Proxy/Download.jpg","hash":"f720fac88b7a2f4f0744ffa876f7df9041cb15c8","modified":1630563046598},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Android_Proxy.png","hash":"d2d8d31a2e3947db8a9117796a75a187a5cbc5cc","modified":1630563046640},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Certificate_Phone.png","hash":"8a5972f7fd1e0a98e510ec752bf2e075eaccc5f1","modified":1630563046642},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_IP.jpg","hash":"bf33e5b4620bc49dbd17a1ee98cfbebc03a03d71","modified":1630563046643},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Ignore.jpg","hash":"fefa3f98a551918207e653d31883e2c95ad8a3f6","modified":1630563046644},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Port.jpg","hash":"03fc0e400da23a84cb3c6c2f49e344e32c25da30","modified":1630563046645},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Successful.jpg","hash":"51805dfd3a873a823ed703f0050fe9e6ce33b0c3","modified":1630563046647},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_certificate.jpg","hash":"f31aa6b71972041b2f3b55887ef0b396f443a099","modified":1630563046647},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_certificate_install.jpg","hash":"40e53b73953c18a7bb576a50eab49ca187d5238c","modified":1630563046648},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_iOS_Proxy.png","hash":"984c69e377e7eac92ddc132578265d0535f53558","modified":1630563046649},{"_id":"source/_posts/Linux-Crontab/crontab_sel.png","hash":"9511d6800cc37be26709abb9e9391bd795a09935","modified":1630563046655},{"_id":"source/_posts/Web_Hexo/git_version.png","hash":"5040a21115b7f4e7cda4367f4baaa997f27b35d2","modified":1630563046659},{"_id":"source/_posts/Fiddler-Proxy/Fiddler.jpg","hash":"3bb3faf1fe6cec284ca115e1c9cdc6518ba0ae33","modified":1630563046639},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_After.jpg","hash":"e6f75a6528817cf6b60bbf31c74a0738a5edd823","modified":1630563046640},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Before.jpg","hash":"82ca5a8767fa1cef21d5e7521fb638c288124586","modified":1630563046641},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Open.jpg","hash":"b239c62c825ec0dbff7be1a38ef95772488ecaa3","modified":1630563046644},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_filter.jpg","hash":"ad4ba918717b007120998124425904f3d89e2fbc","modified":1630563046649},{"_id":"source/_posts/Fiddler-Proxy/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046651},{"_id":"source/_posts/Hexo_Article/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046653},{"_id":"source/_posts/Linux-Crontab/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046654},{"_id":"source/_posts/Python-Selenium/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046656},{"_id":"source/_posts/Server_Screen/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046657},{"_id":"source/_posts/Submit-Test/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046658},{"_id":"source/_posts/Web_Hexo/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630563046659},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Https_traffic.png","hash":"24d727bb2a17b6d6b9491e44b756fe29262fd26c","modified":1630563046643},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Right.jpg","hash":"12756d4dc180adcbe864ea37905e7063c1465e77","modified":1630563046646},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_left.jpg","hash":"51d73441e020bd92211586cfa8c3c23aa6c21a6f","modified":1630563046651},{"_id":"themes/kaze/.eslintrc.json","hash":"5826fc1d26f8e1327d6ce733c1dcfdd363e455d3","modified":1630563046667},{"_id":"themes/kaze/.gitignore","hash":"e8e704101761eae82558c166a3e8a5b53e778a5c","modified":1630563046669},{"_id":"themes/kaze/README.md","hash":"8cd4cbd2dda92bf7e2c49d3264719a6a239de1ab","modified":1630563046670},{"_id":"themes/kaze/LICENSE","hash":"84c87e78e9781eb1c63f74f7f95abdf0c2a13195","modified":1630563046669},{"_id":"themes/kaze/README_zh.md","hash":"77e23f4e033fd2b79a8fbd1811ae0fd6c2bd0766","modified":1630563046670},{"_id":"themes/kaze/_config.yml","hash":"5a3beabbc690a496f911ceb282c2a5a07719a88d","modified":1634204049517},{"_id":"themes/kaze/gulpfile.js","hash":"f1f916f47ce9725557a63495cfc0b7942e3bb287","modified":1630563046671},{"_id":"themes/kaze/index.js","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1630563046671},{"_id":"themes/kaze/languages/en.yml","hash":"86bb06af11e288b75421cc96ff66a9c52ddbead8","modified":1630563046671},{"_id":"themes/kaze/languages/zh-CN.yml","hash":"069496fa821c23eb25d835960563b9fa52f86d25","modified":1630563046672},{"_id":"themes/kaze/lib/lazyload.js","hash":"ed8d0995e204ca03169e227039b849b30c3a8a63","modified":1630563046682},{"_id":"themes/kaze/lib/mergeConfig.js","hash":"6f300970424a6cb3823311bb7fb60b2f12bfdf0c","modified":1630563046683},{"_id":"themes/kaze/layout/archive.ejs","hash":"95f014451d1045df3dfbfe82de255152916bc404","modified":1630563046679},{"_id":"themes/kaze/layout/about.ejs","hash":"06bbaacfedfea63867a5937beb6e09a295763375","modified":1630563046679},{"_id":"themes/kaze/layout/artitalk.ejs","hash":"b732a3bf354231d5fcb19b69e1dd66b8b8bb33a7","modified":1630563046679},{"_id":"themes/kaze/layout/categories.ejs","hash":"e1f3e2641c4305656df9465ee6f9fde93a596dc5","modified":1630563046680},{"_id":"themes/kaze/layout/category.ejs","hash":"5add5abe99875c0b46125cbbbed576a351915cf3","modified":1630563046680},{"_id":"themes/kaze/layout/index.ejs","hash":"065ee8a03c816686a210d731d7b5473afb57388f","modified":1630563046680},{"_id":"themes/kaze/layout/layout.ejs","hash":"f0d09b15b25afa937f05d2fd4a6cc12d5f02c1fe","modified":1630563046681},{"_id":"themes/kaze/layout/links.ejs","hash":"c8ba5cba5c34bd87f088c582c30ab988f5598e37","modified":1630563046681},{"_id":"themes/kaze/layout/post.ejs","hash":"4eaca2d87b651371a703139c0172967e2a3628c4","modified":1630563046681},{"_id":"themes/kaze/layout/tags.ejs","hash":"5978626693a28a8d8992f00327732da6e1ad9bcc","modified":1630563046682},{"_id":"themes/kaze/layout/tag.ejs","hash":"de2f0ab78d4272982e4ad945609a1f2a6acac8f4","modified":1630563046682},{"_id":"themes/kaze/scripts/index.js","hash":"e22ebdc3794fec7a8ce07be943b72e4eebb6a303","modified":1630563046686},{"_id":"themes/kaze/.github/ISSUE_TEMPLATE/bug-report-----.md","hash":"d1abbb26d1f4e97adf18fc181d3aac1c5072db7c","modified":1630563046667},{"_id":"themes/kaze/.github/ISSUE_TEMPLATE/feature-request-----.md","hash":"b644c1324a09c36d2708c06ff0766289afa79097","modified":1630563046668},{"_id":"themes/kaze/.github/workflows/beta.yml","hash":"1109341feae161628fb542f836ce09774e65d309","modified":1630563046668},{"_id":"themes/kaze/.github/workflows/release.yml","hash":"4b5ac4a336b649b78bf4d6bae286796113b3f7be","modified":1630563046669},{"_id":"themes/kaze/lib/minify/minifyCSS.js","hash":"f3c3ac264a6b788353483f5077b137b51da9a4f2","modified":1630563046683},{"_id":"themes/kaze/lib/minify/minifyJS.js","hash":"cb5d417447e7aaf8c78fa0f7b408659d86d5eca6","modified":1630563046683},{"_id":"themes/kaze/lib/minify/minifyHTML.js","hash":"df06caff1eef4c6d8035786ba760aeb1d76750fc","modified":1630563046683},{"_id":"themes/kaze/layout/_partial/archives.ejs","hash":"4e2037d0cbc1ca0f4830e25a784794604d1279a3","modified":1630563046672},{"_id":"themes/kaze/layout/_partial/categories.ejs","hash":"462c3ee01edfa8725ccc99bddafd0dc82f1cbfc5","modified":1630563046673},{"_id":"themes/kaze/layout/_partial/author.ejs","hash":"fbedae957b0c31a6d27a365394621b80184aaf61","modified":1630563046673},{"_id":"themes/kaze/layout/_partial/footer.ejs","hash":"bc3253afccb8ea7a7db86cdc655db8e9b3b4cafb","modified":1630563046673},{"_id":"themes/kaze/layout/_partial/head.ejs","hash":"537117a906bf2ad339faaeaccf71e0d068947271","modified":1630563046673},{"_id":"themes/kaze/layout/_partial/left-aside.ejs","hash":"55a9f75b77f7686e86df551c7db32affd4fb0834","modified":1630563046674},{"_id":"themes/kaze/layout/_partial/nav.ejs","hash":"7633ccfcaa300ea336e9184fb1465471743d694b","modified":1630563046674},{"_id":"themes/kaze/layout/_partial/pagination.ejs","hash":"8c6c3a86ad42553831fd94c716e55b402987ac5a","modified":1630563046675},{"_id":"themes/kaze/layout/_partial/recent-post.ejs","hash":"d1b88c4ed9629d579bd6ef76f95b823d87ce0233","modified":1630563046678},{"_id":"themes/kaze/layout/_partial/right-aside.ejs","hash":"4132e897ad2e08815e7465882f37e09debe6dabb","modified":1630563046678},{"_id":"themes/kaze/layout/_partial/scrollbutton.ejs","hash":"d8bd8cf564f716ff5db5abd382f821b9581dda13","modified":1630563046678},{"_id":"themes/kaze/layout/_partial/tags.ejs","hash":"38112e194ec9bd2855ace95274f331255c52f843","modified":1630563046678},{"_id":"themes/kaze/layout/_partial/toc-card.ejs","hash":"6d14483899e8101194d2b34782cb036eed568aa8","modified":1630563046679},{"_id":"themes/kaze/source/css/main.styl","hash":"8b602110e32636076754d9e26555f4c924dfa8bb","modified":1630563046697},{"_id":"themes/kaze/source/js/main.js","hash":"10ed6cfe8e52b4eb1ae03adad79f0471ab4f29fd","modified":1630563046703},{"_id":"themes/kaze/scripts/generators/pagerouter.js","hash":"f86551dbe588a297ccc744249ac1a69ac82e047f","modified":1630563046684},{"_id":"themes/kaze/scripts/generators/search.js","hash":"c336bcd252be642f7f3a6a2ec2c75bbc9067f610","modified":1630563046685},{"_id":"themes/kaze/scripts/helpers/count.js","hash":"a2ecc582e9f4489726bb9668b51b682f8129e30e","modified":1630563046685},{"_id":"themes/kaze/scripts/helpers/load.js","hash":"0c87cc180b8f4612f3fb23933bbcbc47223be435","modified":1630563046685},{"_id":"themes/kaze/scripts/highlight/replace.js","hash":"38879d7e4bafd016a0a3cd86df65233eb2d0f92e","modified":1630563046686},{"_id":"themes/kaze/scripts/tag/note.js","hash":"2cfa3b68b30f53480a7657174e6d662feb850526","modified":1630563046687},{"_id":"themes/kaze/src/scripts/console.ts","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1630574454196},{"_id":"themes/kaze/src/scripts/darkMode.ts","hash":"f9eda2794effec0af2a2ebd6588bca70e97caead","modified":1630563046704},{"_id":"themes/kaze/src/scripts/index.d.ts","hash":"f257b1abca545c0debd3925d9f4dfeb1c1a371d6","modified":1630563046704},{"_id":"themes/kaze/src/scripts/main.ts","hash":"06881ee55d3c12d47401934f9b8a3ea29df168a4","modified":1630563046704},{"_id":"themes/kaze/src/scripts/menuButton.ts","hash":"87dfe7069e11b72e84f6b7583656b7f229f86dbc","modified":1630563046705},{"_id":"themes/kaze/src/scripts/popButton.ts","hash":"55c819665e573def9496ff881dfb467eee5be1e4","modified":1630563046705},{"_id":"themes/kaze/src/scripts/rollup.config.js","hash":"5b172c73b324a3e35efcf94063331ac2a2f47a6b","modified":1630563046705},{"_id":"themes/kaze/src/scripts/scrollUp.ts","hash":"4db7c436ba93ec10acf3ecf7b67f3ebc8dae7a5a","modified":1630563046706},{"_id":"themes/kaze/src/scripts/search.ts","hash":"22977bc90603643e89fec560ca2c8da52415dd6f","modified":1630563046706},{"_id":"themes/kaze/src/scripts/tsconfig.json","hash":"ba07b3d567bfab7b4fcccc0efcfe72e3917dc0d7","modified":1630563046706},{"_id":"themes/kaze/layout/_partial/plugins/latex.ejs","hash":"642795cb714e753795c0402798cbb67f6ad76426","modified":1630563046677},{"_id":"themes/kaze/layout/_partial/plugins/lightbox.ejs","hash":"9a2c363ab54d64a1c9d0fc0cd1652e029013047c","modified":1630563046677},{"_id":"themes/kaze/source/css/_base/color.styl","hash":"c217c874ebf704cae31cef9787c7330e4d7d67f0","modified":1630563046688},{"_id":"themes/kaze/source/css/_base/highlight.styl","hash":"466974079c5f2cedc89e5ffa65b79beefe1d521b","modified":1630563046688},{"_id":"themes/kaze/source/css/_base/reset.styl","hash":"87dfbf9add559fa20ac922e73db9077c43dac180","modified":1630563046689},{"_id":"themes/kaze/source/css/_base/index.styl","hash":"c5eb9ee07af5825d919504fd55acaf7c74f92edc","modified":1630563046688},{"_id":"themes/kaze/source/css/_mixins/index.styl","hash":"f39e33c0d5b45e3c737207f7eb187a406d444ea8","modified":1630563046689},{"_id":"themes/kaze/source/css/_pages/about.styl","hash":"100e60ffcc52bef725ee8ef2d2d3d7384b2209c3","modified":1630563046690},{"_id":"themes/kaze/source/css/_pages/archives.styl","hash":"af3ce4bd66908822a194b57db497aefd2020b187","modified":1630563046690},{"_id":"themes/kaze/source/css/_pages/categories.styl","hash":"7f4b6f9f25e2bb00196c84de4827dc1fd2138aa9","modified":1630563046690},{"_id":"themes/kaze/source/css/_pages/index.styl","hash":"26f96b71c3399a0091d9a3eeb013d113834c6de2","modified":1630563046691},{"_id":"themes/kaze/source/css/_pages/rewrite.styl","hash":"00f3b9899d89058da78ed63ed7e7e02476074ac7","modified":1630563046691},{"_id":"themes/kaze/source/css/_pages/tags.styl","hash":"ecf086869ac2b3a7c8ac35259c67bce7491c8850","modified":1630563046691},{"_id":"themes/kaze/source/css/_variables/index.styl","hash":"79e9e1423705a8a28fb902eaa634beebbcb0a353","modified":1630563046697},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1630563046698},{"_id":"themes/kaze/source/js/lib/lozad.min.js","hash":"2230059353a889fb3b6c7746030a7f3267fb4568","modified":1630563046699},{"_id":"themes/kaze/source/js/lib/md5.min.js","hash":"aed768f6bf5e3518a403452cb400b098fe4eb629","modified":1630563046700},{"_id":"themes/kaze/layout/_partial/plugins/comments/gitalk.ejs","hash":"1df54c8518b7c877ca1fd23bdac956935502edbc","modified":1630563046676},{"_id":"themes/kaze/layout/_partial/plugins/comments/livere.ejs","hash":"433f78a6bcdb944050868f33a2e326511bdd3f09","modified":1630563046676},{"_id":"themes/kaze/layout/_partial/plugins/comments/waline.ejs","hash":"c6b6cc91f33363740da2972b9ca2d7e5f16fd4aa","modified":1630563046677},{"_id":"themes/kaze/layout/_partial/plugins/comments/valine.ejs","hash":"e60f4ecbfff3b97ef093e3d241635aa877921e40","modified":1630563046677},{"_id":"themes/kaze/source/css/_pages/widgets/archive.styl","hash":"2f10c1c6da71c04b0232657dc6d6f30bd0b3036d","modified":1630563046692},{"_id":"themes/kaze/source/css/_pages/widgets/author.styl","hash":"48681a5fe41fa97514d61566032b887115b9ab20","modified":1630563046692},{"_id":"themes/kaze/source/css/_pages/widgets/button.styl","hash":"0cf7036ab2be25adc99b2ebb4a9f1bae492c278a","modified":1630563046692},{"_id":"themes/kaze/source/css/_pages/widgets/card.styl","hash":"9d224401bc45bd9f8fc27d71221ab94329f6c986","modified":1630563046693},{"_id":"themes/kaze/source/css/_pages/widgets/categories.styl","hash":"a482b11019600b12606e8f3ebf9fbd3b3cf9407d","modified":1630563046693},{"_id":"themes/kaze/source/css/_pages/widgets/columns.styl","hash":"0dce9e38b8ee4a3aae49b2b978859b01f132bf5f","modified":1630563046693},{"_id":"themes/kaze/source/css/_pages/widgets/container.styl","hash":"b62f9beb50f9bc6272b3b8bda0eff3eb049a31a2","modified":1630563046694},{"_id":"themes/kaze/source/css/_pages/widgets/footer.styl","hash":"30fa2c37da0c064118b3d7a654d3a0cbcbcb0683","modified":1630992348430},{"_id":"themes/kaze/source/css/_pages/widgets/nav.styl","hash":"f3a2dcfa7b57efc97bf5602112042d335f88dcd1","modified":1630563046694},{"_id":"themes/kaze/source/css/_pages/widgets/friends.styl","hash":"b5038754d995946ff09836b0d952dd1a5e131ab8","modified":1630563046694},{"_id":"themes/kaze/source/css/_pages/widgets/pagination.styl","hash":"87787a0ac9863dc2ef4647e665dc7723116af9c6","modified":1630563046695},{"_id":"themes/kaze/source/css/_pages/widgets/post.styl","hash":"fdb9b1c4163746a0858f7a60c59531dc0b6c4a1f","modified":1630563046695},{"_id":"themes/kaze/source/css/_pages/widgets/postlist.styl","hash":"8dd8f1c8e10f28f7895635f26d7269b01f7f60d5","modified":1630563046695},{"_id":"themes/kaze/source/css/_pages/widgets/recentposts.styl","hash":"694b653ce2c9dff023382468df2c3fecb89a9e03","modified":1630563046695},{"_id":"themes/kaze/source/css/_pages/widgets/search.styl","hash":"56713141669b5fc5a341ce625d67e3be60822ba3","modified":1630563046696},{"_id":"themes/kaze/source/css/_pages/widgets/section.styl","hash":"708375feb91a99dd4dd6be07422991c7aaa74813","modified":1630563046696},{"_id":"themes/kaze/source/css/_pages/widgets/tags.styl","hash":"8e28ad889a39547722ccd39aceab6bdf674657a4","modified":1630563046696},{"_id":"themes/kaze/source/css/_pages/widgets/toc.styl","hash":"4af392d4097e9ac649686134237c7bc46a3006f5","modified":1630563046697},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","hash":"3898827bc70ad71257f992ad1db7af29c391613d","modified":1630563046699},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","hash":"24c5e555525ee9d41e6e48a14954d03bd689a9aa","modified":1630563046699},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","hash":"24a435be86a12adf78fc448aa52f6fb7b635eb04","modified":1630563046700},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","hash":"e13ef6cdba90cb700e894ceff4584e95bd60de4c","modified":1630563046700},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","hash":"c7bca25425490b9465bd546b2d08f28094dc25ee","modified":1630563046701},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","hash":"b8d1a09efe704ebd1854c894f49b573721b7427d","modified":1630563046701},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","hash":"641ab0b006056b1182d4deb958a340033094f7ca","modified":1630563046702},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","hash":"cf3751130cc2c473d8b6535b5eea7799373875b0","modified":1630563046702},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","hash":"9ae9c010592228f0913714d2406420ab9d4dc7b4","modified":1630563046702},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","hash":"402395b16aacc61cd76002ca1eea02d101c98380","modified":1630563046702},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","hash":"aa3607158053897633d6cf9247b64a1df8f13ec3","modified":1630563046703},{"_id":"public/search.json","hash":"4939b9e11054da30a265b36f5a1cd394054644c2","modified":1634201920489},{"_id":"public/about/index.html","hash":"257f1620e32b661956b2bad61a9c875f1f06e7ce","modified":1634204059360},{"_id":"public/2021/08/30/Fiddler-Proxy/index.html","hash":"46ed2b17568ba90dd3f1ffe100dcb7df6795833e","modified":1634204059360},{"_id":"public/2021/08/25/Submit-Test/index.html","hash":"178a303b57ba13563065764d372fe696690b4682","modified":1634204059360},{"_id":"public/2021/08/13/Python-Selenium/index.html","hash":"c64e61ad9cffffb7b3b7acde1564d4bd84c19713","modified":1634204059360},{"_id":"public/2021/08/12/Linux-Crontab/index.html","hash":"4b39b6f08d502b08e3dbc6a86e5f59d03cfc40f8","modified":1634204059360},{"_id":"public/2021/08/12/Web_Hexo/index.html","hash":"fa09b2b868dbe9a9e91deeede47a8f55a98ae6c9","modified":1634204059360},{"_id":"public/2021/08/11/Hexo_Article/index.html","hash":"443675b2625a1f44b8b741860a505d3fbf452638","modified":1634204059360},{"_id":"public/2021/08/06/Server_Screen/index.html","hash":"75c47d34c046ae238d84b210072bd4e1b719f01a","modified":1634204059360},{"_id":"public/archives/index.html","hash":"eaed5f919037df3bac9cfa38a500de5389b163ba","modified":1634204059360},{"_id":"public/archives/2021/index.html","hash":"41ba6273e4ce9a2b541c8a697808acf40f74fb09","modified":1634204059360},{"_id":"public/archives/2021/08/index.html","hash":"235da8d626bd65f5aa68696077ff1506153eab5f","modified":1634204059360},{"_id":"public/categories/测试相关/index.html","hash":"e3cea855893d1b2b744c28d07be887078eb69f7a","modified":1634204059360},{"_id":"public/categories/WEB前端/index.html","hash":"f368769cc33f02e5094e9802fe945c10ae4992b0","modified":1634204059360},{"_id":"public/categories/服务器/index.html","hash":"bbc6e5492a2a399cf442532bd38af84765845f89","modified":1634204059360},{"_id":"public/index.html","hash":"87fc1cd097a492177420ac8fae0b2ff08aa945e9","modified":1634204059360},{"_id":"public/tags/Fiddler/index.html","hash":"023b7ae54b7a1aa997371f4e65cacbb8d01715e5","modified":1634204059360},{"_id":"public/tags/Hexo/index.html","hash":"f89402bc3e1343d7e45ef14e822bcf1808ab646d","modified":1634204059360},{"_id":"public/tags/测试工具/index.html","hash":"d437bbdb048f3e054adc55b74e96baa41aba4435","modified":1634204059360},{"_id":"public/tags/博客/index.html","hash":"778107ddcddf24faaafe3762d0b6932bef2852de","modified":1634204059360},{"_id":"public/tags/Linux/index.html","hash":"ba6ad8daf0832877d5e89944b1447455b5bfd697","modified":1634204059360},{"_id":"public/tags/定时任务/index.html","hash":"8aaeb057dcaf209896c259e3f484ec958c4da38c","modified":1634204059360},{"_id":"public/tags/python/index.html","hash":"4065c9eb206ad307d42f88b799640df965b603f8","modified":1634204059360},{"_id":"public/tags/selenium/index.html","hash":"3cb961fd637bf2dc701f4bfa8ac2183ee91d3b1d","modified":1634204059360},{"_id":"public/tags/自动化测试/index.html","hash":"a5ccf99d9b7c746c6f215fe073d67fce716a5442","modified":1634204059360},{"_id":"public/tags/部署/index.html","hash":"a9ac275e2e37caec7b985135cc387e80d9f30767","modified":1634204059360},{"_id":"public/tags/测试文档/index.html","hash":"ec3837703147c8a12a2169a754d4e169fb9572f6","modified":1634204059360},{"_id":"public/categories/index.html","hash":"47aeb997ffbfea32bedf1ef072d864dae7a500b3","modified":1634204059360},{"_id":"public/tags/index.html","hash":"75ae3e0bd1adbdcb6edbd2cf3855014f260f5e29","modified":1634204059360},{"_id":"public/links/index.html","hash":"9bd20d18418262a2af604df4dd068fef50597742","modified":1634204059360},{"_id":"public/css/prism-tomorrow.css","hash":"733208631ad1ebf0ba27f7e6f02eb11414d4e284","modified":1630565165902},{"_id":"public/css/prism-line-numbers.css","hash":"2f60836bdbdd93e2adbd172dbd304a45c37942e6","modified":1630573382372},{"_id":"public/css/main.css","hash":"6fd44a9d7c989e2e9f05a95ebd48d709da677f70","modified":1630564393854},{"_id":"public/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1630564393854},{"_id":"public/js/main.js","hash":"4fad4e322bcea16bfd37dca9449419528d0e2f95","modified":1630564393854},{"_id":"public/js/lib/lozad.min.js","hash":"31d6033296c6e6ebff829ab29d171bac3177280d","modified":1630564393854},{"_id":"public/js/lib/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1630564393854},{"_id":"public/js/lib/lightbox/baguetteBox.min.css","hash":"4daa164702723f5206591005151dc89f58eab559","modified":1630564393854},{"_id":"public/js/lib/lightbox/baguetteBox.min.js","hash":"300d6a58c385a454ac7f6b271e210ab59f54796c","modified":1630564393854},{"_id":"public/js/lib/prism/prism-coy.min.css","hash":"de43e5d8fe8ac0e5be493fc37280a14764d224ba","modified":1630564393854},{"_id":"public/js/lib/prism/prism-dark.min.css","hash":"99ad7013f4e2cb94d6858f1d338ce24976722e16","modified":1630564393854},{"_id":"public/js/lib/prism/prism-line-numbers.min.css","hash":"7831e69297d5fadf91f33f63f2aeb58f0c374e6b","modified":1630564393854},{"_id":"public/js/lib/prism/prism-okaidia.min.css","hash":"a611beee4ccd9bc303667159ad2977fc4fa02126","modified":1630564393854},{"_id":"public/js/lib/prism/prism-twilight.min.css","hash":"18a27c7ef76965a40daaab90035500a3ad7f2cbf","modified":1630564393854},{"_id":"public/js/lib/prism/prism-solarizedlight.min.css","hash":"58ddae9f0df85468118a028e24b975848e22488c","modified":1630564393854},{"_id":"public/js/lib/prism/prism.min.css","hash":"3e748cee6ef8cdaceec5335971b8d133aa9dcfa3","modified":1630564393854},{"_id":"public/js/lib/prism/prism-funky.min.css","hash":"1b4f667352bde11377b82f6402af9470ca7d410d","modified":1630564393854},{"_id":"public/js/lib/prism/prism-tomorrow.min.css","hash":"ff9820d63a78827b2798030c4734e9c752183953","modified":1630564393854},{"_id":"public/baidu_urls.txt","hash":"b112f294c3f831208818fdafdd1f92a552a2b21f","modified":1634017668905},{"_id":"source/_posts/Parameter-Decomposition.md","hash":"ec57798a9bfa6a125f70bc2ada8c532da48a5164","modified":1634201685431},{"_id":"source/_posts/Parameter-Decomposition/result.jpg","hash":"c0a64a5636bff6148c412dd5121e8ef185a44bdc","modified":1630598151602},{"_id":"public/2021/09/02/Parameter-Decomposition/index.html","hash":"7bf1eeb0db442df707b294ab1353657c890517c8","modified":1634204059360},{"_id":"public/archives/2021/09/index.html","hash":"845203780fcd564b79b0c7265ab52670722b52d4","modified":1634204059360},{"_id":"public/categories/日常问题/index.html","hash":"ade3335ebd0d20a42554c508407174bf720608fa","modified":1634204059360},{"_id":"source/_posts/Python-Selenium/Find_element_baidu.jpg","hash":"35e6911cefd7249841889d134cc315e3de3b4351","modified":1630659448772},{"_id":"source/_posts/Parameter-Decomposition/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"source/_posts/Python-Change-List.md","hash":"3d723b654ac17d6d5db6c22569e2ae1756825a5f","modified":1634201685540},{"_id":"source/_posts/Python-Change-List/show_result.jpg","hash":"cf9079a5007d8dec7f90660fc21c6fc51bcbfcdd","modified":1630981417377},{"_id":"source/_posts/Python-Change-List/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/05/Python-Change-List/index.html","hash":"0a9ce211c086885ce5719798d2476c7118bf4a40","modified":1634204059360},{"_id":"source/_posts/Python-request-MistakenCode.md","hash":"b58c312e7ac730bbb07d4ea6e8fe1caaf5eed912","modified":1634201685484},{"_id":"source/_posts/Python-request-MistakenCode/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/08/Python-request-MistakenCode/index.html","hash":"c874f6edbd96b61583dd462f93f69d41418c8ea1","modified":1634204059360},{"_id":"source/_posts/Python-Bs4-RemoveLabel.md","hash":"023cad7b0b1388cc15ec2629775ef09f179188e3","modified":1634201685554},{"_id":"source/_posts/Python-Bs4-RemoveLabel/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/10/Python-Bs4-RemoveLabel/index.html","hash":"b06b0b24097f95c63e64def3640753995145d0e6","modified":1634204059360},{"_id":"public/archives/page/2/index.html","hash":"08984de945b117a3e72bf504744e1ab3a815d471","modified":1634204059360},{"_id":"public/archives/2021/page/2/index.html","hash":"d3b384fbef9a2d90469d105e814a20071a8f0992","modified":1634204059360},{"_id":"public/page/2/index.html","hash":"d7fa34bfa6b91743f45a89806e3fdcf6b34c7cca","modified":1634204059360},{"_id":"source/_posts/Python-Re-RemoveHtml.md","hash":"a487a49dd19008193fd20b83a14dac76013cb61f","modified":1634201685314},{"_id":"source/_posts/Python-Re-RemoveHtml/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/10/Python-Re-RemoveHtml/index.html","hash":"61dc5f18d1f943c80d523b16fcaed525d4aed63d","modified":1634204059360},{"_id":"source/_posts/Python-Package.md","hash":"4a850852dc01fac08a788537edf598c996696003","modified":1634201685524},{"_id":"public/2021/09/24/Python-Package/index.html","hash":"7372edbf94a8f6bd8588c196a4be3f3ef04d37a9","modified":1634204059360},{"_id":"public/2021/08/30/Fiddler-Proxy/Download.jpg","hash":"f720fac88b7a2f4f0744ffa876f7df9041cb15c8","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Android_Proxy.png","hash":"d2d8d31a2e3947db8a9117796a75a187a5cbc5cc","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Certificate_Phone.png","hash":"8a5972f7fd1e0a98e510ec752bf2e075eaccc5f1","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_IP.jpg","hash":"bf33e5b4620bc49dbd17a1ee98cfbebc03a03d71","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Ignore.jpg","hash":"fefa3f98a551918207e653d31883e2c95ad8a3f6","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Port.jpg","hash":"03fc0e400da23a84cb3c6c2f49e344e32c25da30","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Successful.jpg","hash":"51805dfd3a873a823ed703f0050fe9e6ce33b0c3","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_certificate.jpg","hash":"f31aa6b71972041b2f3b55887ef0b396f443a099","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_certificate_install.jpg","hash":"40e53b73953c18a7bb576a50eab49ca187d5238c","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_iOS_Proxy.png","hash":"984c69e377e7eac92ddc132578265d0535f53558","modified":1632461107338},{"_id":"public/2021/08/12/Linux-Crontab/crontab_sel.png","hash":"9511d6800cc37be26709abb9e9391bd795a09935","modified":1632461107338},{"_id":"public/2021/09/02/Parameter-Decomposition/result.jpg","hash":"c0a64a5636bff6148c412dd5121e8ef185a44bdc","modified":1632461107338},{"_id":"public/2021/09/05/Python-Change-List/show_result.jpg","hash":"cf9079a5007d8dec7f90660fc21c6fc51bcbfcdd","modified":1632461107338},{"_id":"public/2021/08/12/Web_Hexo/git_version.png","hash":"5040a21115b7f4e7cda4367f4baaa997f27b35d2","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler.jpg","hash":"3bb3faf1fe6cec284ca115e1c9cdc6518ba0ae33","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_After.jpg","hash":"e6f75a6528817cf6b60bbf31c74a0738a5edd823","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Before.jpg","hash":"82ca5a8767fa1cef21d5e7521fb638c288124586","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Open.jpg","hash":"b239c62c825ec0dbff7be1a38ef95772488ecaa3","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_filter.jpg","hash":"ad4ba918717b007120998124425904f3d89e2fbc","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/11/Hexo_Article/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/12/Linux-Crontab/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/09/10/Python-Bs4-RemoveLabel/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/09/05/Python-Change-List/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/09/10/Python-Re-RemoveHtml/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/09/02/Parameter-Decomposition/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/13/Python-Selenium/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/09/08/Python-request-MistakenCode/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/25/Submit-Test/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/06/Server_Screen/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/12/Web_Hexo/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Https_traffic.png","hash":"24d727bb2a17b6d6b9491e44b756fe29262fd26c","modified":1632461107338},{"_id":"public/2021/08/13/Python-Selenium/Find_element_baidu.jpg","hash":"35e6911cefd7249841889d134cc315e3de3b4351","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_Right.jpg","hash":"12756d4dc180adcbe864ea37905e7063c1465e77","modified":1632461107338},{"_id":"public/2021/08/30/Fiddler-Proxy/Fiddler_left.jpg","hash":"51d73441e020bd92211586cfa8c3c23aa6c21a6f","modified":1632461107338},{"_id":"source/_posts/Python-Package/useCommand.jpg","hash":"73e79f7232d81bb946bcf9f0b705f01485e3ad39","modified":1632468596653},{"_id":"source/_posts/Python-Package/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/24/Python-Package/useCommand.jpg","hash":"73e79f7232d81bb946bcf9f0b705f01485e3ad39","modified":1632469585213},{"_id":"public/2021/09/24/Python-Package/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632469585213},{"_id":"source/_posts/Linux-Python-Install.md","hash":"7c5dbd03865a794fc4ceac500d30799e28e5094e","modified":1634201685511},{"_id":"source/_posts/Linux-Python-Install/Linux-initPython.jpg","hash":"3707f5d558fde6b18f0ab8f4fc0d5bea1eff5808","modified":1632813878461},{"_id":"public/2021/09/28/Linux-Python-Install/index.html","hash":"7f26609aab3cdd59c1eed551ca2d998c2ad69fb5","modified":1634204059360},{"_id":"public/2021/09/28/Linux-Python-Install/Linux-initPython.jpg","hash":"3707f5d558fde6b18f0ab8f4fc0d5bea1eff5808","modified":1632814063081},{"_id":"source/_posts/Linux-Python-Install/Linux-pythonInstall.jpg","hash":"a16529b57e33b9e8bb94df7f3a9c8792883b06e1","modified":1632881970503},{"_id":"source/_posts/Linux-Python-Install/Linux-install-win.jpg","hash":"ac43f23e711772e2949f798a01d28450160c1ac3","modified":1632815831894},{"_id":"public/2021/09/28/Linux-Python-Install/Linux-pythonInstall.jpg","hash":"a16529b57e33b9e8bb94df7f3a9c8792883b06e1","modified":1632882350329},{"_id":"public/2021/09/28/Linux-Python-Install/Linux-install-win.jpg","hash":"ac43f23e711772e2949f798a01d28450160c1ac3","modified":1632882350329},{"_id":"source/_posts/Linux-Python-Install/Linux-Python-success.jpg","hash":"694c04c0bd9676d18315128ad84d43462367e80a","modified":1632885523841},{"_id":"source/_posts/Linux-Python-Install/Linux-python-Path.jpg","hash":"b7ed29c12ef37ee5d021e0f279ba60e782b9f2a2","modified":1632885384401},{"_id":"source/_posts/Linux-Python-Install/img.png","hash":"eec8f5324414c85bdfeeddb081313af2c16f6a7c","modified":1632885381258},{"_id":"source/_posts/Linux-Python-Install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/09/28/Linux-Python-Install/img.png","hash":"eec8f5324414c85bdfeeddb081313af2c16f6a7c","modified":1632885683705},{"_id":"public/2021/09/28/Linux-Python-Install/Linux-Python-success.jpg","hash":"694c04c0bd9676d18315128ad84d43462367e80a","modified":1632885683705},{"_id":"public/2021/09/28/Linux-Python-Install/Linux-python-Path.jpg","hash":"b7ed29c12ef37ee5d021e0f279ba60e782b9f2a2","modified":1632885683705},{"_id":"public/2021/09/28/Linux-Python-Install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1632885683705},{"_id":"source/_posts/Linux-Nginx-install.md","hash":"5383ae5e9489a77d2532527899df62d8425a050d","modified":1634201685544},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_download.jpg","hash":"5f34a2060df35a796d199faa2ad26c88a44db213","modified":1633763003872},{"_id":"public/2021/10/09/Linux-Nginx-install/index.html","hash":"6fee61672904e7f7558e99adceaf9d739aacd1f7","modified":1634204059360},{"_id":"public/archives/2021/10/index.html","hash":"e7497d210fc6841dadd18edf4ce9e2b302d0f9a0","modified":1634204059360},{"_id":"public/2021/10/09/Linux-Nginx-install/Linux_nginx_download.jpg","hash":"5f34a2060df35a796d199faa2ad26c88a44db213","modified":1633763211186},{"_id":"source/_posts/Python-requirements-install.md","hash":"3a1b7d8562a4b71b339fed842cf08d0209270597","modified":1634201685419},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_check.png","hash":"fe38643f59a42d39e972e029fdf1fd69374a7ae9","modified":1633764410624},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_install.png","hash":"ba21ee12ddf8a14516b592563db277c1df509627","modified":1633764443338},{"_id":"source/_posts/Linux-Nginx-install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"source/_posts/Python-requirements-install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/10/09/Python-requirements-install/index.html","hash":"8c7dcab8bf49c7a012c204480b8c219e1b5e5db6","modified":1633770522770},{"_id":"public/2021/10/09/Linux-Nginx-install/Linux_nginx_check.png","hash":"fe38643f59a42d39e972e029fdf1fd69374a7ae9","modified":1633770522770},{"_id":"public/2021/10/09/Linux-Nginx-install/Linux_nginx_install.png","hash":"ba21ee12ddf8a14516b592563db277c1df509627","modified":1633770522770},{"_id":"public/2021/10/09/Linux-Nginx-install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633770522770},{"_id":"public/2021/10/09/Python-requirements-install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633770522770},{"_id":"public/2021/10/05/Python-requirements-install/index.html","hash":"f5054f5f96d7e510d45ff19740f9fad1ff784370","modified":1634204059360},{"_id":"public/2021/10/05/Python-requirements-install/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633770750872},{"_id":"source/_posts/Python-asyncio.md","hash":"ef07724f486e5b7e8122bc7f78371eef3df962e3","modified":1634201685435},{"_id":"source/_posts/Python-asyncio/Python_asyncio.jpg","hash":"7b1d00a82a19a51893583187e8de6ffd3071dbd6","modified":1633856827546},{"_id":"source/_posts/Python-asyncio/Python_asyncio_synchronization.jpg","hash":"0b51e7dc031b43ea73753b680c1bcb0696fad1b9","modified":1633856333190},{"_id":"source/_posts/Python-asyncio/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630566401717},{"_id":"public/2021/10/10/Python-asyncio/index.html","hash":"7422521bb1b6e2538fd97b3a8d01dff346e6906f","modified":1634204059360},{"_id":"public/2021/10/10/Python-asyncio/Python_asyncio.jpg","hash":"7b1d00a82a19a51893583187e8de6ffd3071dbd6","modified":1633857954662},{"_id":"public/2021/10/10/Python-asyncio/Python_asyncio_synchronization.jpg","hash":"0b51e7dc031b43ea73753b680c1bcb0696fad1b9","modified":1633857954662},{"_id":"public/2021/10/10/Python-asyncio/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633857954662},{"_id":"source/_posts/Git-OverlayRemoteCode.md","hash":"20fbbd793215764e7ef1571abc108a06a5dafbb8","modified":1634201685392},{"_id":"source/_posts/Git-OverlayRemoteCode/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633936910641},{"_id":"public/2021/10/11/Git-OverlayRemoteCode/index.html","hash":"b809d4abf74eca51d646853ce94244d5d33a1c7a","modified":1634204059360},{"_id":"public/tags/Git/index.html","hash":"93a39ba17f78838afc380d4addcd0778126eb8fa","modified":1634204059360},{"_id":"public/2021/10/11/Git-OverlayRemoteCode/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1633936978378}],"Category":[{"name":"测试相关","_id":"ckt2jxv3k0003lcu3156i1svi"},{"name":"WEB前端","_id":"ckt2jxv3w0008lcu3hede9qkf"},{"name":"服务器","_id":"ckt2jxv3z000dlcu3elghag8s"},{"name":"日常问题","_id":"ckt34tyfn0001ccriansvh287"}],"Data":[],"Page":[{"title":"about","date":"2021-08-09T06:50:49.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: about\ndate: 2021-08-09 14:50:49\ntype: 'about'\nlayout: 'about'\n---\n","updated":"2021-09-02T09:09:10.096Z","path":"about/index.html","_id":"ckt2jxv3e0000lcu338qd7ttb","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Fiddler抓包工具使用及配置","date":"2021-08-30T09:14:41.000Z","_content":"## 一、什么是Fiddler？\n<font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n## 二、下载安装Fiddler\n{% note info %}\nFiddler官网下载地址：[打开下载地址](https://www.telerik.com/download/fiddler)\n{% endnote %}\n![下载配置资料](Fiddler-Proxy/Download.jpg)\n{% note success %}\n一路next，当见到浏览器打开以下页面时，及安装成功\n{% endnote %}\n![安装成功](Fiddler-Proxy/Fiddler_Successful.jpg)\n## 三、如何配置Fiddler？\n### 1、打开Fiddler\n{% note info %}\n安装完成后，打开软件(在安装目录下找到Fiddler.exe文件，双击打开)\n{% endnote %}\n![打开软件](Fiddler-Proxy/Fiddler_Open.jpg)\n### 2、配置Fiddler\n{% note info %}\n打开后我们可以看到Fiddler的一个面板，随后打开tools > options 菜单\n{% endnote %}\n![Fiddler面板](Fiddler-Proxy/Fiddler.jpg)\n{% note info %}\n在options菜单中，我们打开https模块，然后勾选Decrypt HTTPS traffic\n{% endnote %}\n![勾选traffic](Fiddler-Proxy/Fiddler_Https_traffic.png)\n{% note info %}\n随后软件出现以下弹窗，我们选yes\n{% endnote %}\n![添加证书](Fiddler-Proxy/Fiddler_certificate.jpg)\n{% note info %}\n在上一步后，系统将提示是否安装证书，我们选是就行了\n{% endnote %}\n![证书安装](Fiddler-Proxy/Fiddler_certificate_install.jpg)\n{% note info %}\n接着勾选上Ignore server certificate errors即可，返回主面板然后打开浏览器，现在我们就可以看到左侧面板中有抓到的包数据进来了\n{% endnote %}\n![同意证书](Fiddler-Proxy/Fiddler_Ignore.jpg)\n{% note info %}\n在左侧面板中，我们可以看到数据包的状态码、host、url等\n{% endnote %}\n![左侧面板](Fiddler-Proxy/Fiddler_left.jpg)\n{% note info %}\n在左侧面板中选中一个数据包，则可在右侧面板中查看到该请求的请求头以及具体返回值相关信息\n{% endnote %}\n![右侧面板](Fiddler-Proxy/Fiddler_Right.jpg)\n#### 2.1、配置手机抓包\n{% note info %}\nFiddler中打开tools > options > connection 设置端口，并允许远程连接\n{% endnote %}\n![修改端口，允许远程连接](Fiddler-Proxy/Fiddler_Port.jpg)\n{% note info %}\n首先我们需要在Fiddler右上角获取当前ip地址，手机连接wifi必须与电脑连接的网络处于同一网段\n{% endnote %}\n![查看ip地址](Fiddler-Proxy/Fiddler_IP.jpg)\n{% note info %}\n<font color=\"red\">Android:</font>\n打开手机中设置 > WIFI > 网络详情 > 代理(配置代理) > 手动 中输入刚刚我们的ip以及端口号保存\n{% endnote %}\n![Android设置代理](Fiddler-Proxy/Fiddler_Android_Proxy.png)\n{% note info %}\n<font color=\"red\">iOS:</font>\n打开手机中设置 > WIFI > 网络详情 > 代理(配置代理) > 手动 中输入刚刚我们的ip以及端口号保存\n{% endnote %}\n![iOS设置代理](Fiddler-Proxy/Fiddler_iOS_Proxy.png)\n{% note info %}\n然后打开手机自带的浏览器，输入下面地址，然后点击<font color=\"red\"> FiddlerRoot certificate </font>下载证书\n{% endnote %}\n```\nIP地址:端口号 //注意冒号用英文冒号\n```\n{% note info %}\n<font color=\"red\">Android </font>下载完成后，在下载中找到文件点击根据提示进行安装，至到系统提示安装完成\n<font color=\"red\">iOS </font>需注意下载完成之后，打开设置 > 通用 > 描述文件 进行安装，安装完成之后进入关于本机 > 证书信任中将<font color=\"Green\"> DO_NOT_TRUST_FidderRoot </font>打开\n{% endnote %}\n![浏览器下载证书](Fiddler-Proxy/Fiddler_Certificate_Phone.png)\n{% note success %}\n以上配置完成了之后就可以愉快的抓包啦~\n{% endnote %}\n## 四、如何使用Fiddler\n#### 1、过滤器\n{% note info %}\n在右侧面板中，打开 Filters ，勾选 use Filters ，然后与下图相同配置，在输入框中输入想要过滤出来的域名，如:baidu.com 多个域名之间使用英文分号隔开，设置完成后点击右侧Action中 Run Filterset Now 立即执行\n{% endnote %}\n![过滤器](Fiddler-Proxy/Fiddler_filter.jpg)\n#### 2、断点\n{% note info %}\n在顶部菜单中选择 Rules > Automatic BreakPoints，在这个菜单项我们可以看到有<font color=\"red\">Before Requests 、 After Requests 、 Disabled </font>三个选项，默认选中Disables。\n<font color=\"red\">Before Requests </font>则为在请求之前拦截，选择了此项后，我们可以在请求之前修改请求头，修改完成后，点击Run to Completion即可发送请求，以达到测试效果\n<font color=\"red\">After Requests </font>则为在请求之后拦截，选择了此项后，我们可以在请求之后修改返回参数，修改完成后，点击Run to Completion即可发送请求，以达到测试效果\n{% endnote %}\n![修改请求头](Fiddler-Proxy/Fiddler_Before.jpg)\n![修改返回参数](Fiddler-Proxy/Fiddler_After.jpg)\n#### 3、弱网设置\n{% note info %}\n在右侧面板中，打开 FiddlerScript，找到以下脚本进行更改。\n<font color=\"red\"> request-trickle-delay </font>中的值代表每KB的数据被上传时会被延时多少毫秒；\n<font color=\"red\"> response-trickle-delay </font>则对应下载时每KB的数据会被延时多少毫秒\n{% endnote %}\n```javascript\nif (m_SimulateModem) {\n    // Delay sends by 300ms per KB uploaded.\n    oSession[\"request-trickle-delay\"] = \"300\"; \n    // Delay receives by 150ms per KB downloaded.\n    oSession[\"response-trickle-delay\"] = \"150\"; \n}\n```\n### 五、小节\n{% note success %}\n如果上述操作没有抓到包，建议尝试手动导入导出证书后再试。最后附上官方文档，如有其它功能需求可以[查看官方文档~](https://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler)\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Fiddler-Proxy.md","raw":"---\ntitle: Fiddler抓包工具使用及配置\ndate: 2021-08-30 17:14:41\ntags: [Fiddler, 测试工具]\ncategories: 测试相关\n---\n## 一、什么是Fiddler？\n<font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n## 二、下载安装Fiddler\n{% note info %}\nFiddler官网下载地址：[打开下载地址](https://www.telerik.com/download/fiddler)\n{% endnote %}\n![下载配置资料](Fiddler-Proxy/Download.jpg)\n{% note success %}\n一路next，当见到浏览器打开以下页面时，及安装成功\n{% endnote %}\n![安装成功](Fiddler-Proxy/Fiddler_Successful.jpg)\n## 三、如何配置Fiddler？\n### 1、打开Fiddler\n{% note info %}\n安装完成后，打开软件(在安装目录下找到Fiddler.exe文件，双击打开)\n{% endnote %}\n![打开软件](Fiddler-Proxy/Fiddler_Open.jpg)\n### 2、配置Fiddler\n{% note info %}\n打开后我们可以看到Fiddler的一个面板，随后打开tools > options 菜单\n{% endnote %}\n![Fiddler面板](Fiddler-Proxy/Fiddler.jpg)\n{% note info %}\n在options菜单中，我们打开https模块，然后勾选Decrypt HTTPS traffic\n{% endnote %}\n![勾选traffic](Fiddler-Proxy/Fiddler_Https_traffic.png)\n{% note info %}\n随后软件出现以下弹窗，我们选yes\n{% endnote %}\n![添加证书](Fiddler-Proxy/Fiddler_certificate.jpg)\n{% note info %}\n在上一步后，系统将提示是否安装证书，我们选是就行了\n{% endnote %}\n![证书安装](Fiddler-Proxy/Fiddler_certificate_install.jpg)\n{% note info %}\n接着勾选上Ignore server certificate errors即可，返回主面板然后打开浏览器，现在我们就可以看到左侧面板中有抓到的包数据进来了\n{% endnote %}\n![同意证书](Fiddler-Proxy/Fiddler_Ignore.jpg)\n{% note info %}\n在左侧面板中，我们可以看到数据包的状态码、host、url等\n{% endnote %}\n![左侧面板](Fiddler-Proxy/Fiddler_left.jpg)\n{% note info %}\n在左侧面板中选中一个数据包，则可在右侧面板中查看到该请求的请求头以及具体返回值相关信息\n{% endnote %}\n![右侧面板](Fiddler-Proxy/Fiddler_Right.jpg)\n#### 2.1、配置手机抓包\n{% note info %}\nFiddler中打开tools > options > connection 设置端口，并允许远程连接\n{% endnote %}\n![修改端口，允许远程连接](Fiddler-Proxy/Fiddler_Port.jpg)\n{% note info %}\n首先我们需要在Fiddler右上角获取当前ip地址，手机连接wifi必须与电脑连接的网络处于同一网段\n{% endnote %}\n![查看ip地址](Fiddler-Proxy/Fiddler_IP.jpg)\n{% note info %}\n<font color=\"red\">Android:</font>\n打开手机中设置 > WIFI > 网络详情 > 代理(配置代理) > 手动 中输入刚刚我们的ip以及端口号保存\n{% endnote %}\n![Android设置代理](Fiddler-Proxy/Fiddler_Android_Proxy.png)\n{% note info %}\n<font color=\"red\">iOS:</font>\n打开手机中设置 > WIFI > 网络详情 > 代理(配置代理) > 手动 中输入刚刚我们的ip以及端口号保存\n{% endnote %}\n![iOS设置代理](Fiddler-Proxy/Fiddler_iOS_Proxy.png)\n{% note info %}\n然后打开手机自带的浏览器，输入下面地址，然后点击<font color=\"red\"> FiddlerRoot certificate </font>下载证书\n{% endnote %}\n```\nIP地址:端口号 //注意冒号用英文冒号\n```\n{% note info %}\n<font color=\"red\">Android </font>下载完成后，在下载中找到文件点击根据提示进行安装，至到系统提示安装完成\n<font color=\"red\">iOS </font>需注意下载完成之后，打开设置 > 通用 > 描述文件 进行安装，安装完成之后进入关于本机 > 证书信任中将<font color=\"Green\"> DO_NOT_TRUST_FidderRoot </font>打开\n{% endnote %}\n![浏览器下载证书](Fiddler-Proxy/Fiddler_Certificate_Phone.png)\n{% note success %}\n以上配置完成了之后就可以愉快的抓包啦~\n{% endnote %}\n## 四、如何使用Fiddler\n#### 1、过滤器\n{% note info %}\n在右侧面板中，打开 Filters ，勾选 use Filters ，然后与下图相同配置，在输入框中输入想要过滤出来的域名，如:baidu.com 多个域名之间使用英文分号隔开，设置完成后点击右侧Action中 Run Filterset Now 立即执行\n{% endnote %}\n![过滤器](Fiddler-Proxy/Fiddler_filter.jpg)\n#### 2、断点\n{% note info %}\n在顶部菜单中选择 Rules > Automatic BreakPoints，在这个菜单项我们可以看到有<font color=\"red\">Before Requests 、 After Requests 、 Disabled </font>三个选项，默认选中Disables。\n<font color=\"red\">Before Requests </font>则为在请求之前拦截，选择了此项后，我们可以在请求之前修改请求头，修改完成后，点击Run to Completion即可发送请求，以达到测试效果\n<font color=\"red\">After Requests </font>则为在请求之后拦截，选择了此项后，我们可以在请求之后修改返回参数，修改完成后，点击Run to Completion即可发送请求，以达到测试效果\n{% endnote %}\n![修改请求头](Fiddler-Proxy/Fiddler_Before.jpg)\n![修改返回参数](Fiddler-Proxy/Fiddler_After.jpg)\n#### 3、弱网设置\n{% note info %}\n在右侧面板中，打开 FiddlerScript，找到以下脚本进行更改。\n<font color=\"red\"> request-trickle-delay </font>中的值代表每KB的数据被上传时会被延时多少毫秒；\n<font color=\"red\"> response-trickle-delay </font>则对应下载时每KB的数据会被延时多少毫秒\n{% endnote %}\n```javascript\nif (m_SimulateModem) {\n    // Delay sends by 300ms per KB uploaded.\n    oSession[\"request-trickle-delay\"] = \"300\"; \n    // Delay receives by 150ms per KB downloaded.\n    oSession[\"response-trickle-delay\"] = \"150\"; \n}\n```\n### 五、小节\n{% note success %}\n如果上述操作没有抓到包，建议尝试手动导入导出证书后再试。最后附上官方文档，如有其它功能需求可以[查看官方文档~](https://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler)\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Fiddler-Proxy","published":1,"updated":"2021-10-14T08:37:07.059Z","_id":"ckt2jxv3h0001lcu33ap62rrn","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Fiddler？\"><a href=\"#一、什么是Fiddler？\" class=\"headerlink\" title=\"一、什么是Fiddler？\"></a>一、什么是Fiddler？</h2><p><font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。</p>\n<h2 id=\"二、下载安装Fiddler\"><a href=\"#二、下载安装Fiddler\" class=\"headerlink\" title=\"二、下载安装Fiddler\"></a>二、下载安装Fiddler</h2><div class=\"post-note note-info\"><p>Fiddler官网下载地址：<a href=\"https://www.telerik.com/download/fiddler\">打开下载地址</a></p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Download.jpg\" alt=\"下载配置资料\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Download.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-success\"><p>一路next，当见到浏览器打开以下页面时，及安装成功</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Successful.jpg\" alt=\"安装成功\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Successful.jpg\" class=\"lozad post-image\"></p>\n<h2 id=\"三、如何配置Fiddler？\"><a href=\"#三、如何配置Fiddler？\" class=\"headerlink\" title=\"三、如何配置Fiddler？\"></a>三、如何配置Fiddler？</h2><h3 id=\"1、打开Fiddler\"><a href=\"#1、打开Fiddler\" class=\"headerlink\" title=\"1、打开Fiddler\"></a>1、打开Fiddler</h3><div class=\"post-note note-info\"><p>安装完成后，打开软件(在安装目录下找到Fiddler.exe文件，双击打开)</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Open.jpg\" alt=\"打开软件\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Open.jpg\" class=\"lozad post-image\"></p>\n<h3 id=\"2、配置Fiddler\"><a href=\"#2、配置Fiddler\" class=\"headerlink\" title=\"2、配置Fiddler\"></a>2、配置Fiddler</h3><div class=\"post-note note-info\"><p>打开后我们可以看到Fiddler的一个面板，随后打开tools &gt; options 菜单</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler.jpg\" alt=\"Fiddler面板\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>在options菜单中，我们打开https模块，然后勾选Decrypt HTTPS traffic</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Https_traffic.png\" alt=\"勾选traffic\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Https_traffic.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>随后软件出现以下弹窗，我们选yes</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate.jpg\" alt=\"添加证书\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>在上一步后，系统将提示是否安装证书，我们选是就行了</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate_install.jpg\" alt=\"证书安装\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate_install.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>接着勾选上Ignore server certificate errors即可，返回主面板然后打开浏览器，现在我们就可以看到左侧面板中有抓到的包数据进来了</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Ignore.jpg\" alt=\"同意证书\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Ignore.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>在左侧面板中，我们可以看到数据包的状态码、host、url等</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_left.jpg\" alt=\"左侧面板\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_left.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>在左侧面板中选中一个数据包，则可在右侧面板中查看到该请求的请求头以及具体返回值相关信息</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Right.jpg\" alt=\"右侧面板\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Right.jpg\" class=\"lozad post-image\"></p>\n<h4 id=\"2-1、配置手机抓包\"><a href=\"#2-1、配置手机抓包\" class=\"headerlink\" title=\"2.1、配置手机抓包\"></a>2.1、配置手机抓包</h4><div class=\"post-note note-info\"><p>Fiddler中打开tools &gt; options &gt; connection 设置端口，并允许远程连接</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Port.jpg\" alt=\"修改端口，允许远程连接\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Port.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>首先我们需要在Fiddler右上角获取当前ip地址，手机连接wifi必须与电脑连接的网络处于同一网段</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_IP.jpg\" alt=\"查看ip地址\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_IP.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p><font color=\"red\">Android:</font><br>打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Android_Proxy.png\" alt=\"Android设置代理\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Android_Proxy.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p><font color=\"red\">iOS:</font><br>打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_iOS_Proxy.png\" alt=\"iOS设置代理\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_iOS_Proxy.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-info\"><p>然后打开手机自带的浏览器，输入下面地址，然后点击<font color=\"red\"> FiddlerRoot certificate </font>下载证书</p></div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IP地址:端口号 &#x2F;&#x2F;注意冒号用英文冒号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-info\"><p><font color=\"red\">Android </font>下载完成后，在下载中找到文件点击根据提示进行安装，至到系统提示安装完成<br><font color=\"red\">iOS </font>需注意下载完成之后，打开设置 &gt; 通用 &gt; 描述文件 进行安装，安装完成之后进入关于本机 &gt; 证书信任中将<font color=\"Green\"> DO_NOT_TRUST_FidderRoot </font>打开</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Certificate_Phone.png\" alt=\"浏览器下载证书\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Certificate_Phone.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-success\"><p>以上配置完成了之后就可以愉快的抓包啦~</p></div>\n<h2 id=\"四、如何使用Fiddler\"><a href=\"#四、如何使用Fiddler\" class=\"headerlink\" title=\"四、如何使用Fiddler\"></a>四、如何使用Fiddler</h2><h4 id=\"1、过滤器\"><a href=\"#1、过滤器\" class=\"headerlink\" title=\"1、过滤器\"></a>1、过滤器</h4><div class=\"post-note note-info\"><p>在右侧面板中，打开 Filters ，勾选 use Filters ，然后与下图相同配置，在输入框中输入想要过滤出来的域名，如:baidu.com 多个域名之间使用英文分号隔开，设置完成后点击右侧Action中 Run Filterset Now 立即执行</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_filter.jpg\" alt=\"过滤器\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_filter.jpg\" class=\"lozad post-image\"></p>\n<h4 id=\"2、断点\"><a href=\"#2、断点\" class=\"headerlink\" title=\"2、断点\"></a>2、断点</h4><div class=\"post-note note-info\"><p>在顶部菜单中选择 Rules &gt; Automatic BreakPoints，在这个菜单项我们可以看到有<font color=\"red\">Before Requests 、 After Requests 、 Disabled </font>三个选项，默认选中Disables。<br><font color=\"red\">Before Requests </font>则为在请求之前拦截，选择了此项后，我们可以在请求之前修改请求头，修改完成后，点击Run to Completion即可发送请求，以达到测试效果<br><font color=\"red\">After Requests </font>则为在请求之后拦截，选择了此项后，我们可以在请求之后修改返回参数，修改完成后，点击Run to Completion即可发送请求，以达到测试效果</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Before.jpg\" alt=\"修改请求头\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Before.jpg\" class=\"lozad post-image\"><br><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_After.jpg\" alt=\"修改返回参数\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/Fiddler_After.jpg\" class=\"lozad post-image\"></p>\n<h4 id=\"3、弱网设置\"><a href=\"#3、弱网设置\" class=\"headerlink\" title=\"3、弱网设置\"></a>3、弱网设置</h4><div class=\"post-note note-info\"><p>在右侧面板中，打开 FiddlerScript，找到以下脚本进行更改。<br><font color=\"red\"> request-trickle-delay </font>中的值代表每KB的数据被上传时会被延时多少毫秒；<br><font color=\"red\"> response-trickle-delay </font>则对应下载时每KB的数据会被延时多少毫秒</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_SimulateModem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Delay sends by 300ms per KB uploaded.</span>\n    oSession<span class=\"token punctuation\">[</span><span class=\"token string\">\"request-trickle-delay\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"300\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// Delay receives by 150ms per KB downloaded.</span>\n    oSession<span class=\"token punctuation\">[</span><span class=\"token string\">\"response-trickle-delay\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"150\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"五、小节\"><a href=\"#五、小节\" class=\"headerlink\" title=\"五、小节\"></a>五、小节</h3><div class=\"post-note note-success\"><p>如果上述操作没有抓到包，建议尝试手动导入导出证书后再试。最后附上官方文档，如有其它功能需求可以<a href=\"https://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler\">查看官方文档~</a></p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Fiddler？\"><a href=\"#一、什么是Fiddler？\" class=\"headerlink\" title=\"一、什么是Fiddler？\"></a>一、什么是Fiddler？</h2><p><font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。</p>\n<h2 id=\"二、下载安装Fiddler\"><a href=\"#二、下载安装Fiddler\" class=\"headerlink\" title=\"二、下载安装Fiddler\"></a>二、下载安装Fiddler</h2><div class=\"post-note note-info\"><p>Fiddler官网下载地址：<a href=\"https://www.telerik.com/download/fiddler\">打开下载地址</a></p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Download.jpg\" alt=\"下载配置资料\"></p>\n<div class=\"post-note note-success\"><p>一路next，当见到浏览器打开以下页面时，及安装成功</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Successful.jpg\" alt=\"安装成功\"></p>\n<h2 id=\"三、如何配置Fiddler？\"><a href=\"#三、如何配置Fiddler？\" class=\"headerlink\" title=\"三、如何配置Fiddler？\"></a>三、如何配置Fiddler？</h2><h3 id=\"1、打开Fiddler\"><a href=\"#1、打开Fiddler\" class=\"headerlink\" title=\"1、打开Fiddler\"></a>1、打开Fiddler</h3><div class=\"post-note note-info\"><p>安装完成后，打开软件(在安装目录下找到Fiddler.exe文件，双击打开)</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Open.jpg\" alt=\"打开软件\"></p>\n<h3 id=\"2、配置Fiddler\"><a href=\"#2、配置Fiddler\" class=\"headerlink\" title=\"2、配置Fiddler\"></a>2、配置Fiddler</h3><div class=\"post-note note-info\"><p>打开后我们可以看到Fiddler的一个面板，随后打开tools &gt; options 菜单</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler.jpg\" alt=\"Fiddler面板\"></p>\n<div class=\"post-note note-info\"><p>在options菜单中，我们打开https模块，然后勾选Decrypt HTTPS traffic</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Https_traffic.png\" alt=\"勾选traffic\"></p>\n<div class=\"post-note note-info\"><p>随后软件出现以下弹窗，我们选yes</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate.jpg\" alt=\"添加证书\"></p>\n<div class=\"post-note note-info\"><p>在上一步后，系统将提示是否安装证书，我们选是就行了</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_certificate_install.jpg\" alt=\"证书安装\"></p>\n<div class=\"post-note note-info\"><p>接着勾选上Ignore server certificate errors即可，返回主面板然后打开浏览器，现在我们就可以看到左侧面板中有抓到的包数据进来了</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Ignore.jpg\" alt=\"同意证书\"></p>\n<div class=\"post-note note-info\"><p>在左侧面板中，我们可以看到数据包的状态码、host、url等</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_left.jpg\" alt=\"左侧面板\"></p>\n<div class=\"post-note note-info\"><p>在左侧面板中选中一个数据包，则可在右侧面板中查看到该请求的请求头以及具体返回值相关信息</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Right.jpg\" alt=\"右侧面板\"></p>\n<h4 id=\"2-1、配置手机抓包\"><a href=\"#2-1、配置手机抓包\" class=\"headerlink\" title=\"2.1、配置手机抓包\"></a>2.1、配置手机抓包</h4><div class=\"post-note note-info\"><p>Fiddler中打开tools &gt; options &gt; connection 设置端口，并允许远程连接</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Port.jpg\" alt=\"修改端口，允许远程连接\"></p>\n<div class=\"post-note note-info\"><p>首先我们需要在Fiddler右上角获取当前ip地址，手机连接wifi必须与电脑连接的网络处于同一网段</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_IP.jpg\" alt=\"查看ip地址\"></p>\n<div class=\"post-note note-info\"><p><font color=\"red\">Android:</font><br>打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Android_Proxy.png\" alt=\"Android设置代理\"></p>\n<div class=\"post-note note-info\"><p><font color=\"red\">iOS:</font><br>打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_iOS_Proxy.png\" alt=\"iOS设置代理\"></p>\n<div class=\"post-note note-info\"><p>然后打开手机自带的浏览器，输入下面地址，然后点击<font color=\"red\"> FiddlerRoot certificate </font>下载证书</p></div>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">IP地址:端口号 &#x2F;&#x2F;注意冒号用英文冒号<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-info\"><p><font color=\"red\">Android </font>下载完成后，在下载中找到文件点击根据提示进行安装，至到系统提示安装完成<br><font color=\"red\">iOS </font>需注意下载完成之后，打开设置 &gt; 通用 &gt; 描述文件 进行安装，安装完成之后进入关于本机 &gt; 证书信任中将<font color=\"Green\"> DO_NOT_TRUST_FidderRoot </font>打开</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Certificate_Phone.png\" alt=\"浏览器下载证书\"></p>\n<div class=\"post-note note-success\"><p>以上配置完成了之后就可以愉快的抓包啦~</p></div>\n<h2 id=\"四、如何使用Fiddler\"><a href=\"#四、如何使用Fiddler\" class=\"headerlink\" title=\"四、如何使用Fiddler\"></a>四、如何使用Fiddler</h2><h4 id=\"1、过滤器\"><a href=\"#1、过滤器\" class=\"headerlink\" title=\"1、过滤器\"></a>1、过滤器</h4><div class=\"post-note note-info\"><p>在右侧面板中，打开 Filters ，勾选 use Filters ，然后与下图相同配置，在输入框中输入想要过滤出来的域名，如:baidu.com 多个域名之间使用英文分号隔开，设置完成后点击右侧Action中 Run Filterset Now 立即执行</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_filter.jpg\" alt=\"过滤器\"></p>\n<h4 id=\"2、断点\"><a href=\"#2、断点\" class=\"headerlink\" title=\"2、断点\"></a>2、断点</h4><div class=\"post-note note-info\"><p>在顶部菜单中选择 Rules &gt; Automatic BreakPoints，在这个菜单项我们可以看到有<font color=\"red\">Before Requests 、 After Requests 、 Disabled </font>三个选项，默认选中Disables。<br><font color=\"red\">Before Requests </font>则为在请求之前拦截，选择了此项后，我们可以在请求之前修改请求头，修改完成后，点击Run to Completion即可发送请求，以达到测试效果<br><font color=\"red\">After Requests </font>则为在请求之后拦截，选择了此项后，我们可以在请求之后修改返回参数，修改完成后，点击Run to Completion即可发送请求，以达到测试效果</p></div>\n<p><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_Before.jpg\" alt=\"修改请求头\"><br><img src=\"/2021/08/30/Fiddler-Proxy/Fiddler_After.jpg\" alt=\"修改返回参数\"></p>\n<h4 id=\"3、弱网设置\"><a href=\"#3、弱网设置\" class=\"headerlink\" title=\"3、弱网设置\"></a>3、弱网设置</h4><div class=\"post-note note-info\"><p>在右侧面板中，打开 FiddlerScript，找到以下脚本进行更改。<br><font color=\"red\"> request-trickle-delay </font>中的值代表每KB的数据被上传时会被延时多少毫秒；<br><font color=\"red\"> response-trickle-delay </font>则对应下载时每KB的数据会被延时多少毫秒</p></div>\n<pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m_SimulateModem<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// Delay sends by 300ms per KB uploaded.</span>\n    oSession<span class=\"token punctuation\">[</span><span class=\"token string\">\"request-trickle-delay\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"300\"</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// Delay receives by 150ms per KB downloaded.</span>\n    oSession<span class=\"token punctuation\">[</span><span class=\"token string\">\"response-trickle-delay\"</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"150\"</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"五、小节\"><a href=\"#五、小节\" class=\"headerlink\" title=\"五、小节\"></a>五、小节</h3><div class=\"post-note note-success\"><p>如果上述操作没有抓到包，建议尝试手动导入导出证书后再试。最后附上官方文档，如有其它功能需求可以<a href=\"https://docs.telerik.com/fiddler/configure-fiddler/tasks/configurefiddler\">查看官方文档~</a></p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Hexo博客新建文章","date":"2021-08-11T01:55:21.000Z","_content":"## 创建新文章\n### 一、新文章创建命令\n``` bash\nhexo new <模板名称> <文件名称>\n```\n### 二、模板名称简介\n| 模板名称     | 作用   | 路径             |\n| ---------- | ------ | ---------------- |\n| post     | 新建文章      | /source/_posts/ |\n| draft     | 新建草稿          | /source/_drafts/           |\n| page   | 新建页面(如标签、分类)      | /source/ |\n\n{% note warning %}\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n{% endnote %}\n\n## 编辑新文章内容（基于 Markdown）\n### 一、编辑头部信息\n打开刚刚创建的.md文件，我们可以看到被两个\"---\"包围的区域，在此区域中可填写以下参数\n\n|参数名称|作用|\n|----------|------|\n| title     | 网站标题      |\n| tags     | \t文章标签，支持多个。(如：[博客,前端])          |\n| categories   | 文章分类(如：前端)      |\n\n### 二、基本语法\n#### 1.什么是Markdown？\n{% note info %}\nMarkdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n{% endnote %}\n#### 2.Markdown基本语法\n##### 1.标题。一共支持六级\n``` bash\n# //一级标题\n## //二级标题\n### //三级标题\n#### //四级标题\n##### //五级标题\n###### //六级标题\n```\n##### 2.字体\n``` bash\n*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来\n```\n##### 3.引用\n在引用的文字前加上\">\"即可\n``` bash\n> 这是引用的内容\n>> 这是引用的内容\n>>> 这是引用的内容\n```\n##### 4.分割线\n三个或者三个以上的 - 或者 * 都可以。\n``` bash\n---\n----\n***\n*****\n```\n##### 5.图片\n如果要在本地上传图片，那首先得安装图片插件\n``` bash\nnpm install hexo-asset-image --save\n```\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\n``` bash\nhexo new post article\n```\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n``` bash\n![这是一张图片](article/img.png) //![图片描述](图片路径) \n```\n{% note warning %}\n提示：注意文件夹名称必须与文件名称一致\n{% endnote %}\n\n##### 6.表格\n``` bash\n|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n```\n##### 7.超链接\n``` bash\n[打开百度](http://www.baidu.com, \"这是百度链接\") //[链接文字](链接地址 \"链接描述\")\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Hexo_Article.md","raw":"---\ntitle: Hexo博客新建文章\ndate: 2021-08-11 09:55:21\ntags: [Hexo, 博客]\ncategories: WEB前端\n---\n## 创建新文章\n### 一、新文章创建命令\n``` bash\nhexo new <模板名称> <文件名称>\n```\n### 二、模板名称简介\n| 模板名称     | 作用   | 路径             |\n| ---------- | ------ | ---------------- |\n| post     | 新建文章      | /source/_posts/ |\n| draft     | 新建草稿          | /source/_drafts/           |\n| page   | 新建页面(如标签、分类)      | /source/ |\n\n{% note warning %}\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n{% endnote %}\n\n## 编辑新文章内容（基于 Markdown）\n### 一、编辑头部信息\n打开刚刚创建的.md文件，我们可以看到被两个\"---\"包围的区域，在此区域中可填写以下参数\n\n|参数名称|作用|\n|----------|------|\n| title     | 网站标题      |\n| tags     | \t文章标签，支持多个。(如：[博客,前端])          |\n| categories   | 文章分类(如：前端)      |\n\n### 二、基本语法\n#### 1.什么是Markdown？\n{% note info %}\nMarkdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n{% endnote %}\n#### 2.Markdown基本语法\n##### 1.标题。一共支持六级\n``` bash\n# //一级标题\n## //二级标题\n### //三级标题\n#### //四级标题\n##### //五级标题\n###### //六级标题\n```\n##### 2.字体\n``` bash\n*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来\n```\n##### 3.引用\n在引用的文字前加上\">\"即可\n``` bash\n> 这是引用的内容\n>> 这是引用的内容\n>>> 这是引用的内容\n```\n##### 4.分割线\n三个或者三个以上的 - 或者 * 都可以。\n``` bash\n---\n----\n***\n*****\n```\n##### 5.图片\n如果要在本地上传图片，那首先得安装图片插件\n``` bash\nnpm install hexo-asset-image --save\n```\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\n``` bash\nhexo new post article\n```\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n``` bash\n![这是一张图片](article/img.png) //![图片描述](图片路径) \n```\n{% note warning %}\n提示：注意文件夹名称必须与文件名称一致\n{% endnote %}\n\n##### 6.表格\n``` bash\n|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n```\n##### 7.超链接\n``` bash\n[打开百度](http://www.baidu.com, \"这是百度链接\") //[链接文字](链接地址 \"链接描述\")\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Hexo_Article","published":1,"updated":"2021-10-14T08:54:45.529Z","_id":"ckt2jxv3j0002lcu31vbvhlg7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><h3 id=\"一、新文章创建命令\"><a href=\"#一、新文章创建命令\" class=\"headerlink\" title=\"一、新文章创建命令\"></a>一、新文章创建命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token operator\">&lt;</span>模板名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>文件名称<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"二、模板名称简介\"><a href=\"#二、模板名称简介\" class=\"headerlink\" title=\"二、模板名称简介\"></a>二、模板名称简介</h3><table>\n<thead>\n<tr>\n<th>模板名称</th>\n<th>作用</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面(如标签、分类)</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<div class=\"post-note note-warning\"><p>提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称</p></div>\n\n<h2 id=\"编辑新文章内容（基于-Markdown）\"><a href=\"#编辑新文章内容（基于-Markdown）\" class=\"headerlink\" title=\"编辑新文章内容（基于 Markdown）\"></a>编辑新文章内容（基于 Markdown）</h2><h3 id=\"一、编辑头部信息\"><a href=\"#一、编辑头部信息\" class=\"headerlink\" title=\"一、编辑头部信息\"></a>一、编辑头部信息</h3><p>打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>文章标签，支持多个。(如：[博客,前端])</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文章分类(如：前端)</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1-什么是Markdown？\"><a href=\"#1-什么是Markdown？\" class=\"headerlink\" title=\"1.什么是Markdown？\"></a>1.什么是Markdown？</h4><div class=\"post-note note-info\"><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。</p></div>\n<h4 id=\"2-Markdown基本语法\"><a href=\"#2-Markdown基本语法\" class=\"headerlink\" title=\"2.Markdown基本语法\"></a>2.Markdown基本语法</h4><h5 id=\"1-标题。一共支持六级\"><a href=\"#1-标题。一共支持六级\" class=\"headerlink\" title=\"1.标题。一共支持六级\"></a>1.标题。一共支持六级</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># //一级标题</span>\n<span class=\"token comment\">## //二级标题</span>\n<span class=\"token comment\">### //三级标题</span>\n<span class=\"token comment\">#### //四级标题</span>\n<span class=\"token comment\">##### //五级标题</span>\n<span class=\"token comment\">###### //六级标题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2.字体\"></a>2.字体</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3.引用\"></a>3.引用</h5><p>在引用的文字前加上”&gt;”即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> 这是引用的内容\n<span class=\"token operator\">>></span> 这是引用的内容\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 这是引用的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-分割线\"><a href=\"#4-分割线\" class=\"headerlink\" title=\"4.分割线\"></a>4.分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---\n----\n***\n*****<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"5-图片\"><a href=\"#5-图片\" class=\"headerlink\" title=\"5.图片\"></a>5.图片</h5><p>如果要在本地上传图片，那首先得安装图片插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-asset-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new post article<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>这是一张图片<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>article/img.png<span class=\"token punctuation\">)</span> //<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>图片描述<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>图片路径<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-warning\"><p>提示：注意文件夹名称必须与文件名称一致</p></div>\n\n<h5 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">|</span>标题<span class=\"token operator\">|</span>标题<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---<span class=\"token operator\">|</span>---<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"7-超链接\"><a href=\"#7-超链接\" class=\"headerlink\" title=\"7.超链接\"></a>7.超链接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>打开百度<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://www.baidu.com, <span class=\"token string\">\"这是百度链接\"</span><span class=\"token punctuation\">)</span> //<span class=\"token punctuation\">[</span>链接文字<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址 <span class=\"token string\">\"链接描述\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><h3 id=\"一、新文章创建命令\"><a href=\"#一、新文章创建命令\" class=\"headerlink\" title=\"一、新文章创建命令\"></a>一、新文章创建命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new <span class=\"token operator\">&lt;</span>模板名称<span class=\"token operator\">></span> <span class=\"token operator\">&lt;</span>文件名称<span class=\"token operator\">></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"二、模板名称简介\"><a href=\"#二、模板名称简介\" class=\"headerlink\" title=\"二、模板名称简介\"></a>二、模板名称简介</h3><table>\n<thead>\n<tr>\n<th>模板名称</th>\n<th>作用</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面(如标签、分类)</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<div class=\"post-note note-warning\"><p>提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称</p></div>\n\n<h2 id=\"编辑新文章内容（基于-Markdown）\"><a href=\"#编辑新文章内容（基于-Markdown）\" class=\"headerlink\" title=\"编辑新文章内容（基于 Markdown）\"></a>编辑新文章内容（基于 Markdown）</h2><h3 id=\"一、编辑头部信息\"><a href=\"#一、编辑头部信息\" class=\"headerlink\" title=\"一、编辑头部信息\"></a>一、编辑头部信息</h3><p>打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>文章标签，支持多个。(如：[博客,前端])</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文章分类(如：前端)</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1-什么是Markdown？\"><a href=\"#1-什么是Markdown？\" class=\"headerlink\" title=\"1.什么是Markdown？\"></a>1.什么是Markdown？</h4><div class=\"post-note note-info\"><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。</p></div>\n<h4 id=\"2-Markdown基本语法\"><a href=\"#2-Markdown基本语法\" class=\"headerlink\" title=\"2.Markdown基本语法\"></a>2.Markdown基本语法</h4><h5 id=\"1-标题。一共支持六级\"><a href=\"#1-标题。一共支持六级\" class=\"headerlink\" title=\"1.标题。一共支持六级\"></a>1.标题。一共支持六级</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># //一级标题</span>\n<span class=\"token comment\">## //二级标题</span>\n<span class=\"token comment\">### //三级标题</span>\n<span class=\"token comment\">#### //四级标题</span>\n<span class=\"token comment\">##### //五级标题</span>\n<span class=\"token comment\">###### //六级标题</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2.字体\"></a>2.字体</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3.引用\"></a>3.引用</h5><p>在引用的文字前加上”&gt;”即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">></span> 这是引用的内容\n<span class=\"token operator\">>></span> 这是引用的内容\n<span class=\"token operator\">>></span><span class=\"token operator\">></span> 这是引用的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-分割线\"><a href=\"#4-分割线\" class=\"headerlink\" title=\"4.分割线\"></a>4.分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---\n----\n***\n*****<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"5-图片\"><a href=\"#5-图片\" class=\"headerlink\" title=\"5.图片\"></a>5.图片</h5><p>如果要在本地上传图片，那首先得安装图片插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-asset-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new post article<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>这是一张图片<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>article/img.png<span class=\"token punctuation\">)</span> //<span class=\"token operator\">!</span><span class=\"token punctuation\">[</span>图片描述<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>图片路径<span class=\"token punctuation\">)</span> <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-warning\"><p>提示：注意文件夹名称必须与文件名称一致</p></div>\n\n<h5 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token operator\">|</span>标题<span class=\"token operator\">|</span>标题<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>---<span class=\"token operator\">|</span>---<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>\n<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span>内容<span class=\"token operator\">|</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"7-超链接\"><a href=\"#7-超链接\" class=\"headerlink\" title=\"7.超链接\"></a>7.超链接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>打开百度<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>http://www.baidu.com, <span class=\"token string\">\"这是百度链接\"</span><span class=\"token punctuation\">)</span> //<span class=\"token punctuation\">[</span>链接文字<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>链接地址 <span class=\"token string\">\"链接描述\"</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Linux中的定时任务(crontab)","date":"2021-08-12T05:49:14.000Z","_content":"## 一、什么是Crontab？\n<font color=red>cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=red>cron</font> 是被默认安装并启动的。\n## 二、为什么我们要使用Crontab？\n在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n## 三、如何使用Crontab？\n### 1. 查看Crontab的工作表\n``` bash\ncrontab -l\n```\n![查看工作表](Linux-Crontab/crontab_sel.png)\n### 2. 编辑Crontab工作表\n``` bash\ncrontab -e\n```\n{% note primary %}\n进入编辑页之后，输入\"a\"进入编辑模式。编辑完成之后，ctrl+c保存，输入\":\"，再输入\"wq\"加回车退出编辑模式。\n{% endnote %}\n### 3. 删除Crontab工作表中的工作\n``` bash\ncrontab -r\n```\n### 4. Crontab的命令构成\n#### 4.1 数字范围\n``` bash \n0-59 0-23 1-31 1-12 0-7 python main.py\n```\n{% note primary %}\n分钟 小时 日期 月份 周 命令\n{% endnote %}\n#### 4.2 特殊字符\n``` bash\n\"*\"代表所有的取值范围内的数字，如月份字段为\"*\"，则表示1到12个月；\n\n\"/\"代表每一定时间间隔的意思，如分钟字段为\"*/10\"，表示每10分钟执行1次。\n\n\"-\"代表从某个区间范围，是闭区间。如\"2-5\"表示\"2,3,4,5\"，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n```\n#### 4.3 日志存储\n{% note primary %}\n构建完上述命令后，可在命令后端加上\">> 文件名.log\"，存储日志\n{% endnote %}\n### 5. 示例\n#### 5.1 每一分钟执行一次\"mian.py\"文件\n``` bash\n* * * * * python main.py\n```\n{% note primary %}\n因为cron默认每一分钟扫描一次，故全部设置为\"*\"即可\n{% endnote %}\n#### 5.2 每小时的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 * * * * python main.py\n```\n#### 5.3 每天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * * python main.py\n```\n#### 5.4 每隔三天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 */3 * * python main.py\n```\n#### 5.5 每周三上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * 3 python main.py\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Linux-Crontab.md","raw":"---\ntitle: Linux中的定时任务(crontab)\ndate: 2021-08-12 13:49:14\ntags: [Linux, 定时任务]\ncategories: 服务器\n---\n## 一、什么是Crontab？\n<font color=red>cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=red>cron</font> 是被默认安装并启动的。\n## 二、为什么我们要使用Crontab？\n在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n## 三、如何使用Crontab？\n### 1. 查看Crontab的工作表\n``` bash\ncrontab -l\n```\n![查看工作表](Linux-Crontab/crontab_sel.png)\n### 2. 编辑Crontab工作表\n``` bash\ncrontab -e\n```\n{% note primary %}\n进入编辑页之后，输入\"a\"进入编辑模式。编辑完成之后，ctrl+c保存，输入\":\"，再输入\"wq\"加回车退出编辑模式。\n{% endnote %}\n### 3. 删除Crontab工作表中的工作\n``` bash\ncrontab -r\n```\n### 4. Crontab的命令构成\n#### 4.1 数字范围\n``` bash \n0-59 0-23 1-31 1-12 0-7 python main.py\n```\n{% note primary %}\n分钟 小时 日期 月份 周 命令\n{% endnote %}\n#### 4.2 特殊字符\n``` bash\n\"*\"代表所有的取值范围内的数字，如月份字段为\"*\"，则表示1到12个月；\n\n\"/\"代表每一定时间间隔的意思，如分钟字段为\"*/10\"，表示每10分钟执行1次。\n\n\"-\"代表从某个区间范围，是闭区间。如\"2-5\"表示\"2,3,4,5\"，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n```\n#### 4.3 日志存储\n{% note primary %}\n构建完上述命令后，可在命令后端加上\">> 文件名.log\"，存储日志\n{% endnote %}\n### 5. 示例\n#### 5.1 每一分钟执行一次\"mian.py\"文件\n``` bash\n* * * * * python main.py\n```\n{% note primary %}\n因为cron默认每一分钟扫描一次，故全部设置为\"*\"即可\n{% endnote %}\n#### 5.2 每小时的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 * * * * python main.py\n```\n#### 5.3 每天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * * python main.py\n```\n#### 5.4 每隔三天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 */3 * * python main.py\n```\n#### 5.5 每周三上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * 3 python main.py\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Linux-Crontab","published":1,"updated":"2021-10-14T08:54:45.534Z","_id":"ckt2jxv3m0005lcu32qu28jzp","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Crontab？\"><a href=\"#一、什么是Crontab？\" class=\"headerlink\" title=\"一、什么是Crontab？\"></a>一、什么是Crontab？</h2><p><font color=\"red\">cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=\"red\">cron</font> 是被默认安装并启动的。</p>\n<h2 id=\"二、为什么我们要使用Crontab？\"><a href=\"#二、为什么我们要使用Crontab？\" class=\"headerlink\" title=\"二、为什么我们要使用Crontab？\"></a>二、为什么我们要使用Crontab？</h2><p>在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。</p>\n<h2 id=\"三、如何使用Crontab？\"><a href=\"#三、如何使用Crontab？\" class=\"headerlink\" title=\"三、如何使用Crontab？\"></a>三、如何使用Crontab？</h2><h3 id=\"1-查看Crontab的工作表\"><a href=\"#1-查看Crontab的工作表\" class=\"headerlink\" title=\"1. 查看Crontab的工作表\"></a>1. 查看Crontab的工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" alt=\"查看工作表\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" class=\"lozad post-image\"></p>\n<h3 id=\"2-编辑Crontab工作表\"><a href=\"#2-编辑Crontab工作表\" class=\"headerlink\" title=\"2. 编辑Crontab工作表\"></a>2. 编辑Crontab工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。</p></div>\n<h3 id=\"3-删除Crontab工作表中的工作\"><a href=\"#3-删除Crontab工作表中的工作\" class=\"headerlink\" title=\"3. 删除Crontab工作表中的工作\"></a>3. 删除Crontab工作表中的工作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-Crontab的命令构成\"><a href=\"#4-Crontab的命令构成\" class=\"headerlink\" title=\"4. Crontab的命令构成\"></a>4. Crontab的命令构成</h3><h4 id=\"4-1-数字范围\"><a href=\"#4-1-数字范围\" class=\"headerlink\" title=\"4.1 数字范围\"></a>4.1 数字范围</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>-59 <span class=\"token number\">0</span>-23 <span class=\"token number\">1</span>-31 <span class=\"token number\">1</span>-12 <span class=\"token number\">0</span>-7 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>分钟 小时 日期 月份 周 命令</p></div>\n<h4 id=\"4-2-特殊字符\"><a href=\"#4-2-特殊字符\" class=\"headerlink\" title=\"4.2 特殊字符\"></a>4.2 特殊字符</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"*\"</span>代表所有的取值范围内的数字，如月份字段为<span class=\"token string\">\"*\"</span>，则表示1到12个月；\n\n<span class=\"token string\">\"/\"</span>代表每一定时间间隔的意思，如分钟字段为<span class=\"token string\">\"*/10\"</span>，表示每10分钟执行1次。\n\n<span class=\"token string\">\"-\"</span>代表从某个区间范围，是闭区间。如<span class=\"token string\">\"2-5\"</span>表示<span class=\"token string\">\"2,3,4,5\"</span>，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n<span class=\"token string\">\",\"</span>分散的数字（不一定连续），如1,2,3,4,7,9。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-3-日志存储\"><a href=\"#4-3-日志存储\" class=\"headerlink\" title=\"4.3 日志存储\"></a>4.3 日志存储</h4><div class=\"post-note note-primary\"><p>构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志</p></div>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><h4 id=\"5-1-每一分钟执行一次”mian-py”文件\"><a href=\"#5-1-每一分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.1 每一分钟执行一次”mian.py”文件\"></a>5.1 每一分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">* * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>因为cron默认每一分钟扫描一次，故全部设置为”*”即可</p></div>\n<h4 id=\"5-2-每小时的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-2-每小时的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.2 每小时的5和30分钟执行一次”mian.py”文件\"></a>5.2 每小时的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 */3 * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 * * <span class=\"token number\">3</span> python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Crontab？\"><a href=\"#一、什么是Crontab？\" class=\"headerlink\" title=\"一、什么是Crontab？\"></a>一、什么是Crontab？</h2><p><font color=\"red\">cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=\"red\">cron</font> 是被默认安装并启动的。</p>\n<h2 id=\"二、为什么我们要使用Crontab？\"><a href=\"#二、为什么我们要使用Crontab？\" class=\"headerlink\" title=\"二、为什么我们要使用Crontab？\"></a>二、为什么我们要使用Crontab？</h2><p>在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。</p>\n<h2 id=\"三、如何使用Crontab？\"><a href=\"#三、如何使用Crontab？\" class=\"headerlink\" title=\"三、如何使用Crontab？\"></a>三、如何使用Crontab？</h2><h3 id=\"1-查看Crontab的工作表\"><a href=\"#1-查看Crontab的工作表\" class=\"headerlink\" title=\"1. 查看Crontab的工作表\"></a>1. 查看Crontab的工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" alt=\"查看工作表\"></p>\n<h3 id=\"2-编辑Crontab工作表\"><a href=\"#2-编辑Crontab工作表\" class=\"headerlink\" title=\"2. 编辑Crontab工作表\"></a>2. 编辑Crontab工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。</p></div>\n<h3 id=\"3-删除Crontab工作表中的工作\"><a href=\"#3-删除Crontab工作表中的工作\" class=\"headerlink\" title=\"3. 删除Crontab工作表中的工作\"></a>3. 删除Crontab工作表中的工作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">crontab</span> -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-Crontab的命令构成\"><a href=\"#4-Crontab的命令构成\" class=\"headerlink\" title=\"4. Crontab的命令构成\"></a>4. Crontab的命令构成</h3><h4 id=\"4-1-数字范围\"><a href=\"#4-1-数字范围\" class=\"headerlink\" title=\"4.1 数字范围\"></a>4.1 数字范围</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">0</span>-59 <span class=\"token number\">0</span>-23 <span class=\"token number\">1</span>-31 <span class=\"token number\">1</span>-12 <span class=\"token number\">0</span>-7 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>分钟 小时 日期 月份 周 命令</p></div>\n<h4 id=\"4-2-特殊字符\"><a href=\"#4-2-特殊字符\" class=\"headerlink\" title=\"4.2 特殊字符\"></a>4.2 特殊字符</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token string\">\"*\"</span>代表所有的取值范围内的数字，如月份字段为<span class=\"token string\">\"*\"</span>，则表示1到12个月；\n\n<span class=\"token string\">\"/\"</span>代表每一定时间间隔的意思，如分钟字段为<span class=\"token string\">\"*/10\"</span>，表示每10分钟执行1次。\n\n<span class=\"token string\">\"-\"</span>代表从某个区间范围，是闭区间。如<span class=\"token string\">\"2-5\"</span>表示<span class=\"token string\">\"2,3,4,5\"</span>，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n<span class=\"token string\">\",\"</span>分散的数字（不一定连续），如1,2,3,4,7,9。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-3-日志存储\"><a href=\"#4-3-日志存储\" class=\"headerlink\" title=\"4.3 日志存储\"></a>4.3 日志存储</h4><div class=\"post-note note-primary\"><p>构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志</p></div>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><h4 id=\"5-1-每一分钟执行一次”mian-py”文件\"><a href=\"#5-1-每一分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.1 每一分钟执行一次”mian.py”文件\"></a>5.1 每一分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">* * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>因为cron默认每一分钟扫描一次，故全部设置为”*”即可</p></div>\n<h4 id=\"5-2-每小时的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-2-每小时的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.2 每小时的5和30分钟执行一次”mian.py”文件\"></a>5.2 每小时的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 */3 * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">15,30</span> <span class=\"token number\">8</span>-9 * * <span class=\"token number\">3</span> python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python+Selenium 调起浏览器","date":"2021-08-13T05:56:37.000Z","_content":"## 一、什么是Selenium？\n<font color=red>Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n## 二、安装Selenium\n### 1. 下载python的selenium安装包\n``` bash\npip install selenium\n```\n### 2. Windows下下载与浏览器版本相对应的webdriver\nchrom浏览器的web driver\n``` bash\nhttp://npm.taobao.org/mirrors/chromedriver/\n```\nfirefox（火狐浏览器）的web driver\n``` bash\nhttps://github.com/mozilla/geckodriver/releases\n```\nSafari的web driver\n``` bash\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\n```\n{% note primary %}\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n{% endnote %}\n## 三、示例\n### 1. 引入Selenium包，并调起浏览器\n{% note info %}\n首先，引入需要用到的selenium包中的webdriver模块\n{% endnote %}\n``` python\nfrom selenium import webdriver\n```\n{% note info %}\n使用webdriver模块中的方法，调起对应的浏览器\n{% endnote %}\n```python\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 调起火狐浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Firefox()\n```\n### 2. 在浏览器中打开百度\n{% note info %}\n使用刚刚创建的driver对象，调用get方法，get方法中需要传入一个url参数，运行下列代码，我们就可以看到浏览器打开百度啦\n{% endnote %}\n```python\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如webdriver.exe不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 定义一个url后使用get方法\nurl = 'https://www.baidu.com'\ndriver.get(url)\n# 在操作完成后，需要调用quit()方法关闭浏览器\ndriver.quit()\n```\n### 3. 在百度中搜索selenium\n{% note info %}\n经过上述操作，我们已经可以打开百度了，那接下来我们就给百度输入一个selenium的关键词进行搜索\n{% endnote %}\n#### 3.1 selenium定位元素的几种方法\n```python\n# 以下方法均有复数形式，则返回一个列表。方法名称则将element加上s即可\n# 通过ID进行匹配查找\ndriver.find_element_by_id()\n# 通过name进行匹配查找\ndriver.find_element_by_name()\n# 通过xpath进行匹配查找\ndriver.find_element_by_xpath()\n# 通过链接内容进行匹配查找\ndriver.find_element_by_link_text()\n# 通过部分链接内容进行匹配查找\ndriver.find_element_by_partical_link_text()\n# 通过标签名称进行匹配查找\ndriver.find_element_by_tag_name()\n# 通过class名称进行匹配查找\ndriver.find_element_by_class_name()\n# 通过CSS选择器进行匹配查找\ndriver.find_element_by_css_selector()\n```\n#### 3.2 使用以上方法定位百度输入框\n{% note info %}\n打开百度，选中输入框，可以看到输入框有id也有name，那么在查找元素的时候就可以根据id或name来定位\n{% endnote %}\n```python\n# 将定位到的输入框对象赋值给word_input变量\nword_input = driver.find_element_by_id('kw')\n```\n![查找元素](Python-Selenium/Find_element_baidu.jpg)\n#### 3.3 将关键词输入\n{% note info %}\n为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\n{% endnote %}\n```python\n# 定义需要输入的关键词变量\nkey_word = 'selenium'\n# 为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\nword_input.clean()\n# 清空完成后将关键词输入\nword_input.send_keys(key_word)\n```\n#### 3.3 搜索\n{% note info %}\n输入完内容后，利用上述方法找到按钮对象，即可使用click()方法点击\"百度一下\"，运行脚本即可实现想要的结果\n{% endnote %}\n```python\nsearch = driver.find_element_by_id('s_kw_wrap')\nsearch.click()\n```\n{% note success %}\n以上就完成了简单的python调起浏览器操作~如果其他问题欢迎联系交流，或者参考[中文官方文档](https://python-selenium-zh.readthedocs.io/zh_CN/latest/)\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Python-Selenium.md","raw":"---\ntitle: Python+Selenium 调起浏览器\ndate: 2021-08-13 13:56:37\ntags: [python, selenium, 自动化测试]\ncategories: 测试相关\n---\n## 一、什么是Selenium？\n<font color=red>Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n## 二、安装Selenium\n### 1. 下载python的selenium安装包\n``` bash\npip install selenium\n```\n### 2. Windows下下载与浏览器版本相对应的webdriver\nchrom浏览器的web driver\n``` bash\nhttp://npm.taobao.org/mirrors/chromedriver/\n```\nfirefox（火狐浏览器）的web driver\n``` bash\nhttps://github.com/mozilla/geckodriver/releases\n```\nSafari的web driver\n``` bash\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\n```\n{% note primary %}\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n{% endnote %}\n## 三、示例\n### 1. 引入Selenium包，并调起浏览器\n{% note info %}\n首先，引入需要用到的selenium包中的webdriver模块\n{% endnote %}\n``` python\nfrom selenium import webdriver\n```\n{% note info %}\n使用webdriver模块中的方法，调起对应的浏览器\n{% endnote %}\n```python\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 调起火狐浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Firefox()\n```\n### 2. 在浏览器中打开百度\n{% note info %}\n使用刚刚创建的driver对象，调用get方法，get方法中需要传入一个url参数，运行下列代码，我们就可以看到浏览器打开百度啦\n{% endnote %}\n```python\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如webdriver.exe不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 定义一个url后使用get方法\nurl = 'https://www.baidu.com'\ndriver.get(url)\n# 在操作完成后，需要调用quit()方法关闭浏览器\ndriver.quit()\n```\n### 3. 在百度中搜索selenium\n{% note info %}\n经过上述操作，我们已经可以打开百度了，那接下来我们就给百度输入一个selenium的关键词进行搜索\n{% endnote %}\n#### 3.1 selenium定位元素的几种方法\n```python\n# 以下方法均有复数形式，则返回一个列表。方法名称则将element加上s即可\n# 通过ID进行匹配查找\ndriver.find_element_by_id()\n# 通过name进行匹配查找\ndriver.find_element_by_name()\n# 通过xpath进行匹配查找\ndriver.find_element_by_xpath()\n# 通过链接内容进行匹配查找\ndriver.find_element_by_link_text()\n# 通过部分链接内容进行匹配查找\ndriver.find_element_by_partical_link_text()\n# 通过标签名称进行匹配查找\ndriver.find_element_by_tag_name()\n# 通过class名称进行匹配查找\ndriver.find_element_by_class_name()\n# 通过CSS选择器进行匹配查找\ndriver.find_element_by_css_selector()\n```\n#### 3.2 使用以上方法定位百度输入框\n{% note info %}\n打开百度，选中输入框，可以看到输入框有id也有name，那么在查找元素的时候就可以根据id或name来定位\n{% endnote %}\n```python\n# 将定位到的输入框对象赋值给word_input变量\nword_input = driver.find_element_by_id('kw')\n```\n![查找元素](Python-Selenium/Find_element_baidu.jpg)\n#### 3.3 将关键词输入\n{% note info %}\n为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\n{% endnote %}\n```python\n# 定义需要输入的关键词变量\nkey_word = 'selenium'\n# 为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\nword_input.clean()\n# 清空完成后将关键词输入\nword_input.send_keys(key_word)\n```\n#### 3.3 搜索\n{% note info %}\n输入完内容后，利用上述方法找到按钮对象，即可使用click()方法点击\"百度一下\"，运行脚本即可实现想要的结果\n{% endnote %}\n```python\nsearch = driver.find_element_by_id('s_kw_wrap')\nsearch.click()\n```\n{% note success %}\n以上就完成了简单的python调起浏览器操作~如果其他问题欢迎联系交流，或者参考[中文官方文档](https://python-selenium-zh.readthedocs.io/zh_CN/latest/)\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Python-Selenium","published":1,"updated":"2021-10-14T08:54:45.488Z","_id":"ckt2jxv3q0006lcu30iw09lot","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Selenium？\"><a href=\"#一、什么是Selenium？\" class=\"headerlink\" title=\"一、什么是Selenium？\"></a>一、什么是Selenium？</h2><p><font color=\"red\">Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>\n<h2 id=\"二、安装Selenium\"><a href=\"#二、安装Selenium\" class=\"headerlink\" title=\"二、安装Selenium\"></a>二、安装Selenium</h2><h3 id=\"1-下载python的selenium安装包\"><a href=\"#1-下载python的selenium安装包\" class=\"headerlink\" title=\"1. 下载python的selenium安装包\"></a>1. 下载python的selenium安装包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-Windows下下载与浏览器版本相对应的webdriver\"><a href=\"#2-Windows下下载与浏览器版本相对应的webdriver\" class=\"headerlink\" title=\"2. Windows下下载与浏览器版本相对应的webdriver\"></a>2. Windows下下载与浏览器版本相对应的webdriver</h3><p>chrom浏览器的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http://npm.taobao.org/mirrors/chromedriver/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>firefox（火狐浏览器）的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://github.com/mozilla/geckodriver/releases<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Safari的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://webkit.org/blog/6900/webdriver-support-in-safari-10/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>下载完成后，将解压出来的exe文件与py文件放置同一个目录下。</p></div>\n<h2 id=\"三、示例\"><a href=\"#三、示例\" class=\"headerlink\" title=\"三、示例\"></a>三、示例</h2><h3 id=\"1-引入Selenium包，并调起浏览器\"><a href=\"#1-引入Selenium包，并调起浏览器\" class=\"headerlink\" title=\"1. 引入Selenium包，并调起浏览器\"></a>1. 引入Selenium包，并调起浏览器</h3><div class=\"post-note note-info\"><p>首先，引入需要用到的selenium包中的webdriver模块</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-info\"><p>使用webdriver模块中的方法，调起对应的浏览器</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n<span class=\"token comment\"># 调起谷歌浏览器，如对应驱动不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 调起火狐浏览器，如对应驱动不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Firefox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-在浏览器中打开百度\"><a href=\"#2-在浏览器中打开百度\" class=\"headerlink\" title=\"2. 在浏览器中打开百度\"></a>2. 在浏览器中打开百度</h3><div class=\"post-note note-info\"><p>使用刚刚创建的driver对象，调用get方法，get方法中需要传入一个url参数，运行下列代码，我们就可以看到浏览器打开百度啦</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n<span class=\"token comment\"># 调起谷歌浏览器，如webdriver.exe不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 定义一个url后使用get方法</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.baidu.com'</span>\ndriver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在操作完成后，需要调用quit()方法关闭浏览器</span>\ndriver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-在百度中搜索selenium\"><a href=\"#3-在百度中搜索selenium\" class=\"headerlink\" title=\"3. 在百度中搜索selenium\"></a>3. 在百度中搜索selenium</h3><div class=\"post-note note-info\"><p>经过上述操作，我们已经可以打开百度了，那接下来我们就给百度输入一个selenium的关键词进行搜索</p></div>\n<h4 id=\"3-1-selenium定位元素的几种方法\"><a href=\"#3-1-selenium定位元素的几种方法\" class=\"headerlink\" title=\"3.1 selenium定位元素的几种方法\"></a>3.1 selenium定位元素的几种方法</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 以下方法均有复数形式，则返回一个列表。方法名称则将element加上s即可</span>\n<span class=\"token comment\"># 通过ID进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过name进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过xpath进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过链接内容进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_link_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过部分链接内容进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_partical_link_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过标签名称进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_tag_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过class名称进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_class_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过CSS选择器进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_css_selector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2-使用以上方法定位百度输入框\"><a href=\"#3-2-使用以上方法定位百度输入框\" class=\"headerlink\" title=\"3.2 使用以上方法定位百度输入框\"></a>3.2 使用以上方法定位百度输入框</h4><div class=\"post-note note-info\"><p>打开百度，选中输入框，可以看到输入框有id也有name，那么在查找元素的时候就可以根据id或name来定位</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 将定位到的输入框对象赋值给word_input变量</span>\nword_input <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'kw'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/13/Python-Selenium/Find_element_baidu.jpg\" alt=\"查找元素\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/13/Python-Selenium/Find_element_baidu.jpg\" class=\"lozad post-image\"></p>\n<h4 id=\"3-3-将关键词输入\"><a href=\"#3-3-将关键词输入\" class=\"headerlink\" title=\"3.3 将关键词输入\"></a>3.3 将关键词输入</h4><div class=\"post-note note-info\"><p>为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 定义需要输入的关键词变量</span>\nkey_word <span class=\"token operator\">=</span> <span class=\"token string\">'selenium'</span>\n<span class=\"token comment\"># 为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框</span>\nword_input<span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 清空完成后将关键词输入</span>\nword_input<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>key_word<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3-搜索\"><a href=\"#3-3-搜索\" class=\"headerlink\" title=\"3.3 搜索\"></a>3.3 搜索</h4><div class=\"post-note note-info\"><p>输入完内容后，利用上述方法找到按钮对象，即可使用click()方法点击”百度一下”，运行脚本即可实现想要的结果</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">search <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'s_kw_wrap'</span><span class=\"token punctuation\">)</span>\nsearch<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>以上就完成了简单的python调起浏览器操作~如果其他问题欢迎联系交流，或者参考<a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\">中文官方文档</a></p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Selenium？\"><a href=\"#一、什么是Selenium？\" class=\"headerlink\" title=\"一、什么是Selenium？\"></a>一、什么是Selenium？</h2><p><font color=\"red\">Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>\n<h2 id=\"二、安装Selenium\"><a href=\"#二、安装Selenium\" class=\"headerlink\" title=\"二、安装Selenium\"></a>二、安装Selenium</h2><h3 id=\"1-下载python的selenium安装包\"><a href=\"#1-下载python的selenium安装包\" class=\"headerlink\" title=\"1. 下载python的selenium安装包\"></a>1. 下载python的selenium安装包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-Windows下下载与浏览器版本相对应的webdriver\"><a href=\"#2-Windows下下载与浏览器版本相对应的webdriver\" class=\"headerlink\" title=\"2. Windows下下载与浏览器版本相对应的webdriver\"></a>2. Windows下下载与浏览器版本相对应的webdriver</h3><p>chrom浏览器的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http://npm.taobao.org/mirrors/chromedriver/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>firefox（火狐浏览器）的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://github.com/mozilla/geckodriver/releases<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Safari的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https://webkit.org/blog/6900/webdriver-support-in-safari-10/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>下载完成后，将解压出来的exe文件与py文件放置同一个目录下。</p></div>\n<h2 id=\"三、示例\"><a href=\"#三、示例\" class=\"headerlink\" title=\"三、示例\"></a>三、示例</h2><h3 id=\"1-引入Selenium包，并调起浏览器\"><a href=\"#1-引入Selenium包，并调起浏览器\" class=\"headerlink\" title=\"1. 引入Selenium包，并调起浏览器\"></a>1. 引入Selenium包，并调起浏览器</h3><div class=\"post-note note-info\"><p>首先，引入需要用到的selenium包中的webdriver模块</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-info\"><p>使用webdriver模块中的方法，调起对应的浏览器</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n<span class=\"token comment\"># 调起谷歌浏览器，如对应驱动不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 调起火狐浏览器，如对应驱动不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Firefox<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"2-在浏览器中打开百度\"><a href=\"#2-在浏览器中打开百度\" class=\"headerlink\" title=\"2. 在浏览器中打开百度\"></a>2. 在浏览器中打开百度</h3><div class=\"post-note note-info\"><p>使用刚刚创建的driver对象，调用get方法，get方法中需要传入一个url参数，运行下列代码，我们就可以看到浏览器打开百度啦</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> selenium <span class=\"token keyword\">import</span> webdriver\n\n<span class=\"token comment\"># 调起谷歌浏览器，如webdriver.exe不在统一目录下，在括号中加入路径</span>\ndriver <span class=\"token operator\">=</span> webdriver<span class=\"token punctuation\">.</span>Chrome<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 定义一个url后使用get方法</span>\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'https://www.baidu.com'</span>\ndriver<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 在操作完成后，需要调用quit()方法关闭浏览器</span>\ndriver<span class=\"token punctuation\">.</span>quit<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"3-在百度中搜索selenium\"><a href=\"#3-在百度中搜索selenium\" class=\"headerlink\" title=\"3. 在百度中搜索selenium\"></a>3. 在百度中搜索selenium</h3><div class=\"post-note note-info\"><p>经过上述操作，我们已经可以打开百度了，那接下来我们就给百度输入一个selenium的关键词进行搜索</p></div>\n<h4 id=\"3-1-selenium定位元素的几种方法\"><a href=\"#3-1-selenium定位元素的几种方法\" class=\"headerlink\" title=\"3.1 selenium定位元素的几种方法\"></a>3.1 selenium定位元素的几种方法</h4><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 以下方法均有复数形式，则返回一个列表。方法名称则将element加上s即可</span>\n<span class=\"token comment\"># 通过ID进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过name进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过xpath进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_xpath<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过链接内容进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_link_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过部分链接内容进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_partical_link_text<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过标签名称进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_tag_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过class名称进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_class_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 通过CSS选择器进行匹配查找</span>\ndriver<span class=\"token punctuation\">.</span>find_element_by_css_selector<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-2-使用以上方法定位百度输入框\"><a href=\"#3-2-使用以上方法定位百度输入框\" class=\"headerlink\" title=\"3.2 使用以上方法定位百度输入框\"></a>3.2 使用以上方法定位百度输入框</h4><div class=\"post-note note-info\"><p>打开百度，选中输入框，可以看到输入框有id也有name，那么在查找元素的时候就可以根据id或name来定位</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 将定位到的输入框对象赋值给word_input变量</span>\nword_input <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'kw'</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/13/Python-Selenium/Find_element_baidu.jpg\" alt=\"查找元素\"></p>\n<h4 id=\"3-3-将关键词输入\"><a href=\"#3-3-将关键词输入\" class=\"headerlink\" title=\"3.3 将关键词输入\"></a>3.3 将关键词输入</h4><div class=\"post-note note-info\"><p>为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># 定义需要输入的关键词变量</span>\nkey_word <span class=\"token operator\">=</span> <span class=\"token string\">'selenium'</span>\n<span class=\"token comment\"># 为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框</span>\nword_input<span class=\"token punctuation\">.</span>clean<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\"># 清空完成后将关键词输入</span>\nword_input<span class=\"token punctuation\">.</span>send_keys<span class=\"token punctuation\">(</span>key_word<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"3-3-搜索\"><a href=\"#3-3-搜索\" class=\"headerlink\" title=\"3.3 搜索\"></a>3.3 搜索</h4><div class=\"post-note note-info\"><p>输入完内容后，利用上述方法找到按钮对象，即可使用click()方法点击”百度一下”，运行脚本即可实现想要的结果</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">search <span class=\"token operator\">=</span> driver<span class=\"token punctuation\">.</span>find_element_by_id<span class=\"token punctuation\">(</span><span class=\"token string\">'s_kw_wrap'</span><span class=\"token punctuation\">)</span>\nsearch<span class=\"token punctuation\">.</span>click<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>以上就完成了简单的python调起浏览器操作~如果其他问题欢迎联系交流，或者参考<a href=\"https://python-selenium-zh.readthedocs.io/zh_CN/latest/\">中文官方文档</a></p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Screen的使用方法","date":"2021-08-06T08:36:27.000Z","_content":"## 为什么要使用screen命令\nVPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n## 一、screen命令是什么？\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n## 二、如何安装screen命令？\n除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\n``` bash\nyum install screen\n``` \nCentOS 8上移除了screen，需要安装epel后安装screen执行：\n``` bash\nyum install screen\n``` \nDebian/Ubuntu系统执行：\n``` bash\napt-get install screen\n``` \n## 三、screen命令使用方法？\n### 1、常用的使用方法\n用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n#### 1.1 创建screen会话\nscreen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\n``` bash\nscreen -S lnmp\n```\n#### 1.2 暂时离开，保留screen会话中的任务或程序\n\n当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n\n#### 1.3 恢复screen会话\n\n恢复到离开前创建的lnmp会话的工作界面,执行：\n``` bash\naaaq lnmp \n```\n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\n``` bash\nscreen -ls screen\n```\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\n``` bash\nscreen -r lnmp\n```\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\n``` bash\nscreen -r 11791\n```\n\n#### 1.4 关闭screen的会话\n\n执行：\n``` bash\nexit\n```\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n#### 1.5 删除会话\n``` bash\nscreen -S session_name -X quit\n```\nor\n``` bash\nscreen -X -S 122128 quit\n```\n### 2、远程演示\n首先演示者先在服务器上执行:\n``` bash\nscreen -S test\n```\n创建一个screen会话，观众可以链接到远程服务器上执行:\n``` bash\nscreen -x test\n```\n观众屏幕上就会出现和演示者同步。\n\n### 3、常用快捷键\n\n#### 3.1 在当前screen会话中创建窗口\nCtrl+a c\n\n#### 3.2 窗口列表\nCtrl+a w\n\n#### 3.3 下一个窗口\nCtrl+a n\n\n#### 3.4 上一个窗口\nCtrl+a p\n\n#### 3.5 在第0个窗口和第9个窗口之间切换\nCtrl+a 0-9\nCtrl+a 0-9\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Server_Screen.md","raw":"---\ntitle: Screen的使用方法\ndate: 2021-08-06 16:36:27\ntags: [Linux, 部署]\ncategories: 服务器\n---\n## 为什么要使用screen命令\nVPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n## 一、screen命令是什么？\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n## 二、如何安装screen命令？\n除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\n``` bash\nyum install screen\n``` \nCentOS 8上移除了screen，需要安装epel后安装screen执行：\n``` bash\nyum install screen\n``` \nDebian/Ubuntu系统执行：\n``` bash\napt-get install screen\n``` \n## 三、screen命令使用方法？\n### 1、常用的使用方法\n用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n#### 1.1 创建screen会话\nscreen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\n``` bash\nscreen -S lnmp\n```\n#### 1.2 暂时离开，保留screen会话中的任务或程序\n\n当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n\n#### 1.3 恢复screen会话\n\n恢复到离开前创建的lnmp会话的工作界面,执行：\n``` bash\naaaq lnmp \n```\n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\n``` bash\nscreen -ls screen\n```\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\n``` bash\nscreen -r lnmp\n```\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\n``` bash\nscreen -r 11791\n```\n\n#### 1.4 关闭screen的会话\n\n执行：\n``` bash\nexit\n```\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n#### 1.5 删除会话\n``` bash\nscreen -S session_name -X quit\n```\nor\n``` bash\nscreen -X -S 122128 quit\n```\n### 2、远程演示\n首先演示者先在服务器上执行:\n``` bash\nscreen -S test\n```\n创建一个screen会话，观众可以链接到远程服务器上执行:\n``` bash\nscreen -x test\n```\n观众屏幕上就会出现和演示者同步。\n\n### 3、常用快捷键\n\n#### 3.1 在当前screen会话中创建窗口\nCtrl+a c\n\n#### 3.2 窗口列表\nCtrl+a w\n\n#### 3.3 下一个窗口\nCtrl+a n\n\n#### 3.4 上一个窗口\nCtrl+a p\n\n#### 3.5 在第0个窗口和第9个窗口之间切换\nCtrl+a 0-9\nCtrl+a 0-9\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Server_Screen","published":1,"updated":"2021-10-14T08:54:45.396Z","_id":"ckt2jxv3w0007lcu3gp1s1yjs","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要使用screen命令\"><a href=\"#为什么要使用screen命令\" class=\"headerlink\" title=\"为什么要使用screen命令\"></a>为什么要使用screen命令</h2><p>VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。</p>\n<h2 id=\"一、screen命令是什么？\"><a href=\"#一、screen命令是什么？\" class=\"headerlink\" title=\"一、screen命令是什么？\"></a>一、screen命令是什么？</h2><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。</p>\n<h2 id=\"二、如何安装screen命令？\"><a href=\"#二、如何安装screen命令？\" class=\"headerlink\" title=\"二、如何安装screen命令？\"></a>二、如何安装screen命令？</h2><p>除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>CentOS 8上移除了screen，需要安装epel后安装screen执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Debian/Ubuntu系统执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、screen命令使用方法？\"><a href=\"#三、screen命令使用方法？\" class=\"headerlink\" title=\"三、screen命令使用方法？\"></a>三、screen命令使用方法？</h2><h3 id=\"1、常用的使用方法\"><a href=\"#1、常用的使用方法\" class=\"headerlink\" title=\"1、常用的使用方法\"></a>1、常用的使用方法</h3><p>用来解决文章开始我们遇到的问题，比如在安装lnmp时。</p>\n<h4 id=\"1-1-创建screen会话\"><a href=\"#1-1-创建screen会话\" class=\"headerlink\" title=\"1.1 创建screen会话\"></a>1.1 创建screen会话</h4><p>screen创建一个名字为lnmp的会话。 VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a>; 可以先执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1-2-暂时离开，保留screen会话中的任务或程序\"><a href=\"#1-2-暂时离开，保留screen会话中的任务或程序\" class=\"headerlink\" title=\"1.2 暂时离开，保留screen会话中的任务或程序\"></a>1.2 暂时离开，保留screen会话中的任务或程序</h4><p>当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)</p>\n<h4 id=\"1-3-恢复screen会话\"><a href=\"#1-3-恢复screen会话\" class=\"headerlink\" title=\"1.3 恢复screen会话\"></a>1.3 恢复screen会话</h4><p>恢复到离开前创建的lnmp会话的工作界面,执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aaaq lnmp <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -ls <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -r lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -r <span class=\"token number\">11791</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"1-4-关闭screen的会话\"><a href=\"#1-4-关闭screen的会话\" class=\"headerlink\" title=\"1.4 关闭screen的会话\"></a>1.4 关闭screen的会话</h4><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a></p>\n<h4 id=\"1-5-删除会话\"><a href=\"#1-5-删除会话\" class=\"headerlink\" title=\"1.5 删除会话\"></a>1.5 删除会话</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S session_name -X quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>or</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -X -S <span class=\"token number\">122128</span> quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、远程演示\"><a href=\"#2、远程演示\" class=\"headerlink\" title=\"2、远程演示\"></a>2、远程演示</h3><p>首先演示者先在服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个screen会话，观众可以链接到远程服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -x <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观众屏幕上就会出现和演示者同步。</p>\n<h3 id=\"3、常用快捷键\"><a href=\"#3、常用快捷键\" class=\"headerlink\" title=\"3、常用快捷键\"></a>3、常用快捷键</h3><h4 id=\"3-1-在当前screen会话中创建窗口\"><a href=\"#3-1-在当前screen会话中创建窗口\" class=\"headerlink\" title=\"3.1 在当前screen会话中创建窗口\"></a>3.1 在当前screen会话中创建窗口</h4><p>Ctrl+a c</p>\n<h4 id=\"3-2-窗口列表\"><a href=\"#3-2-窗口列表\" class=\"headerlink\" title=\"3.2 窗口列表\"></a>3.2 窗口列表</h4><p>Ctrl+a w</p>\n<h4 id=\"3-3-下一个窗口\"><a href=\"#3-3-下一个窗口\" class=\"headerlink\" title=\"3.3 下一个窗口\"></a>3.3 下一个窗口</h4><p>Ctrl+a n</p>\n<h4 id=\"3-4-上一个窗口\"><a href=\"#3-4-上一个窗口\" class=\"headerlink\" title=\"3.4 上一个窗口\"></a>3.4 上一个窗口</h4><p>Ctrl+a p</p>\n<h4 id=\"3-5-在第0个窗口和第9个窗口之间切换\"><a href=\"#3-5-在第0个窗口和第9个窗口之间切换\" class=\"headerlink\" title=\"3.5 在第0个窗口和第9个窗口之间切换\"></a>3.5 在第0个窗口和第9个窗口之间切换</h4><p>Ctrl+a 0-9<br>Ctrl+a 0-9<br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要使用screen命令\"><a href=\"#为什么要使用screen命令\" class=\"headerlink\" title=\"为什么要使用screen命令\"></a>为什么要使用screen命令</h2><p>VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。</p>\n<h2 id=\"一、screen命令是什么？\"><a href=\"#一、screen命令是什么？\" class=\"headerlink\" title=\"一、screen命令是什么？\"></a>一、screen命令是什么？</h2><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。</p>\n<h2 id=\"二、如何安装screen命令？\"><a href=\"#二、如何安装screen命令？\" class=\"headerlink\" title=\"二、如何安装screen命令？\"></a>二、如何安装screen命令？</h2><p>除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>CentOS 8上移除了screen，需要安装epel后安装screen执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Debian/Ubuntu系统执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、screen命令使用方法？\"><a href=\"#三、screen命令使用方法？\" class=\"headerlink\" title=\"三、screen命令使用方法？\"></a>三、screen命令使用方法？</h2><h3 id=\"1、常用的使用方法\"><a href=\"#1、常用的使用方法\" class=\"headerlink\" title=\"1、常用的使用方法\"></a>1、常用的使用方法</h3><p>用来解决文章开始我们遇到的问题，比如在安装lnmp时。</p>\n<h4 id=\"1-1-创建screen会话\"><a href=\"#1-1-创建screen会话\" class=\"headerlink\" title=\"1.1 创建screen会话\"></a>1.1 创建screen会话</h4><p>screen创建一个名字为lnmp的会话。 VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a>; 可以先执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1-2-暂时离开，保留screen会话中的任务或程序\"><a href=\"#1-2-暂时离开，保留screen会话中的任务或程序\" class=\"headerlink\" title=\"1.2 暂时离开，保留screen会话中的任务或程序\"></a>1.2 暂时离开，保留screen会话中的任务或程序</h4><p>当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)</p>\n<h4 id=\"1-3-恢复screen会话\"><a href=\"#1-3-恢复screen会话\" class=\"headerlink\" title=\"1.3 恢复screen会话\"></a>1.3 恢复screen会话</h4><p>恢复到离开前创建的lnmp会话的工作界面,执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aaaq lnmp <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -ls <span class=\"token function\">screen</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -r lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -r <span class=\"token number\">11791</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"1-4-关闭screen的会话\"><a href=\"#1-4-关闭screen的会话\" class=\"headerlink\" title=\"1.4 关闭screen的会话\"></a>1.4 关闭screen的会话</h4><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">exit</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a></p>\n<h4 id=\"1-5-删除会话\"><a href=\"#1-5-删除会话\" class=\"headerlink\" title=\"1.5 删除会话\"></a>1.5 删除会话</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S session_name -X quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>or</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -X -S <span class=\"token number\">122128</span> quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、远程演示\"><a href=\"#2、远程演示\" class=\"headerlink\" title=\"2、远程演示\"></a>2、远程演示</h3><p>首先演示者先在服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -S <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个screen会话，观众可以链接到远程服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">screen</span> -x <span class=\"token builtin class-name\">test</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观众屏幕上就会出现和演示者同步。</p>\n<h3 id=\"3、常用快捷键\"><a href=\"#3、常用快捷键\" class=\"headerlink\" title=\"3、常用快捷键\"></a>3、常用快捷键</h3><h4 id=\"3-1-在当前screen会话中创建窗口\"><a href=\"#3-1-在当前screen会话中创建窗口\" class=\"headerlink\" title=\"3.1 在当前screen会话中创建窗口\"></a>3.1 在当前screen会话中创建窗口</h4><p>Ctrl+a c</p>\n<h4 id=\"3-2-窗口列表\"><a href=\"#3-2-窗口列表\" class=\"headerlink\" title=\"3.2 窗口列表\"></a>3.2 窗口列表</h4><p>Ctrl+a w</p>\n<h4 id=\"3-3-下一个窗口\"><a href=\"#3-3-下一个窗口\" class=\"headerlink\" title=\"3.3 下一个窗口\"></a>3.3 下一个窗口</h4><p>Ctrl+a n</p>\n<h4 id=\"3-4-上一个窗口\"><a href=\"#3-4-上一个窗口\" class=\"headerlink\" title=\"3.4 上一个窗口\"></a>3.4 上一个窗口</h4><p>Ctrl+a p</p>\n<h4 id=\"3-5-在第0个窗口和第9个窗口之间切换\"><a href=\"#3-5-在第0个窗口和第9个窗口之间切换\" class=\"headerlink\" title=\"3.5 在第0个窗口和第9个窗口之间切换\"></a>3.5 在第0个窗口和第9个窗口之间切换</h4><p>Ctrl+a 0-9<br>Ctrl+a 0-9<br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"软件测试质量保障之开发提测","date":"2021-08-25T03:34:41.000Z","_content":"## 一、什么是提测 ？\n“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n## 二、为什么要有提测这个流程？\n开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n## 三、如果没有提测这个流程会有些什么样的影响？\n功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n## 四、如何做好提测，以提高提测质量？\n推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。\n在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。\n自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。\n如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。\n提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n## 五、提测邮件模板\n### <center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center>\n### <font color=\"#00FF00;\">一、提测需求:</font>\n#### <font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font>\n#### <font color=\"#00FF00;\">2.接口文档：接口文档链接</font>\n### <font color=\"#00FF00;\">二、提测环境:测试环境</font>\n### <font color=\"#00FF00;\">三、自测结论:通过</font>\n### <font color=\"#00FF00;\">四、提测范围:</font>\n#### <font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font>\n#### <font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font>\n#### <font color=\"#00FF00;\">3，测试类型为功能测试</font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Submit-Test.md","raw":"---\ntitle: 软件测试质量保障之开发提测\ndate: 2021-08-25 11:34:41\ntags: [测试文档]\ncategories: 测试相关\n---\n## 一、什么是提测 ？\n“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n## 二、为什么要有提测这个流程？\n开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n## 三、如果没有提测这个流程会有些什么样的影响？\n功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n## 四、如何做好提测，以提高提测质量？\n推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。\n在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。\n自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。\n如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。\n提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n## 五、提测邮件模板\n### <center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center>\n### <font color=\"#00FF00;\">一、提测需求:</font>\n#### <font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font>\n#### <font color=\"#00FF00;\">2.接口文档：接口文档链接</font>\n### <font color=\"#00FF00;\">二、提测环境:测试环境</font>\n### <font color=\"#00FF00;\">三、自测结论:通过</font>\n### <font color=\"#00FF00;\">四、提测范围:</font>\n#### <font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font>\n#### <font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font>\n#### <font color=\"#00FF00;\">3，测试类型为功能测试</font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Submit-Test","published":1,"updated":"2021-10-14T08:54:45.549Z","_id":"ckt2jxv3x000alcu3cww4ek4h","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是提测-？\"><a href=\"#一、什么是提测-？\" class=\"headerlink\" title=\"一、什么是提测 ？\"></a>一、什么是提测 ？</h2><p>“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。</p>\n<h2 id=\"二、为什么要有提测这个流程？\"><a href=\"#二、为什么要有提测这个流程？\" class=\"headerlink\" title=\"二、为什么要有提测这个流程？\"></a>二、为什么要有提测这个流程？</h2><p>开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。</p>\n<h2 id=\"三、如果没有提测这个流程会有些什么样的影响？\"><a href=\"#三、如果没有提测这个流程会有些什么样的影响？\" class=\"headerlink\" title=\"三、如果没有提测这个流程会有些什么样的影响？\"></a>三、如果没有提测这个流程会有些什么样的影响？</h2><p>功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。</p>\n<h2 id=\"四、如何做好提测，以提高提测质量？\"><a href=\"#四、如何做好提测，以提高提测质量？\" class=\"headerlink\" title=\"四、如何做好提测，以提高提测质量？\"></a>四、如何做好提测，以提高提测质量？</h2><p>推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。<br>在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。<br>自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。<br>如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。<br>提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。</p>\n<h2 id=\"五、提测邮件模板\"><a href=\"#五、提测邮件模板\" class=\"headerlink\" title=\"五、提测邮件模板\"></a>五、提测邮件模板</h2><h3 id=\"XXXX-需求提测通知\"><a href=\"#XXXX-需求提测通知\" class=\"headerlink\" title=\" XXXX 需求提测通知\"></a><center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center></h3><h3 id=\"一、提测需求\"><a href=\"#一、提测需求\" class=\"headerlink\" title=\"一、提测需求:\"></a><font color=\"#00FF00;\">一、提测需求:</font></h3><h4 id=\"1-XXXX-需求文档：需求链接\"><a href=\"#1-XXXX-需求文档：需求链接\" class=\"headerlink\" title=\"1. XXXX 需求文档：需求链接\"></a><font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font></h4><h4 id=\"2-接口文档：接口文档链接\"><a href=\"#2-接口文档：接口文档链接\" class=\"headerlink\" title=\"2.接口文档：接口文档链接\"></a><font color=\"#00FF00;\">2.接口文档：接口文档链接</font></h4><h3 id=\"二、提测环境-测试环境\"><a href=\"#二、提测环境-测试环境\" class=\"headerlink\" title=\"二、提测环境:测试环境\"></a><font color=\"#00FF00;\">二、提测环境:测试环境</font></h3><h3 id=\"三、自测结论-通过\"><a href=\"#三、自测结论-通过\" class=\"headerlink\" title=\"三、自测结论:通过\"></a><font color=\"#00FF00;\">三、自测结论:通过</font></h3><h3 id=\"四、提测范围\"><a href=\"#四、提测范围\" class=\"headerlink\" title=\"四、提测范围:\"></a><font color=\"#00FF00;\">四、提测范围:</font></h3><h4 id=\"1，提测XX功能，起到了XX的效果\"><a href=\"#1，提测XX功能，起到了XX的效果\" class=\"headerlink\" title=\"1，提测XX功能，起到了XX的效果\"></a><font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font></h4><h4 id=\"2，测试类型为功能测试和接口测试-如有接口测试\"><a href=\"#2，测试类型为功能测试和接口测试-如有接口测试\" class=\"headerlink\" title=\"2，测试类型为功能测试和接口测试(如有接口测试)\"></a><font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font></h4><h4 id=\"3，测试类型为功能测试\"><a href=\"#3，测试类型为功能测试\" class=\"headerlink\" title=\"3，测试类型为功能测试\"></a><font color=\"#00FF00;\">3，测试类型为功能测试</font></h4><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是提测-？\"><a href=\"#一、什么是提测-？\" class=\"headerlink\" title=\"一、什么是提测 ？\"></a>一、什么是提测 ？</h2><p>“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。</p>\n<h2 id=\"二、为什么要有提测这个流程？\"><a href=\"#二、为什么要有提测这个流程？\" class=\"headerlink\" title=\"二、为什么要有提测这个流程？\"></a>二、为什么要有提测这个流程？</h2><p>开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。</p>\n<h2 id=\"三、如果没有提测这个流程会有些什么样的影响？\"><a href=\"#三、如果没有提测这个流程会有些什么样的影响？\" class=\"headerlink\" title=\"三、如果没有提测这个流程会有些什么样的影响？\"></a>三、如果没有提测这个流程会有些什么样的影响？</h2><p>功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。</p>\n<h2 id=\"四、如何做好提测，以提高提测质量？\"><a href=\"#四、如何做好提测，以提高提测质量？\" class=\"headerlink\" title=\"四、如何做好提测，以提高提测质量？\"></a>四、如何做好提测，以提高提测质量？</h2><p>推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。<br>在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。<br>自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。<br>如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。<br>提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。</p>\n<h2 id=\"五、提测邮件模板\"><a href=\"#五、提测邮件模板\" class=\"headerlink\" title=\"五、提测邮件模板\"></a>五、提测邮件模板</h2><h3 id=\"XXXX-需求提测通知\"><a href=\"#XXXX-需求提测通知\" class=\"headerlink\" title=\" XXXX 需求提测通知\"></a><center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center></h3><h3 id=\"一、提测需求\"><a href=\"#一、提测需求\" class=\"headerlink\" title=\"一、提测需求:\"></a><font color=\"#00FF00;\">一、提测需求:</font></h3><h4 id=\"1-XXXX-需求文档：需求链接\"><a href=\"#1-XXXX-需求文档：需求链接\" class=\"headerlink\" title=\"1. XXXX 需求文档：需求链接\"></a><font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font></h4><h4 id=\"2-接口文档：接口文档链接\"><a href=\"#2-接口文档：接口文档链接\" class=\"headerlink\" title=\"2.接口文档：接口文档链接\"></a><font color=\"#00FF00;\">2.接口文档：接口文档链接</font></h4><h3 id=\"二、提测环境-测试环境\"><a href=\"#二、提测环境-测试环境\" class=\"headerlink\" title=\"二、提测环境:测试环境\"></a><font color=\"#00FF00;\">二、提测环境:测试环境</font></h3><h3 id=\"三、自测结论-通过\"><a href=\"#三、自测结论-通过\" class=\"headerlink\" title=\"三、自测结论:通过\"></a><font color=\"#00FF00;\">三、自测结论:通过</font></h3><h3 id=\"四、提测范围\"><a href=\"#四、提测范围\" class=\"headerlink\" title=\"四、提测范围:\"></a><font color=\"#00FF00;\">四、提测范围:</font></h3><h4 id=\"1，提测XX功能，起到了XX的效果\"><a href=\"#1，提测XX功能，起到了XX的效果\" class=\"headerlink\" title=\"1，提测XX功能，起到了XX的效果\"></a><font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font></h4><h4 id=\"2，测试类型为功能测试和接口测试-如有接口测试\"><a href=\"#2，测试类型为功能测试和接口测试-如有接口测试\" class=\"headerlink\" title=\"2，测试类型为功能测试和接口测试(如有接口测试)\"></a><font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font></h4><h4 id=\"3，测试类型为功能测试\"><a href=\"#3，测试类型为功能测试\" class=\"headerlink\" title=\"3，测试类型为功能测试\"></a><font color=\"#00FF00;\">3，测试类型为功能测试</font></h4><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"如何搭建Hexo博客并部署到GitHub","date":"2021-08-12T01:35:21.000Z","_content":"## 什么是 Hexo？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n\n## 环境\n\n### 一、安装Git、Nodejs、Hexo\n\n#### 1.安装Git\nWindows：\n可通过[Git官网](https://git-scm.com/download/win)自行下载安装，一路Next，记住将路径加到环境变量中。\n\n\nLinux：\n##### 1.1 检查git是否已经安装\n``` bash\ngit --version\n```\n如果出现以下提示直接下一步：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n##### 1.2 安装Git\n如果出现的提示是Not Find那就进行以下命令进行安装吧\n``` bash\nyum -y install git\n```\n##### 1.3 检查Git版本\n安装完成后输入命令查看Git版本：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n{% note warning %}\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n{% endnote %}\n\n#### 2.安装Nodejs\nWindows：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 下载完成后一路next即可\n{% note warning %}\n提示：切记，将exe文件路径添加至环境变量中\n{% endnote %}\n\nLinux：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 将安装包上传到指定位置，并解压\n``` bash\ntar -xvf node-v10.6.0-linux-x64.tar.xz\n```\n##### 2.3 通过建立软连接变为全局\n``` bash\nln -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\nln -s /usr/local/application/nodejs/bin/node /usr/local/bin/\n```\n##### 2.4 检查是否安装成功\n``` bash\nnode-v\n```\n#### 3.安装Hexo\n##### 3.1 安装Hexo\n当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\n``` bash\nnpm install -g hexo-cli\n```\n##### 3.2 查看Hexo版本\n安装完成后，查看版本\n``` bash\nhexo -v\n```\n当看到打印出来的版本号后，说明以及安装完成\n\n### 二、生成Hexo\n#### 初始化Hexo\n``` bash\nhexo init myblog //文件夹名称\n```\n#### 安装依赖包\n``` bash\nnpm install\n```\n当新建完成后，将会出现以下文件夹\n##### 1.node_modules：依赖包\n##### 2.public：生成的页面\n##### 3.scaffolds：文章模板\n##### 4.source：文章\n##### 5.themes：主题\n##### 6._config.yml：配置文件\n\n### 三、启动Hexo项目\n#### 启动\n##### 1.生成静态文件\n``` bash\nhexo generate\n```\n也可以简写为\n``` bash\nhexo g\n```\n##### 2.生成静态文件\n``` bash\nhexo server\n```\n也可以简写为\n``` bash\nhexo s\n```\n{% note success %}\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n{% endnote %}\n\n\n### 三、部署至GitHub中的\n#### 1.GitHub创建仓库\n在GitHub中创建一个自己的仓库\n##### 1.1 生成SSH并添加至GitHub中\n1.配置Git相关信息\n``` bash\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的email\"\n```\n2.创建SSH，输入命令后一路回车\n``` bash\nssh-keygen -t rsa -C \"youremail\"\n```\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\n``` bash\nC:\\Users\\think\\.ssh //路径\n```\n{% note primary %}\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n{% endnote %}\n{% note success %}\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n{% endnote %}\n##### 1.2 在GitHub创建仓库\n点击右上角+号，选择new repository，在Repository name中输入：\n``` bash\n你的用户名.github.io\n```\n{% note success %}\n点击Create repository即可完成项目创建\n{% endnote %}\n#### 2.将Hexo部署到GitHub Pages中\n##### 2.1 修改配置文件\n1.打开根目录下的_config.yml文件，拉到最后\n``` bash\ndeploy:\n    type: git\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称\n```\n##### 2.2 安装上传渲染插件\n需要安装deploy-git，这样才可以部署到GitHub中\n``` bash\nnpm install hexo-deployer-git --save\n```\n##### 2.3 部署\n输入完整命令进行部署\n``` bash\nhexo clean\nhexo generate\nhexo deploy\n```\n也可以输入简化命令\n``` bash\nhexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署\n```\n##### 2.4 GitHub中配置GitHub Pages\n{% note success %}\n进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Web_Hexo.md","raw":"---\ntitle: 如何搭建Hexo博客并部署到GitHub\ndate: 2021-08-12 09:35:21\ntags: [Hexo, 博客]\ncategories: WEB前端\n---\n## 什么是 Hexo？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n\n## 环境\n\n### 一、安装Git、Nodejs、Hexo\n\n#### 1.安装Git\nWindows：\n可通过[Git官网](https://git-scm.com/download/win)自行下载安装，一路Next，记住将路径加到环境变量中。\n\n\nLinux：\n##### 1.1 检查git是否已经安装\n``` bash\ngit --version\n```\n如果出现以下提示直接下一步：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n##### 1.2 安装Git\n如果出现的提示是Not Find那就进行以下命令进行安装吧\n``` bash\nyum -y install git\n```\n##### 1.3 检查Git版本\n安装完成后输入命令查看Git版本：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n{% note warning %}\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n{% endnote %}\n\n#### 2.安装Nodejs\nWindows：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 下载完成后一路next即可\n{% note warning %}\n提示：切记，将exe文件路径添加至环境变量中\n{% endnote %}\n\nLinux：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 将安装包上传到指定位置，并解压\n``` bash\ntar -xvf node-v10.6.0-linux-x64.tar.xz\n```\n##### 2.3 通过建立软连接变为全局\n``` bash\nln -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\nln -s /usr/local/application/nodejs/bin/node /usr/local/bin/\n```\n##### 2.4 检查是否安装成功\n``` bash\nnode-v\n```\n#### 3.安装Hexo\n##### 3.1 安装Hexo\n当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\n``` bash\nnpm install -g hexo-cli\n```\n##### 3.2 查看Hexo版本\n安装完成后，查看版本\n``` bash\nhexo -v\n```\n当看到打印出来的版本号后，说明以及安装完成\n\n### 二、生成Hexo\n#### 初始化Hexo\n``` bash\nhexo init myblog //文件夹名称\n```\n#### 安装依赖包\n``` bash\nnpm install\n```\n当新建完成后，将会出现以下文件夹\n##### 1.node_modules：依赖包\n##### 2.public：生成的页面\n##### 3.scaffolds：文章模板\n##### 4.source：文章\n##### 5.themes：主题\n##### 6._config.yml：配置文件\n\n### 三、启动Hexo项目\n#### 启动\n##### 1.生成静态文件\n``` bash\nhexo generate\n```\n也可以简写为\n``` bash\nhexo g\n```\n##### 2.生成静态文件\n``` bash\nhexo server\n```\n也可以简写为\n``` bash\nhexo s\n```\n{% note success %}\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n{% endnote %}\n\n\n### 三、部署至GitHub中的\n#### 1.GitHub创建仓库\n在GitHub中创建一个自己的仓库\n##### 1.1 生成SSH并添加至GitHub中\n1.配置Git相关信息\n``` bash\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的email\"\n```\n2.创建SSH，输入命令后一路回车\n``` bash\nssh-keygen -t rsa -C \"youremail\"\n```\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\n``` bash\nC:\\Users\\think\\.ssh //路径\n```\n{% note primary %}\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n{% endnote %}\n{% note success %}\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n{% endnote %}\n##### 1.2 在GitHub创建仓库\n点击右上角+号，选择new repository，在Repository name中输入：\n``` bash\n你的用户名.github.io\n```\n{% note success %}\n点击Create repository即可完成项目创建\n{% endnote %}\n#### 2.将Hexo部署到GitHub Pages中\n##### 2.1 修改配置文件\n1.打开根目录下的_config.yml文件，拉到最后\n``` bash\ndeploy:\n    type: git\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称\n```\n##### 2.2 安装上传渲染插件\n需要安装deploy-git，这样才可以部署到GitHub中\n``` bash\nnpm install hexo-deployer-git --save\n```\n##### 2.3 部署\n输入完整命令进行部署\n``` bash\nhexo clean\nhexo generate\nhexo deploy\n```\n也可以输入简化命令\n``` bash\nhexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署\n```\n##### 2.4 GitHub中配置GitHub Pages\n{% note success %}\n进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Web_Hexo","published":1,"updated":"2021-10-14T08:54:45.319Z","_id":"ckt2jxv3y000blcu32zu5exok","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h3 id=\"一、安装Git、Nodejs、Hexo\"><a href=\"#一、安装Git、Nodejs、Hexo\" class=\"headerlink\" title=\"一、安装Git、Nodejs、Hexo\"></a>一、安装Git、Nodejs、Hexo</h3><h4 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h4><p>Windows：<br>可通过<a href=\"https://git-scm.com/download/win\">Git官网</a>自行下载安装，一路Next，记住将路径加到环境变量中。</p>\n<p>Linux：</p>\n<h5 id=\"1-1-检查git是否已经安装\"><a href=\"#1-1-检查git是否已经安装\" class=\"headerlink\" title=\"1.1 检查git是否已经安装\"></a>1.1 检查git是否已经安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果出现以下提示直接下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@VM_0_5_centos /<span class=\"token punctuation\">]</span><span class=\"token comment\"># git --version</span>\n<span class=\"token function\">git</span> version <span class=\"token number\">2.27</span>.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Web_Hexo/git_version.png\" alt=\"检查git版本\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/12/Web_Hexo/git_version.png\" class=\"lozad post-image\"></p>\n<h5 id=\"1-2-安装Git\"><a href=\"#1-2-安装Git\" class=\"headerlink\" title=\"1.2 安装Git\"></a>1.2 安装Git</h5><p>如果出现的提示是Not Find那就进行以下命令进行安装吧</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"1-3-检查Git版本\"><a href=\"#1-3-检查Git版本\" class=\"headerlink\" title=\"1.3 检查Git版本\"></a>1.3 检查Git版本</h5><p>安装完成后输入命令查看Git版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@VM_0_5_centos /<span class=\"token punctuation\">]</span><span class=\"token comment\"># git --version</span>\n<span class=\"token function\">git</span> version <span class=\"token number\">2.27</span>.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Web_Hexo/git_version.png\" alt=\"检查git版本\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/12/Web_Hexo/git_version.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-warning\"><p>提示：yum安装git被安装在/usr/libexec/git-core目录下</p></div>\n\n<h4 id=\"2-安装Nodejs\"><a href=\"#2-安装Nodejs\" class=\"headerlink\" title=\"2.安装Nodejs\"></a>2.安装Nodejs</h4><p>Windows：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-下载完成后一路next即可\"><a href=\"#2-2-下载完成后一路next即可\" class=\"headerlink\" title=\"2.2 下载完成后一路next即可\"></a>2.2 下载完成后一路next即可</h5><div class=\"post-note note-warning\"><p>提示：切记，将exe文件路径添加至环境变量中</p></div>\n\n<p>Linux：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-将安装包上传到指定位置，并解压\"><a href=\"#2-2-将安装包上传到指定位置，并解压\" class=\"headerlink\" title=\"2.2 将安装包上传到指定位置，并解压\"></a>2.2 将安装包上传到指定位置，并解压</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -xvf node-v10.6.0-linux-x64.tar.xz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-通过建立软连接变为全局\"><a href=\"#2-3-通过建立软连接变为全局\" class=\"headerlink\" title=\"2.3 通过建立软连接变为全局\"></a>2.3 通过建立软连接变为全局</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\n<span class=\"token function\">ln</span> -s /usr/local/application/nodejs/bin/node /usr/local/bin/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-检查是否安装成功\"><a href=\"#2-4-检查是否安装成功\" class=\"headerlink\" title=\"2.4 检查是否安装成功\"></a>2.4 检查是否安装成功</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">node-v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><h5 id=\"3-1-安装Hexo\"><a href=\"#3-1-安装Hexo\" class=\"headerlink\" title=\"3.1 安装Hexo\"></a>3.1 安装Hexo</h5><p>当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"3-2-查看Hexo版本\"><a href=\"#3-2-查看Hexo版本\" class=\"headerlink\" title=\"3.2 查看Hexo版本\"></a>3.2 查看Hexo版本</h5><p>安装完成后，查看版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当看到打印出来的版本号后，说明以及安装完成</p>\n<h3 id=\"二、生成Hexo\"><a href=\"#二、生成Hexo\" class=\"headerlink\" title=\"二、生成Hexo\"></a>二、生成Hexo</h3><h4 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog //文件夹名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当新建完成后，将会出现以下文件夹</p>\n<h5 id=\"1-node-modules：依赖包\"><a href=\"#1-node-modules：依赖包\" class=\"headerlink\" title=\"1.node_modules：依赖包\"></a>1.node_modules：依赖包</h5><h5 id=\"2-public：生成的页面\"><a href=\"#2-public：生成的页面\" class=\"headerlink\" title=\"2.public：生成的页面\"></a>2.public：生成的页面</h5><h5 id=\"3-scaffolds：文章模板\"><a href=\"#3-scaffolds：文章模板\" class=\"headerlink\" title=\"3.scaffolds：文章模板\"></a>3.scaffolds：文章模板</h5><h5 id=\"4-source：文章\"><a href=\"#4-source：文章\" class=\"headerlink\" title=\"4.source：文章\"></a>4.source：文章</h5><h5 id=\"5-themes：主题\"><a href=\"#5-themes：主题\" class=\"headerlink\" title=\"5.themes：主题\"></a>5.themes：主题</h5><h5 id=\"6-config-yml：配置文件\"><a href=\"#6-config-yml：配置文件\" class=\"headerlink\" title=\"6._config.yml：配置文件\"></a>6._config.yml：配置文件</h5><h3 id=\"三、启动Hexo项目\"><a href=\"#三、启动Hexo项目\" class=\"headerlink\" title=\"三、启动Hexo项目\"></a>三、启动Hexo项目</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><h5 id=\"1-生成静态文件\"><a href=\"#1-生成静态文件\" class=\"headerlink\" title=\"1.生成静态文件\"></a>1.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-生成静态文件\"><a href=\"#2-生成静态文件\" class=\"headerlink\" title=\"2.生成静态文件\"></a>2.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~</p></div>\n\n\n<h3 id=\"三、部署至GitHub中的\"><a href=\"#三、部署至GitHub中的\" class=\"headerlink\" title=\"三、部署至GitHub中的\"></a>三、部署至GitHub中的</h3><h4 id=\"1-GitHub创建仓库\"><a href=\"#1-GitHub创建仓库\" class=\"headerlink\" title=\"1.GitHub创建仓库\"></a>1.GitHub创建仓库</h4><p>在GitHub中创建一个自己的仓库</p>\n<h5 id=\"1-1-生成SSH并添加至GitHub中\"><a href=\"#1-1-生成SSH并添加至GitHub中\" class=\"headerlink\" title=\"1.1 生成SSH并添加至GitHub中\"></a>1.1 生成SSH并添加至GitHub中</h5><p>1.配置Git相关信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"你的email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2.创建SSH，输入命令后一路回车</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>think<span class=\"token punctuation\">\\</span>.ssh //路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>id_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。</p></div>\n<div class=\"post-note note-success\"><p>然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去</p></div>\n<h5 id=\"1-2-在GitHub创建仓库\"><a href=\"#1-2-在GitHub创建仓库\" class=\"headerlink\" title=\"1.2 在GitHub创建仓库\"></a>1.2 在GitHub创建仓库</h5><p>点击右上角+号，选择new repository，在Repository name中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">你的用户名.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>点击Create repository即可完成项目创建</p></div>\n<h4 id=\"2-将Hexo部署到GitHub-Pages中\"><a href=\"#2-将Hexo部署到GitHub-Pages中\" class=\"headerlink\" title=\"2.将Hexo部署到GitHub Pages中\"></a>2.将Hexo部署到GitHub Pages中</h4><h5 id=\"2-1-修改配置文件\"><a href=\"#2-1-修改配置文件\" class=\"headerlink\" title=\"2.1 修改配置文件\"></a>2.1 修改配置文件</h5><p>1.打开根目录下的_config.yml文件，拉到最后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n    type: <span class=\"token function\">git</span>\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-2-安装上传渲染插件\"><a href=\"#2-2-安装上传渲染插件\" class=\"headerlink\" title=\"2.2 安装上传渲染插件\"></a>2.2 安装上传渲染插件</h5><p>需要安装deploy-git，这样才可以部署到GitHub中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-部署\"><a href=\"#2-3-部署\" class=\"headerlink\" title=\"2.3 部署\"></a>2.3 部署</h5><p>输入完整命令进行部署</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>也可以输入简化命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-GitHub中配置GitHub-Pages\"><a href=\"#2-4-GitHub中配置GitHub-Pages\" class=\"headerlink\" title=\"2.4 GitHub中配置GitHub Pages\"></a>2.4 GitHub中配置GitHub Pages</h5><div class=\"post-note note-success\"><p>进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h3 id=\"一、安装Git、Nodejs、Hexo\"><a href=\"#一、安装Git、Nodejs、Hexo\" class=\"headerlink\" title=\"一、安装Git、Nodejs、Hexo\"></a>一、安装Git、Nodejs、Hexo</h3><h4 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h4><p>Windows：<br>可通过<a href=\"https://git-scm.com/download/win\">Git官网</a>自行下载安装，一路Next，记住将路径加到环境变量中。</p>\n<p>Linux：</p>\n<h5 id=\"1-1-检查git是否已经安装\"><a href=\"#1-1-检查git是否已经安装\" class=\"headerlink\" title=\"1.1 检查git是否已经安装\"></a>1.1 检查git是否已经安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果出现以下提示直接下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@VM_0_5_centos /<span class=\"token punctuation\">]</span><span class=\"token comment\"># git --version</span>\n<span class=\"token function\">git</span> version <span class=\"token number\">2.27</span>.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Web_Hexo/git_version.png\" alt=\"检查git版本\"></p>\n<h5 id=\"1-2-安装Git\"><a href=\"#1-2-安装Git\" class=\"headerlink\" title=\"1.2 安装Git\"></a>1.2 安装Git</h5><p>如果出现的提示是Not Find那就进行以下命令进行安装吧</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y <span class=\"token function\">install</span> <span class=\"token function\">git</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"1-3-检查Git版本\"><a href=\"#1-3-检查Git版本\" class=\"headerlink\" title=\"1.3 检查Git版本\"></a>1.3 检查Git版本</h5><p>安装完成后输入命令查看Git版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token punctuation\">[</span>root@VM_0_5_centos /<span class=\"token punctuation\">]</span><span class=\"token comment\"># git --version</span>\n<span class=\"token function\">git</span> version <span class=\"token number\">2.27</span>.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Web_Hexo/git_version.png\" alt=\"检查git版本\"></p>\n<div class=\"post-note note-warning\"><p>提示：yum安装git被安装在/usr/libexec/git-core目录下</p></div>\n\n<h4 id=\"2-安装Nodejs\"><a href=\"#2-安装Nodejs\" class=\"headerlink\" title=\"2.安装Nodejs\"></a>2.安装Nodejs</h4><p>Windows：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-下载完成后一路next即可\"><a href=\"#2-2-下载完成后一路next即可\" class=\"headerlink\" title=\"2.2 下载完成后一路next即可\"></a>2.2 下载完成后一路next即可</h5><div class=\"post-note note-warning\"><p>提示：切记，将exe文件路径添加至环境变量中</p></div>\n\n<p>Linux：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-将安装包上传到指定位置，并解压\"><a href=\"#2-2-将安装包上传到指定位置，并解压\" class=\"headerlink\" title=\"2.2 将安装包上传到指定位置，并解压\"></a>2.2 将安装包上传到指定位置，并解压</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -xvf node-v10.6.0-linux-x64.tar.xz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-通过建立软连接变为全局\"><a href=\"#2-3-通过建立软连接变为全局\" class=\"headerlink\" title=\"2.3 通过建立软连接变为全局\"></a>2.3 通过建立软连接变为全局</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">ln</span> -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\n<span class=\"token function\">ln</span> -s /usr/local/application/nodejs/bin/node /usr/local/bin/<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-检查是否安装成功\"><a href=\"#2-4-检查是否安装成功\" class=\"headerlink\" title=\"2.4 检查是否安装成功\"></a>2.4 检查是否安装成功</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">node-v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><h5 id=\"3-1-安装Hexo\"><a href=\"#3-1-安装Hexo\" class=\"headerlink\" title=\"3.1 安装Hexo\"></a>3.1 安装Hexo</h5><p>当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> -g hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"3-2-查看Hexo版本\"><a href=\"#3-2-查看Hexo版本\" class=\"headerlink\" title=\"3.2 查看Hexo版本\"></a>3.2 查看Hexo版本</h5><p>安装完成后，查看版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当看到打印出来的版本号后，说明以及安装完成</p>\n<h3 id=\"二、生成Hexo\"><a href=\"#二、生成Hexo\" class=\"headerlink\" title=\"二、生成Hexo\"></a>二、生成Hexo</h3><h4 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog //文件夹名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当新建完成后，将会出现以下文件夹</p>\n<h5 id=\"1-node-modules：依赖包\"><a href=\"#1-node-modules：依赖包\" class=\"headerlink\" title=\"1.node_modules：依赖包\"></a>1.node_modules：依赖包</h5><h5 id=\"2-public：生成的页面\"><a href=\"#2-public：生成的页面\" class=\"headerlink\" title=\"2.public：生成的页面\"></a>2.public：生成的页面</h5><h5 id=\"3-scaffolds：文章模板\"><a href=\"#3-scaffolds：文章模板\" class=\"headerlink\" title=\"3.scaffolds：文章模板\"></a>3.scaffolds：文章模板</h5><h5 id=\"4-source：文章\"><a href=\"#4-source：文章\" class=\"headerlink\" title=\"4.source：文章\"></a>4.source：文章</h5><h5 id=\"5-themes：主题\"><a href=\"#5-themes：主题\" class=\"headerlink\" title=\"5.themes：主题\"></a>5.themes：主题</h5><h5 id=\"6-config-yml：配置文件\"><a href=\"#6-config-yml：配置文件\" class=\"headerlink\" title=\"6._config.yml：配置文件\"></a>6._config.yml：配置文件</h5><h3 id=\"三、启动Hexo项目\"><a href=\"#三、启动Hexo项目\" class=\"headerlink\" title=\"三、启动Hexo项目\"></a>三、启动Hexo项目</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><h5 id=\"1-生成静态文件\"><a href=\"#1-生成静态文件\" class=\"headerlink\" title=\"1.生成静态文件\"></a>1.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-生成静态文件\"><a href=\"#2-生成静态文件\" class=\"headerlink\" title=\"2.生成静态文件\"></a>2.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~</p></div>\n\n\n<h3 id=\"三、部署至GitHub中的\"><a href=\"#三、部署至GitHub中的\" class=\"headerlink\" title=\"三、部署至GitHub中的\"></a>三、部署至GitHub中的</h3><h4 id=\"1-GitHub创建仓库\"><a href=\"#1-GitHub创建仓库\" class=\"headerlink\" title=\"1.GitHub创建仓库\"></a>1.GitHub创建仓库</h4><p>在GitHub中创建一个自己的仓库</p>\n<h5 id=\"1-1-生成SSH并添加至GitHub中\"><a href=\"#1-1-生成SSH并添加至GitHub中\" class=\"headerlink\" title=\"1.1 生成SSH并添加至GitHub中\"></a>1.1 生成SSH并添加至GitHub中</h5><p>1.配置Git相关信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> config --global user.name <span class=\"token string\">\"你的用户名\"</span>\n<span class=\"token function\">git</span> config --global user.email <span class=\"token string\">\"你的email\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2.创建SSH，输入命令后一路回车</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C <span class=\"token string\">\"youremail\"</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:<span class=\"token punctuation\">\\</span>Users<span class=\"token punctuation\">\\</span>think<span class=\"token punctuation\">\\</span>.ssh //路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>id_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。</p></div>\n<div class=\"post-note note-success\"><p>然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去</p></div>\n<h5 id=\"1-2-在GitHub创建仓库\"><a href=\"#1-2-在GitHub创建仓库\" class=\"headerlink\" title=\"1.2 在GitHub创建仓库\"></a>1.2 在GitHub创建仓库</h5><p>点击右上角+号，选择new repository，在Repository name中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">你的用户名.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>点击Create repository即可完成项目创建</p></div>\n<h4 id=\"2-将Hexo部署到GitHub-Pages中\"><a href=\"#2-将Hexo部署到GitHub-Pages中\" class=\"headerlink\" title=\"2.将Hexo部署到GitHub Pages中\"></a>2.将Hexo部署到GitHub Pages中</h4><h5 id=\"2-1-修改配置文件\"><a href=\"#2-1-修改配置文件\" class=\"headerlink\" title=\"2.1 修改配置文件\"></a>2.1 修改配置文件</h5><p>1.打开根目录下的_config.yml文件，拉到最后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n    type: <span class=\"token function\">git</span>\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-2-安装上传渲染插件\"><a href=\"#2-2-安装上传渲染插件\" class=\"headerlink\" title=\"2.2 安装上传渲染插件\"></a>2.2 安装上传渲染插件</h5><p>需要安装deploy-git，这样才可以部署到GitHub中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-部署\"><a href=\"#2-3-部署\" class=\"headerlink\" title=\"2.3 部署\"></a>2.3 部署</h5><p>输入完整命令进行部署</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>也可以输入简化命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-GitHub中配置GitHub-Pages\"><a href=\"#2-4-GitHub中配置GitHub-Pages\" class=\"headerlink\" title=\"2.4 GitHub中配置GitHub Pages\"></a>2.4 GitHub中配置GitHub Pages</h5><div class=\"post-note note-success\"><p>进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"python如何将url中参数分解","date":"2021-09-02T15:51:00.000Z","_content":"## python分解url中的参数\n``` python\nimport urllib.parse as urlparse\n\nurl = 'http://service.weibo.com/share/share.php?title=财联社9月2日电，英国报告新增38154例新冠肺炎确诊病例，新增178例死亡病例。 &amp;url=https://www.cls.cn/detail/827698&amp;searchPic=false'\n\nparsed = urlparse.urlparse(url)\n\nprint(parsed)\n\nquerys = urlparse.parse_qs(parsed.query)\n\nprint(querys)\n\nquerys = {k: v[0] for k, v in querys.items()}\n\nprint(querys)\n```\n![结果](Parameter-Decomposition/result.jpg)\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Parameter-Decomposition.md","raw":"---\ntitle: python如何将url中参数分解\ndate: 2021-09-02 23:51:00\ntags: [python]\ncategories: 日常问题\n---\n## python分解url中的参数\n``` python\nimport urllib.parse as urlparse\n\nurl = 'http://service.weibo.com/share/share.php?title=财联社9月2日电，英国报告新增38154例新冠肺炎确诊病例，新增178例死亡病例。 &amp;url=https://www.cls.cn/detail/827698&amp;searchPic=false'\n\nparsed = urlparse.urlparse(url)\n\nprint(parsed)\n\nquerys = urlparse.parse_qs(parsed.query)\n\nprint(querys)\n\nquerys = {k: v[0] for k, v in querys.items()}\n\nprint(querys)\n```\n![结果](Parameter-Decomposition/result.jpg)\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Parameter-Decomposition","published":1,"updated":"2021-10-14T08:54:45.431Z","_id":"ckt34tyfh0000ccri6plngqfi","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"python分解url中的参数\"><a href=\"#python分解url中的参数\" class=\"headerlink\" title=\"python分解url中的参数\"></a>python分解url中的参数</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">as</span> urlparse\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://service.weibo.com/share/share.php?title=财联社9月2日电，英国报告新增38154例新冠肺炎确诊病例，新增178例死亡病例。 &amp;amp;url=https://www.cls.cn/detail/827698&amp;amp;searchPic=false'</span>\n\nparsed <span class=\"token operator\">=</span> urlparse<span class=\"token punctuation\">.</span>urlparse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span>\n\nquerys <span class=\"token operator\">=</span> urlparse<span class=\"token punctuation\">.</span>parse_qs<span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>querys<span class=\"token punctuation\">)</span>\n\nquerys <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> querys<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>querys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/02/Parameter-Decomposition/result.jpg\" alt=\"结果\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/02/Parameter-Decomposition/result.jpg\" class=\"lozad post-image\"><br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"python分解url中的参数\"><a href=\"#python分解url中的参数\" class=\"headerlink\" title=\"python分解url中的参数\"></a>python分解url中的参数</h2><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> urllib<span class=\"token punctuation\">.</span>parse <span class=\"token keyword\">as</span> urlparse\n\nurl <span class=\"token operator\">=</span> <span class=\"token string\">'http://service.weibo.com/share/share.php?title=财联社9月2日电，英国报告新增38154例新冠肺炎确诊病例，新增178例死亡病例。 &amp;amp;url=https://www.cls.cn/detail/827698&amp;amp;searchPic=false'</span>\n\nparsed <span class=\"token operator\">=</span> urlparse<span class=\"token punctuation\">.</span>urlparse<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">)</span>\n\nquerys <span class=\"token operator\">=</span> urlparse<span class=\"token punctuation\">.</span>parse_qs<span class=\"token punctuation\">(</span>parsed<span class=\"token punctuation\">.</span>query<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>querys<span class=\"token punctuation\">)</span>\n\nquerys <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span>k<span class=\"token punctuation\">:</span> v<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">for</span> k<span class=\"token punctuation\">,</span> v <span class=\"token keyword\">in</span> querys<span class=\"token punctuation\">.</span>items<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>querys<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/02/Parameter-Decomposition/result.jpg\" alt=\"结果\"><br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python如何随机打乱list列表","date":"2021-09-05T01:39:45.000Z","_content":"## 条件\n{% note info %}\n假设已有一个list为['dog', 'pig', 'cat', 'mouse']，需求是将该列表随机打乱\n{% endnote %}\n## 解决方法\n{% note info %}\n使用python随机函数random，调用random中的shuffle方法，将需要打乱的列表作为参数传递\n{% endnote %}\n```python\nimport random\n\ndemo_list = ['dog', 'pig', 'cat', 'mouse']\n\nprint(demo_list)\nprint('------------------------------')\n\n# 循环打印十次看随机后的列表\nfor i in range(0, 10):\n    random.shuffle(demo_list)\n    print(demo_list)\n```\n![结果展示](Python-Change-List/show_result.jpg)\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Python-Change-List.md","raw":"---\ntitle: Python如何随机打乱list列表\ndate: 2021-09-05 09:39:45\ntags: [python]\ncategories: 日常问题\n---\n## 条件\n{% note info %}\n假设已有一个list为['dog', 'pig', 'cat', 'mouse']，需求是将该列表随机打乱\n{% endnote %}\n## 解决方法\n{% note info %}\n使用python随机函数random，调用random中的shuffle方法，将需要打乱的列表作为参数传递\n{% endnote %}\n```python\nimport random\n\ndemo_list = ['dog', 'pig', 'cat', 'mouse']\n\nprint(demo_list)\nprint('------------------------------')\n\n# 循环打印十次看随机后的列表\nfor i in range(0, 10):\n    random.shuffle(demo_list)\n    print(demo_list)\n```\n![结果展示](Python-Change-List/show_result.jpg)\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Python-Change-List","published":1,"updated":"2021-10-14T08:54:45.540Z","_id":"ckt9g9yux0000ysu3fwmd51pt","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><div class=\"post-note note-info\"><p>假设已有一个list为[‘dog’, ‘pig’, ‘cat’, ‘mouse’]，需求是将该列表随机打乱</p></div>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><div class=\"post-note note-info\"><p>使用python随机函数random，调用random中的shuffle方法，将需要打乱的列表作为参数传递</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\ndemo_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pig'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mouse'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------------------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 循环打印十次看随机后的列表</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/05/Python-Change-List/show_result.jpg\" alt=\"结果展示\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/05/Python-Change-List/show_result.jpg\" class=\"lozad post-image\"><br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"条件\"><a href=\"#条件\" class=\"headerlink\" title=\"条件\"></a>条件</h2><div class=\"post-note note-info\"><p>假设已有一个list为[‘dog’, ‘pig’, ‘cat’, ‘mouse’]，需求是将该列表随机打乱</p></div>\n<h2 id=\"解决方法\"><a href=\"#解决方法\" class=\"headerlink\" title=\"解决方法\"></a>解决方法</h2><div class=\"post-note note-info\"><p>使用python随机函数random，调用random中的shuffle方法，将需要打乱的列表作为参数传递</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> random\n\ndemo_list <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'dog'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'pig'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'cat'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'mouse'</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'------------------------------'</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># 循环打印十次看随机后的列表</span>\n<span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">10</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    random<span class=\"token punctuation\">.</span>shuffle<span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>demo_list<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/05/Python-Change-List/show_result.jpg\" alt=\"结果展示\"><br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python爬虫遇到中文乱码怎么办","date":"2021-09-08T14:25:43.000Z","_content":"\n{% note info %}\n在爬虫过程中遇到页面中文编码乱码的问题，直接给返回值更改编码即可解决\n{% endnote %}\n``` python\nimport requests\n\nres = requests.get(url)\n\nres.encoding = 'gb2312'\n\nprint(res.text)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Python-request-MistakenCode.md","raw":"---\ntitle: Python爬虫遇到中文乱码怎么办\ndate: 2021-09-08 22:25:43\ntags: [python]\ncategories: 日常问题\n---\n\n{% note info %}\n在爬虫过程中遇到页面中文编码乱码的问题，直接给返回值更改编码即可解决\n{% endnote %}\n``` python\nimport requests\n\nres = requests.get(url)\n\nres.encoding = 'gb2312'\n\nprint(res.text)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Python-request-MistakenCode","published":1,"updated":"2021-10-14T08:54:45.484Z","_id":"cktblomjs0000n4ri75drd3r9","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"post-note note-info\"><p>在爬虫过程中遇到页面中文编码乱码的问题，直接给返回值更改编码即可解决</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nres <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\nres<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'gb2312'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"post-note note-info\"><p>在爬虫过程中遇到页面中文编码乱码的问题，直接给返回值更改编码即可解决</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> requests\n\nres <span class=\"token operator\">=</span> requests<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span>\n\nres<span class=\"token punctuation\">.</span>encoding <span class=\"token operator\">=</span> <span class=\"token string\">'gb2312'</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>res<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python如何利用BeautifulSoup剔除不想要的标签","date":"2021-09-10T06:55:48.000Z","_content":"{% note info %}\n在爬虫过程中遇到页面中有部分标签不是想要的，但是又无法取下一层标签进行精确定位时，可以用BeautifulSoup中的一下方法进行剔除标签，从而达到目的\n{% endnote %}\n``` python\nfrom bs4 import BeautifulSoup\nhtml = '\n<h3>\n<small>Sep 09, 2021, 08:00 ET</small>\nKawaii Islands raises $2.4M in private token sale for its upcoming anime metaverse\n</h3>'\npage_html = BeautifulSoup(html, 'lxml')\n[s.extract() for s in page_html('small')]\n\nprint(page_html.text)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Python-Bs4-RemoveLabel.md","raw":"---\ntitle: Python如何利用BeautifulSoup剔除不想要的标签\ndate: 2021-09-10 14:55:48\ntags: [python]\ncategories: 日常问题\n---\n{% note info %}\n在爬虫过程中遇到页面中有部分标签不是想要的，但是又无法取下一层标签进行精确定位时，可以用BeautifulSoup中的一下方法进行剔除标签，从而达到目的\n{% endnote %}\n``` python\nfrom bs4 import BeautifulSoup\nhtml = '\n<h3>\n<small>Sep 09, 2021, 08:00 ET</small>\nKawaii Islands raises $2.4M in private token sale for its upcoming anime metaverse\n</h3>'\npage_html = BeautifulSoup(html, 'lxml')\n[s.extract() for s in page_html('small')]\n\nprint(page_html.text)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Python-Bs4-RemoveLabel","published":1,"updated":"2021-10-14T08:54:45.554Z","_id":"ckte0whpj0000x8u3664ca5f2","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"post-note note-info\"><p>在爬虫过程中遇到页面中有部分标签不是想要的，但是又无法取下一层标签进行精确定位时，可以用BeautifulSoup中的一下方法进行剔除标签，从而达到目的</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\nhtml <span class=\"token operator\">=</span> '\n<span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>small<span class=\"token operator\">></span>Sep <span class=\"token number\">09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> ET<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>small<span class=\"token operator\">></span>\nKawaii Islands raises $<span class=\"token number\">2.</span>4M <span class=\"token keyword\">in</span> private token sale <span class=\"token keyword\">for</span> its upcoming anime metaverse\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>'\npage_html <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> page_html<span class=\"token punctuation\">(</span><span class=\"token string\">'small'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>page_html<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"post-note note-info\"><p>在爬虫过程中遇到页面中有部分标签不是想要的，但是又无法取下一层标签进行精确定位时，可以用BeautifulSoup中的一下方法进行剔除标签，从而达到目的</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">from</span> bs4 <span class=\"token keyword\">import</span> BeautifulSoup\nhtml <span class=\"token operator\">=</span> '\n<span class=\"token operator\">&lt;</span>h3<span class=\"token operator\">></span>\n<span class=\"token operator\">&lt;</span>small<span class=\"token operator\">></span>Sep <span class=\"token number\">09</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2021</span><span class=\"token punctuation\">,</span> <span class=\"token number\">08</span><span class=\"token punctuation\">:</span><span class=\"token number\">00</span> ET<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>small<span class=\"token operator\">></span>\nKawaii Islands raises $<span class=\"token number\">2.</span>4M <span class=\"token keyword\">in</span> private token sale <span class=\"token keyword\">for</span> its upcoming anime metaverse\n<span class=\"token operator\">&lt;</span><span class=\"token operator\">/</span>h3<span class=\"token operator\">></span>'\npage_html <span class=\"token operator\">=</span> BeautifulSoup<span class=\"token punctuation\">(</span>html<span class=\"token punctuation\">,</span> <span class=\"token string\">'lxml'</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span>extract<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> s <span class=\"token keyword\">in</span> page_html<span class=\"token punctuation\">(</span><span class=\"token string\">'small'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>page_html<span class=\"token punctuation\">.</span>text<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python中使用正则去除html标签","date":"2021-09-10T10:00:37.000Z","_content":"{% note info %}\n在爬虫过程中渠道的text中包含html标签，或者想剔除某一块标签，使用正则即可将html标签完全剔除\n{% endnote %}\n``` python\nimport re\n\nhtml = '<font color=red>区块链</font>技术应用场景落地，重庆智能学生证助力大数据精准教学'\n\npattern = re.compile(r'<[^>]+>', re.S)\ntitle = pattern.sub('', html)\n\nprint(title)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","source":"_posts/Python-Re-RemoveHtml.md","raw":"---\ntitle: Python中使用正则去除html标签\ndate: 2021-09-10 18:00:37\ntags: [python]\ncategories: 日常问题\n---\n{% note info %}\n在爬虫过程中渠道的text中包含html标签，或者想剔除某一块标签，使用正则即可将html标签完全剔除\n{% endnote %}\n``` python\nimport re\n\nhtml = '<font color=red>区块链</font>技术应用场景落地，重庆智能学生证助力大数据精准教学'\n\npattern = re.compile(r'<[^>]+>', re.S)\ntitle = pattern.sub('', html)\n\nprint(title)\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)\n","slug":"Python-Re-RemoveHtml","published":1,"updated":"2021-10-14T08:54:45.314Z","_id":"ckte71e160000c0u362o1175z","comments":1,"layout":"post","photos":[],"link":"","content":"<div class=\"post-note note-info\"><p>在爬虫过程中渠道的text中包含html标签，或者想剔除某一块标签，使用正则即可将html标签完全剔除</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nhtml <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;font color=red>区块链&lt;/font>技术应用场景落地，重庆智能学生证助力大数据精准教学'</span>\n\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'&lt;[^>]+>'</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>S<span class=\"token punctuation\">)</span>\ntitle <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<div class=\"post-note note-info\"><p>在爬虫过程中渠道的text中包含html标签，或者想剔除某一块标签，使用正则即可将html标签完全剔除</p></div>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token keyword\">import</span> re\n\nhtml <span class=\"token operator\">=</span> <span class=\"token string\">'&lt;font color=red>区块链&lt;/font>技术应用场景落地，重庆智能学生证助力大数据精准教学'</span>\n\npattern <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span><span class=\"token string\">r'&lt;[^>]+>'</span><span class=\"token punctuation\">,</span> re<span class=\"token punctuation\">.</span>S<span class=\"token punctuation\">)</span>\ntitle <span class=\"token operator\">=</span> pattern<span class=\"token punctuation\">.</span>sub<span class=\"token punctuation\">(</span><span class=\"token string\">''</span><span class=\"token punctuation\">,</span> html<span class=\"token punctuation\">)</span>\n\n<span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>title<span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python程序打包成exe可执行文件(pyinstaller)","date":"2021-09-24T05:20:55.000Z","_content":"## 一、为什么要将项目打包\n我们在日常开发中，在编辑器中完成了开发后，需要使得程序能够脱离编辑器独立运行，所有的第三方依赖、资源和代码均被打包进该exe内，那我们就需要将程序打包成exe可执行文件。打包可使用的工具有很多，这次主要做pyinstaller的示例。\n## 二、安装pyinstaller\n安装命令：\n``` python\npip install pyinstaller\n```\n## 三、如何使用pyinstaller\n### 1.功能注释\n|      功能     |     注释     |\n| ---------- | ---------- |\n| -F     | 打包成一个文件      |\n| pyinstaller -F main.py   | 将main.py打包，生成main.exe文件      |\n| -D     | 打包成一个文件夹          |\n| -n   | 重新命名      |\n| pyinstaller -F main.py -n name   | 将main.py打包，生成main.exe文件      |\n| -noconsole   | 去 掉cmd命令窗口      |\n| -i   | 加入图标，图标所需要的是ico格式      |\n| pyinstaller -i index.ico -F main.py   | 将main.py打包，生成main.exe文件，并给予index.ico作为图标      |\n### 2.使用\n在当前脚本所在位置打开cmd，输入命令\n```bash\npyinstaller -F main.py\n```\n![命令输入](Python-Package/useCommand.jpg)\n当看到以下输出即为打包成功\n```bash\n12781 INFO: Building EXE from EXE-00.toc completed successfully.\n```\n打包完成后，在当前文件夹下会生成一个dist及build文件夹，在dist文件夹下就可以看到刚刚我们打包所生成的exe文件，接下来双击即可运行\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Python-Package.md","raw":"---\ntitle: Python程序打包成exe可执行文件(pyinstaller)\ndate: 2021-09-24 13:20:55\ntags: [python, 自动化测试]\ncategories: 测试相关\n---\n## 一、为什么要将项目打包\n我们在日常开发中，在编辑器中完成了开发后，需要使得程序能够脱离编辑器独立运行，所有的第三方依赖、资源和代码均被打包进该exe内，那我们就需要将程序打包成exe可执行文件。打包可使用的工具有很多，这次主要做pyinstaller的示例。\n## 二、安装pyinstaller\n安装命令：\n``` python\npip install pyinstaller\n```\n## 三、如何使用pyinstaller\n### 1.功能注释\n|      功能     |     注释     |\n| ---------- | ---------- |\n| -F     | 打包成一个文件      |\n| pyinstaller -F main.py   | 将main.py打包，生成main.exe文件      |\n| -D     | 打包成一个文件夹          |\n| -n   | 重新命名      |\n| pyinstaller -F main.py -n name   | 将main.py打包，生成main.exe文件      |\n| -noconsole   | 去 掉cmd命令窗口      |\n| -i   | 加入图标，图标所需要的是ico格式      |\n| pyinstaller -i index.ico -F main.py   | 将main.py打包，生成main.exe文件，并给予index.ico作为图标      |\n### 2.使用\n在当前脚本所在位置打开cmd，输入命令\n```bash\npyinstaller -F main.py\n```\n![命令输入](Python-Package/useCommand.jpg)\n当看到以下输出即为打包成功\n```bash\n12781 INFO: Building EXE from EXE-00.toc completed successfully.\n```\n打包完成后，在当前文件夹下会生成一个dist及build文件夹，在dist文件夹下就可以看到刚刚我们打包所生成的exe文件，接下来双击即可运行\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Python-Package","published":1,"updated":"2021-10-14T08:54:45.524Z","_id":"cktxx70dh0000ocu356v33rce","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、为什么要将项目打包\"><a href=\"#一、为什么要将项目打包\" class=\"headerlink\" title=\"一、为什么要将项目打包\"></a>一、为什么要将项目打包</h2><p>我们在日常开发中，在编辑器中完成了开发后，需要使得程序能够脱离编辑器独立运行，所有的第三方依赖、资源和代码均被打包进该exe内，那我们就需要将程序打包成exe可执行文件。打包可使用的工具有很多，这次主要做pyinstaller的示例。</p>\n<h2 id=\"二、安装pyinstaller\"><a href=\"#二、安装pyinstaller\" class=\"headerlink\" title=\"二、安装pyinstaller\"></a>二、安装pyinstaller</h2><p>安装命令：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pip install pyinstaller<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、如何使用pyinstaller\"><a href=\"#三、如何使用pyinstaller\" class=\"headerlink\" title=\"三、如何使用pyinstaller\"></a>三、如何使用pyinstaller</h2><h3 id=\"1-功能注释\"><a href=\"#1-功能注释\" class=\"headerlink\" title=\"1.功能注释\"></a>1.功能注释</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-F</td>\n<td>打包成一个文件</td>\n</tr>\n<tr>\n<td>pyinstaller -F main.py</td>\n<td>将main.py打包，生成main.exe文件</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>打包成一个文件夹</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>重新命名</td>\n</tr>\n<tr>\n<td>pyinstaller -F main.py -n name</td>\n<td>将main.py打包，生成main.exe文件</td>\n</tr>\n<tr>\n<td>-noconsole</td>\n<td>去 掉cmd命令窗口</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>加入图标，图标所需要的是ico格式</td>\n</tr>\n<tr>\n<td>pyinstaller -i index.ico -F main.py</td>\n<td>将main.py打包，生成main.exe文件，并给予index.ico作为图标</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h3><p>在当前脚本所在位置打开cmd，输入命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pyinstaller -F main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/09/24/Python-Package/useCommand.jpg\" alt=\"命令输入\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/24/Python-Package/useCommand.jpg\" class=\"lozad post-image\"><br>当看到以下输出即为打包成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">12781</span> INFO: Building EXE from EXE-00.toc completed successfully.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包完成后，在当前文件夹下会生成一个dist及build文件夹，在dist文件夹下就可以看到刚刚我们打包所生成的exe文件，接下来双击即可运行<br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、为什么要将项目打包\"><a href=\"#一、为什么要将项目打包\" class=\"headerlink\" title=\"一、为什么要将项目打包\"></a>一、为什么要将项目打包</h2><p>我们在日常开发中，在编辑器中完成了开发后，需要使得程序能够脱离编辑器独立运行，所有的第三方依赖、资源和代码均被打包进该exe内，那我们就需要将程序打包成exe可执行文件。打包可使用的工具有很多，这次主要做pyinstaller的示例。</p>\n<h2 id=\"二、安装pyinstaller\"><a href=\"#二、安装pyinstaller\" class=\"headerlink\" title=\"二、安装pyinstaller\"></a>二、安装pyinstaller</h2><p>安装命令：</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\">pip install pyinstaller<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、如何使用pyinstaller\"><a href=\"#三、如何使用pyinstaller\" class=\"headerlink\" title=\"三、如何使用pyinstaller\"></a>三、如何使用pyinstaller</h2><h3 id=\"1-功能注释\"><a href=\"#1-功能注释\" class=\"headerlink\" title=\"1.功能注释\"></a>1.功能注释</h3><table>\n<thead>\n<tr>\n<th>功能</th>\n<th>注释</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>-F</td>\n<td>打包成一个文件</td>\n</tr>\n<tr>\n<td>pyinstaller -F main.py</td>\n<td>将main.py打包，生成main.exe文件</td>\n</tr>\n<tr>\n<td>-D</td>\n<td>打包成一个文件夹</td>\n</tr>\n<tr>\n<td>-n</td>\n<td>重新命名</td>\n</tr>\n<tr>\n<td>pyinstaller -F main.py -n name</td>\n<td>将main.py打包，生成main.exe文件</td>\n</tr>\n<tr>\n<td>-noconsole</td>\n<td>去 掉cmd命令窗口</td>\n</tr>\n<tr>\n<td>-i</td>\n<td>加入图标，图标所需要的是ico格式</td>\n</tr>\n<tr>\n<td>pyinstaller -i index.ico -F main.py</td>\n<td>将main.py打包，生成main.exe文件，并给予index.ico作为图标</td>\n</tr>\n</tbody></table>\n<h3 id=\"2-使用\"><a href=\"#2-使用\" class=\"headerlink\" title=\"2.使用\"></a>2.使用</h3><p>在当前脚本所在位置打开cmd，输入命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pyinstaller -F main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/09/24/Python-Package/useCommand.jpg\" alt=\"命令输入\"><br>当看到以下输出即为打包成功</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token number\">12781</span> INFO: Building EXE from EXE-00.toc completed successfully.<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>打包完成后，在当前文件夹下会生成一个dist及build文件夹，在dist文件夹下就可以看到刚刚我们打包所生成的exe文件，接下来双击即可运行<br><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Linux下安装python3","date":"2021-09-28T07:15:25.000Z","_content":"在Linux服务器中，一般都会自带python，版本为2.X，但是由于python不断迭代更新，我们用到的版本大多为3.X，故今天拿到一台新的服务器，准备在服务器中再安装一个python3.7.3版本。\n![查看自带python版本](Linux-Python-Install/Linux-initPython.jpg)\n{% note warning %}\n尽量不要删除自带2.X的python，因为可能会有其他地方用到了，删掉了可能会导致其他问题难以解决。\n{% endnote %}\n## 一、下载安装包\n本次安装的python版本为<font color=red> 3.7.3 </font>。首先，我们需要下载python 3.7.3版本的安装包\n### 1、在Linux中通过<font color=red> wget </font>方式来下载：\n#### 1.1、在Linux中新建一个存放安装包的文件夹\n#### 1.2、然后进入该目录再使用<font color=red> wget </font>命令进行下载\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n```\n### 2、在Windows下打开 [python下载链接(后缀tgz)](https://www.python.org/ftp/python/) 来进行下载：\n![win中下载taz后缀安装包](Linux-Python-Install/Linux-install-win.jpg)\n#### 2.1、下载完成后将安装包放入新建的文件夹中即可\n## 二、安装\n### 1、进入安装包所在目录，解压压缩包\n```bash\ntar -zxvf Python-3.7.3.tgz\n```\n### 2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\n### 3、进入安装路径后，需要指定安装目录，输入以下命令\n```bash\n./configure --prefix=/usr/python3.7.3\n```\n### 4. 完成指定后，进入安装目录下，进行编译\n```bash\n# 进入安装目录路径\ncd python3.7.3\n# 编译\nmake\n```\n### 5. 编译完成后，进行安装\n```bash\nmake install\n```\n![安装成功](Linux-Python-Install/Linux-pythonInstall.jpg)\n{% note warning %}\n因为我使用的是<font color=red> centOS 7 </font>，在<font color=red> centOS </font>中直接使用<font color=red> make install </font>命令会报错<font color=red> No module named '_ctypes' </font>，解决方案：安装之前我们需要先使用命令<font color=blue> yum install libffi-devel -y </font>安装完成之后再进行安装python即可成功\n{% endnote %}\n### 6、配置系统环境变量\n安装完python3后我们在随意目录下输入命令:\n```bash\npython -V\n```\n会发现，指向的依旧是2.X的版本，但我们希望可以直接使用的是python 3.7.3版本，所以需要将path添加到环境变量中去\n修改/etc/profile系统环境变量配置文件，添加安装路径下的bin目录\n```bash\n# 使用vim命令，打开etc目录下的profile文件\nvim /etc/profile\n# 在文件首行输入以下内容\nPATH=/usr/python3.7.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n```\n![配置环境变量](Linux-Python-Install/Linux-python-Path.jpg)\n保存后，使用以下命令重载配置文件：\n```bash\nsource /etc/profile\n```\n## 三、验证安装\n输入以下命令进行验证：\n```bash\npython3 -V\npip3 -V\n```\n![安装完成](Linux-Python-Install/Linux-Python-success.jpg)\n{% note success %}\n以上即安装全过程，全程顺畅无阻，完美安装~\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Linux-Python-Install.md","raw":"---\ntitle: Linux下安装python3\ndate: 2021-09-28 15:15:25\ntags: [Linux, python]\ncategories: 服务器\n---\n在Linux服务器中，一般都会自带python，版本为2.X，但是由于python不断迭代更新，我们用到的版本大多为3.X，故今天拿到一台新的服务器，准备在服务器中再安装一个python3.7.3版本。\n![查看自带python版本](Linux-Python-Install/Linux-initPython.jpg)\n{% note warning %}\n尽量不要删除自带2.X的python，因为可能会有其他地方用到了，删掉了可能会导致其他问题难以解决。\n{% endnote %}\n## 一、下载安装包\n本次安装的python版本为<font color=red> 3.7.3 </font>。首先，我们需要下载python 3.7.3版本的安装包\n### 1、在Linux中通过<font color=red> wget </font>方式来下载：\n#### 1.1、在Linux中新建一个存放安装包的文件夹\n#### 1.2、然后进入该目录再使用<font color=red> wget </font>命令进行下载\n```bash\nwget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n```\n### 2、在Windows下打开 [python下载链接(后缀tgz)](https://www.python.org/ftp/python/) 来进行下载：\n![win中下载taz后缀安装包](Linux-Python-Install/Linux-install-win.jpg)\n#### 2.1、下载完成后将安装包放入新建的文件夹中即可\n## 二、安装\n### 1、进入安装包所在目录，解压压缩包\n```bash\ntar -zxvf Python-3.7.3.tgz\n```\n### 2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\n### 3、进入安装路径后，需要指定安装目录，输入以下命令\n```bash\n./configure --prefix=/usr/python3.7.3\n```\n### 4. 完成指定后，进入安装目录下，进行编译\n```bash\n# 进入安装目录路径\ncd python3.7.3\n# 编译\nmake\n```\n### 5. 编译完成后，进行安装\n```bash\nmake install\n```\n![安装成功](Linux-Python-Install/Linux-pythonInstall.jpg)\n{% note warning %}\n因为我使用的是<font color=red> centOS 7 </font>，在<font color=red> centOS </font>中直接使用<font color=red> make install </font>命令会报错<font color=red> No module named '_ctypes' </font>，解决方案：安装之前我们需要先使用命令<font color=blue> yum install libffi-devel -y </font>安装完成之后再进行安装python即可成功\n{% endnote %}\n### 6、配置系统环境变量\n安装完python3后我们在随意目录下输入命令:\n```bash\npython -V\n```\n会发现，指向的依旧是2.X的版本，但我们希望可以直接使用的是python 3.7.3版本，所以需要将path添加到环境变量中去\n修改/etc/profile系统环境变量配置文件，添加安装路径下的bin目录\n```bash\n# 使用vim命令，打开etc目录下的profile文件\nvim /etc/profile\n# 在文件首行输入以下内容\nPATH=/usr/python3.7.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n```\n![配置环境变量](Linux-Python-Install/Linux-python-Path.jpg)\n保存后，使用以下命令重载配置文件：\n```bash\nsource /etc/profile\n```\n## 三、验证安装\n输入以下命令进行验证：\n```bash\npython3 -V\npip3 -V\n```\n![安装完成](Linux-Python-Install/Linux-Python-success.jpg)\n{% note success %}\n以上即安装全过程，全程顺畅无阻，完美安装~\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Linux-Python-Install","published":1,"updated":"2021-10-14T08:54:45.511Z","_id":"cku3rc2sy0000g0u3gwjg8m20","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在Linux服务器中，一般都会自带python，版本为2.X，但是由于python不断迭代更新，我们用到的版本大多为3.X，故今天拿到一台新的服务器，准备在服务器中再安装一个python3.7.3版本。<br><img src=\"/2021/09/28/Linux-Python-Install/Linux-initPython.jpg\" alt=\"查看自带python版本\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/28/Linux-Python-Install/Linux-initPython.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-warning\"><p>尽量不要删除自带2.X的python，因为可能会有其他地方用到了，删掉了可能会导致其他问题难以解决。</p></div>\n<h2 id=\"一、下载安装包\"><a href=\"#一、下载安装包\" class=\"headerlink\" title=\"一、下载安装包\"></a>一、下载安装包</h2><p>本次安装的python版本为<font color=\"red\"> 3.7.3 </font>。首先，我们需要下载python 3.7.3版本的安装包</p>\n<h3 id=\"1、在Linux中通过-wget-方式来下载：\"><a href=\"#1、在Linux中通过-wget-方式来下载：\" class=\"headerlink\" title=\"1、在Linux中通过 wget 方式来下载：\"></a>1、在Linux中通过<font color=\"red\"> wget </font>方式来下载：</h3><h4 id=\"1-1、在Linux中新建一个存放安装包的文件夹\"><a href=\"#1-1、在Linux中新建一个存放安装包的文件夹\" class=\"headerlink\" title=\"1.1、在Linux中新建一个存放安装包的文件夹\"></a>1.1、在Linux中新建一个存放安装包的文件夹</h4><h4 id=\"1-2、然后进入该目录再使用-wget-命令进行下载\"><a href=\"#1-2、然后进入该目录再使用-wget-命令进行下载\" class=\"headerlink\" title=\"1.2、然后进入该目录再使用 wget 命令进行下载\"></a>1.2、然后进入该目录再使用<font color=\"red\"> wget </font>命令进行下载</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、在Windows下打开-python下载链接-后缀tgz-来进行下载：\"><a href=\"#2、在Windows下打开-python下载链接-后缀tgz-来进行下载：\" class=\"headerlink\" title=\"2、在Windows下打开 python下载链接(后缀tgz) 来进行下载：\"></a>2、在Windows下打开 <a href=\"https://www.python.org/ftp/python/\">python下载链接(后缀tgz)</a> 来进行下载：</h3><p><img src=\"/2021/09/28/Linux-Python-Install/Linux-install-win.jpg\" alt=\"win中下载taz后缀安装包\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/28/Linux-Python-Install/Linux-install-win.jpg\" class=\"lozad post-image\"></p>\n<h4 id=\"2-1、下载完成后将安装包放入新建的文件夹中即可\"><a href=\"#2-1、下载完成后将安装包放入新建的文件夹中即可\" class=\"headerlink\" title=\"2.1、下载完成后将安装包放入新建的文件夹中即可\"></a>2.1、下载完成后将安装包放入新建的文件夹中即可</h4><h2 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h2><h3 id=\"1、进入安装包所在目录，解压压缩包\"><a href=\"#1、进入安装包所在目录，解压压缩包\" class=\"headerlink\" title=\"1、进入安装包所在目录，解压压缩包\"></a>1、进入安装包所在目录，解压压缩包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf Python-3.7.3.tgz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\"><a href=\"#2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\" class=\"headerlink\" title=\"2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\"></a>2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可</h3><h3 id=\"3、进入安装路径后，需要指定安装目录，输入以下命令\"><a href=\"#3、进入安装路径后，需要指定安装目录，输入以下命令\" class=\"headerlink\" title=\"3、进入安装路径后，需要指定安装目录，输入以下命令\"></a>3、进入安装路径后，需要指定安装目录，输入以下命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --prefix<span class=\"token operator\">=</span>/usr/python3.7.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-完成指定后，进入安装目录下，进行编译\"><a href=\"#4-完成指定后，进入安装目录下，进行编译\" class=\"headerlink\" title=\"4. 完成指定后，进入安装目录下，进行编译\"></a>4. 完成指定后，进入安装目录下，进行编译</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入安装目录路径</span>\n<span class=\"token builtin class-name\">cd</span> python3.7.3\n<span class=\"token comment\"># 编译</span>\n<span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-编译完成后，进行安装\"><a href=\"#5-编译完成后，进行安装\" class=\"headerlink\" title=\"5. 编译完成后，进行安装\"></a>5. 编译完成后，进行安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-pythonInstall.jpg\" alt=\"安装成功\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/28/Linux-Python-Install/Linux-pythonInstall.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-warning\"><p>因为我使用的是<font color=\"red\"> centOS 7 </font>，在<font color=\"red\"> centOS </font>中直接使用<font color=\"red\"> make install </font>命令会报错<font color=\"red\"> No module named ‘_ctypes’ </font>，解决方案：安装之前我们需要先使用命令<font color=\"blue\"> yum install libffi-devel -y </font>安装完成之后再进行安装python即可成功</p></div>\n<h3 id=\"6、配置系统环境变量\"><a href=\"#6、配置系统环境变量\" class=\"headerlink\" title=\"6、配置系统环境变量\"></a>6、配置系统环境变量</h3><p>安装完python3后我们在随意目录下输入命令:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会发现，指向的依旧是2.X的版本，但我们希望可以直接使用的是python 3.7.3版本，所以需要将path添加到环境变量中去<br>修改/etc/profile系统环境变量配置文件，添加安装路径下的bin目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用vim命令，打开etc目录下的profile文件</span>\n<span class=\"token function\">vim</span> /etc/profile\n<span class=\"token comment\"># 在文件首行输入以下内容</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/python3.7.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-python-Path.jpg\" alt=\"配置环境变量\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/28/Linux-Python-Install/Linux-python-Path.jpg\" class=\"lozad post-image\"><br>保存后，使用以下命令重载配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、验证安装\"><a href=\"#三、验证安装\" class=\"headerlink\" title=\"三、验证安装\"></a>三、验证安装</h2><p>输入以下命令进行验证：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 -V\npip3 -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-Python-success.jpg\" alt=\"安装完成\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/09/28/Linux-Python-Install/Linux-Python-success.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-success\"><p>以上即安装全过程，全程顺畅无阻，完美安装~</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在Linux服务器中，一般都会自带python，版本为2.X，但是由于python不断迭代更新，我们用到的版本大多为3.X，故今天拿到一台新的服务器，准备在服务器中再安装一个python3.7.3版本。<br><img src=\"/2021/09/28/Linux-Python-Install/Linux-initPython.jpg\" alt=\"查看自带python版本\"></p>\n<div class=\"post-note note-warning\"><p>尽量不要删除自带2.X的python，因为可能会有其他地方用到了，删掉了可能会导致其他问题难以解决。</p></div>\n<h2 id=\"一、下载安装包\"><a href=\"#一、下载安装包\" class=\"headerlink\" title=\"一、下载安装包\"></a>一、下载安装包</h2><p>本次安装的python版本为<font color=\"red\"> 3.7.3 </font>。首先，我们需要下载python 3.7.3版本的安装包</p>\n<h3 id=\"1、在Linux中通过-wget-方式来下载：\"><a href=\"#1、在Linux中通过-wget-方式来下载：\" class=\"headerlink\" title=\"1、在Linux中通过 wget 方式来下载：\"></a>1、在Linux中通过<font color=\"red\"> wget </font>方式来下载：</h3><h4 id=\"1-1、在Linux中新建一个存放安装包的文件夹\"><a href=\"#1-1、在Linux中新建一个存放安装包的文件夹\" class=\"headerlink\" title=\"1.1、在Linux中新建一个存放安装包的文件夹\"></a>1.1、在Linux中新建一个存放安装包的文件夹</h4><h4 id=\"1-2、然后进入该目录再使用-wget-命令进行下载\"><a href=\"#1-2、然后进入该目录再使用-wget-命令进行下载\" class=\"headerlink\" title=\"1.2、然后进入该目录再使用 wget 命令进行下载\"></a>1.2、然后进入该目录再使用<font color=\"red\"> wget </font>命令进行下载</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">wget</span> https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、在Windows下打开-python下载链接-后缀tgz-来进行下载：\"><a href=\"#2、在Windows下打开-python下载链接-后缀tgz-来进行下载：\" class=\"headerlink\" title=\"2、在Windows下打开 python下载链接(后缀tgz) 来进行下载：\"></a>2、在Windows下打开 <a href=\"https://www.python.org/ftp/python/\">python下载链接(后缀tgz)</a> 来进行下载：</h3><p><img src=\"/2021/09/28/Linux-Python-Install/Linux-install-win.jpg\" alt=\"win中下载taz后缀安装包\"></p>\n<h4 id=\"2-1、下载完成后将安装包放入新建的文件夹中即可\"><a href=\"#2-1、下载完成后将安装包放入新建的文件夹中即可\" class=\"headerlink\" title=\"2.1、下载完成后将安装包放入新建的文件夹中即可\"></a>2.1、下载完成后将安装包放入新建的文件夹中即可</h4><h2 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h2><h3 id=\"1、进入安装包所在目录，解压压缩包\"><a href=\"#1、进入安装包所在目录，解压压缩包\" class=\"headerlink\" title=\"1、进入安装包所在目录，解压压缩包\"></a>1、进入安装包所在目录，解压压缩包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> -zxvf Python-3.7.3.tgz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\"><a href=\"#2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\" class=\"headerlink\" title=\"2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可\"></a>2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可</h3><h3 id=\"3、进入安装路径后，需要指定安装目录，输入以下命令\"><a href=\"#3、进入安装路径后，需要指定安装目录，输入以下命令\" class=\"headerlink\" title=\"3、进入安装路径后，需要指定安装目录，输入以下命令\"></a>3、进入安装路径后，需要指定安装目录，输入以下命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./configure --prefix<span class=\"token operator\">=</span>/usr/python3.7.3<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-完成指定后，进入安装目录下，进行编译\"><a href=\"#4-完成指定后，进入安装目录下，进行编译\" class=\"headerlink\" title=\"4. 完成指定后，进入安装目录下，进行编译\"></a>4. 完成指定后，进入安装目录下，进行编译</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 进入安装目录路径</span>\n<span class=\"token builtin class-name\">cd</span> python3.7.3\n<span class=\"token comment\"># 编译</span>\n<span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"5-编译完成后，进行安装\"><a href=\"#5-编译完成后，进行安装\" class=\"headerlink\" title=\"5. 编译完成后，进行安装\"></a>5. 编译完成后，进行安装</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-pythonInstall.jpg\" alt=\"安装成功\"></p>\n<div class=\"post-note note-warning\"><p>因为我使用的是<font color=\"red\"> centOS 7 </font>，在<font color=\"red\"> centOS </font>中直接使用<font color=\"red\"> make install </font>命令会报错<font color=\"red\"> No module named ‘_ctypes’ </font>，解决方案：安装之前我们需要先使用命令<font color=\"blue\"> yum install libffi-devel -y </font>安装完成之后再进行安装python即可成功</p></div>\n<h3 id=\"6、配置系统环境变量\"><a href=\"#6、配置系统环境变量\" class=\"headerlink\" title=\"6、配置系统环境变量\"></a>6、配置系统环境变量</h3><p>安装完python3后我们在随意目录下输入命令:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会发现，指向的依旧是2.X的版本，但我们希望可以直接使用的是python 3.7.3版本，所以需要将path添加到环境变量中去<br>修改/etc/profile系统环境变量配置文件，添加安装路径下的bin目录</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># 使用vim命令，打开etc目录下的profile文件</span>\n<span class=\"token function\">vim</span> /etc/profile\n<span class=\"token comment\"># 在文件首行输入以下内容</span>\n<span class=\"token assign-left variable\"><span class=\"token environment constant\">PATH</span></span><span class=\"token operator\">=</span>/usr/python3.7.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-python-Path.jpg\" alt=\"配置环境变量\"><br>保存后，使用以下命令重载配置文件：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token builtin class-name\">source</span> /etc/profile<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、验证安装\"><a href=\"#三、验证安装\" class=\"headerlink\" title=\"三、验证安装\"></a>三、验证安装</h2><p>输入以下命令进行验证：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">python3 -V\npip3 -V<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/09/28/Linux-Python-Install/Linux-Python-success.jpg\" alt=\"安装完成\"></p>\n<div class=\"post-note note-success\"><p>以上即安装全过程，全程顺畅无阻，完美安装~</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"在Linux下安装配置Nginx","date":"2021-10-09T06:11:26.000Z","_content":"在拥有服务器后，需要将程序部署到服务器中，然后通过访问服务器地址加端口来展示网站，那就需要使用到nginx\n## 一、下载\n打开 [Nginx官方下载链接(后缀tgz)](http://nginx.org/download/) 进行下载，当前最新的1.9.9本，下载完成后一般将文件放置于 /usr/local/目录下\n\n## 二、安装\n\n### 1. 解压文件\n使用以下命令进行解压，解压完成后可看到local目录下多了一个nginx-1.9.9的文件夹\n```bash\ntar zxvf nginx-1.9.9.tar.gz\n```\n![解压成功](Linux-Nginx-install/Linux_nginx_download.jpg)\n\n### 2. 编译\n解压完成后，进入解压后的文件夹内，使用configure命令检查安装环境\n```bash\n# –prefix指定nginx的安装目录，默认路径就是/usr/local/nginx\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n```\n以上操作完成后，输入以下命令进行编译\n```bash\nmake\n```\n编译完成后，输入以下命令安装编译程序\n```bash\nmake install\n```\n以上步骤全部完成后，进入 <font color=\"red\">/usr/local/nginx/sbin</font> 目录下查看是否存在nginx，如果存在即安装成功\n![安装成功](Linux-Nginx-install/Linux_nginx_install.png)\n\n## 三、启动Nginx\n### 1.启动\n进入 <font color=\"red\">/usr/local/nginx/sbin/</font> 目录下，输入以下命令即可\n```bash\n./nginx\n```\n### 2. 检查启动结果\n在浏览器中输入ip地址，查看页面，如见到以下页面即安装成功(nginx默认监听的是80端口)\n![安装成功](Linux-Nginx-install/Linux_nginx_check.png)\n{% note success %}\n以上操作完成后，及安装成功\n{% endnote %}\n## 四、Nginx配置详解\n打开 <font color=\"red\">/usr/local/nginx/conf/nginx.conf</font> 文件进行编辑\n```bash\n#user  nobody;\nworker_processes  1;# 工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。\n\n# 错误日志存放路径\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n# nginx进程pid存放路径\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;# 工作进程的最大连接数量\n}\n\n\nhttp {\n    include       mime.types;# 指定mime类型，由mime.type来定义\n    default_type  application/octet-stream;\n# 日志格式设置\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    \n    # 用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径\n    #access_log  logs/access.log  main;\n\n    # 指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。\n    # 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。\n    sendfile        on;\n    \n    # 此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用\n    #tcp_nopush     on;\n    \n    # keepalive超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    # 开启gzip压缩服务\n    #gzip  on;\n    \n    # 虚拟主机\n    server {\n        listen       80;# 配置监听端口号\n        server_name  localhost;# 配置访问域名，域名可以有多个，用空格隔开\n        \n        # 字符集设置\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /usr/demo; # 项目路径\n            index  login.html; # 需要访问的html文件名称\n        }\n        \n        # 错误跳转页\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n{% note success %}\n编辑完成后，重启Nginx即可生效\n{% endnote %}\n## 五、Nginx基础命令\n```bash\n./nginx # 启动nginx\n./nginx -s stop # 先查出nginx进程id再使用kill命令强制杀掉进程\n./nginx -s quit # 待nginx进程处理任务完毕进行停止\n./nginx -s reload # 重启nginx\n```\n{% note success %}\n每次编辑完nginx.conf文件后都必须重启nginx\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Linux-Nginx-install.md","raw":"---\ntitle: 在Linux下安装配置Nginx\ndate: 2021-10-09 14:11:26\ntags: [Linux, 部署]\ncategories: 服务器\n---\n在拥有服务器后，需要将程序部署到服务器中，然后通过访问服务器地址加端口来展示网站，那就需要使用到nginx\n## 一、下载\n打开 [Nginx官方下载链接(后缀tgz)](http://nginx.org/download/) 进行下载，当前最新的1.9.9本，下载完成后一般将文件放置于 /usr/local/目录下\n\n## 二、安装\n\n### 1. 解压文件\n使用以下命令进行解压，解压完成后可看到local目录下多了一个nginx-1.9.9的文件夹\n```bash\ntar zxvf nginx-1.9.9.tar.gz\n```\n![解压成功](Linux-Nginx-install/Linux_nginx_download.jpg)\n\n### 2. 编译\n解压完成后，进入解压后的文件夹内，使用configure命令检查安装环境\n```bash\n# –prefix指定nginx的安装目录，默认路径就是/usr/local/nginx\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n```\n以上操作完成后，输入以下命令进行编译\n```bash\nmake\n```\n编译完成后，输入以下命令安装编译程序\n```bash\nmake install\n```\n以上步骤全部完成后，进入 <font color=\"red\">/usr/local/nginx/sbin</font> 目录下查看是否存在nginx，如果存在即安装成功\n![安装成功](Linux-Nginx-install/Linux_nginx_install.png)\n\n## 三、启动Nginx\n### 1.启动\n进入 <font color=\"red\">/usr/local/nginx/sbin/</font> 目录下，输入以下命令即可\n```bash\n./nginx\n```\n### 2. 检查启动结果\n在浏览器中输入ip地址，查看页面，如见到以下页面即安装成功(nginx默认监听的是80端口)\n![安装成功](Linux-Nginx-install/Linux_nginx_check.png)\n{% note success %}\n以上操作完成后，及安装成功\n{% endnote %}\n## 四、Nginx配置详解\n打开 <font color=\"red\">/usr/local/nginx/conf/nginx.conf</font> 文件进行编辑\n```bash\n#user  nobody;\nworker_processes  1;# 工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。\n\n# 错误日志存放路径\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n# nginx进程pid存放路径\n#pid        logs/nginx.pid;\n\n\nevents {\n    worker_connections  1024;# 工作进程的最大连接数量\n}\n\n\nhttp {\n    include       mime.types;# 指定mime类型，由mime.type来定义\n    default_type  application/octet-stream;\n# 日志格式设置\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    \n    # 用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径\n    #access_log  logs/access.log  main;\n\n    # 指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。\n    # 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。\n    sendfile        on;\n    \n    # 此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用\n    #tcp_nopush     on;\n    \n    # keepalive超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    # 开启gzip压缩服务\n    #gzip  on;\n    \n    # 虚拟主机\n    server {\n        listen       80;# 配置监听端口号\n        server_name  localhost;# 配置访问域名，域名可以有多个，用空格隔开\n        \n        # 字符集设置\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / {\n            root   /usr/demo; # 项目路径\n            index  login.html; # 需要访问的html文件名称\n        }\n        \n        # 错误跳转页\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html {\n            root   html;\n        }\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ {\n        #    proxy_pass   http://127.0.0.1;\n        #}\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ {\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #}\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht {\n        #    deny  all;\n        #}\n    }\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server {\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n\n    # HTTPS server\n    #\n    #server {\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / {\n    #        root   html;\n    #        index  index.html index.htm;\n    #    }\n    #}\n\n}\n```\n{% note success %}\n编辑完成后，重启Nginx即可生效\n{% endnote %}\n## 五、Nginx基础命令\n```bash\n./nginx # 启动nginx\n./nginx -s stop # 先查出nginx进程id再使用kill命令强制杀掉进程\n./nginx -s quit # 待nginx进程处理任务完毕进行停止\n./nginx -s reload # 重启nginx\n```\n{% note success %}\n每次编辑完nginx.conf文件后都必须重启nginx\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Linux-Nginx-install","published":1,"updated":"2021-10-14T08:54:45.544Z","_id":"ckujgfm630000ewu3bczdevfb","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在拥有服务器后，需要将程序部署到服务器中，然后通过访问服务器地址加端口来展示网站，那就需要使用到nginx</p>\n<h2 id=\"一、下载\"><a href=\"#一、下载\" class=\"headerlink\" title=\"一、下载\"></a>一、下载</h2><p>打开 <a href=\"http://nginx.org/download/\">Nginx官方下载链接(后缀tgz)</a> 进行下载，当前最新的1.9.9本，下载完成后一般将文件放置于 /usr/local/目录下</p>\n<h2 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h2><h3 id=\"1-解压文件\"><a href=\"#1-解压文件\" class=\"headerlink\" title=\"1. 解压文件\"></a>1. 解压文件</h3><p>使用以下命令进行解压，解压完成后可看到local目录下多了一个nginx-1.9.9的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> zxvf nginx-1.9.9.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_download.jpg\" alt=\"解压成功\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_download.jpg\" class=\"lozad post-image\"></p>\n<h3 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h3><p>解压完成后，进入解压后的文件夹内，使用configure命令检查安装环境</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># –prefix指定nginx的安装目录，默认路径就是/usr/local/nginx</span>\n./configure --prefix<span class=\"token operator\">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>以上操作完成后，输入以下命令进行编译</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编译完成后，输入以下命令安装编译程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>以上步骤全部完成后，进入 <font color=\"red\">/usr/local/nginx/sbin</font> 目录下查看是否存在nginx，如果存在即安装成功<br><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_install.png\" alt=\"安装成功\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_install.png\" class=\"lozad post-image\"></p>\n<h2 id=\"三、启动Nginx\"><a href=\"#三、启动Nginx\" class=\"headerlink\" title=\"三、启动Nginx\"></a>三、启动Nginx</h2><h3 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h3><p>进入 <font color=\"red\">/usr/local/nginx/sbin/</font> 目录下，输入以下命令即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-检查启动结果\"><a href=\"#2-检查启动结果\" class=\"headerlink\" title=\"2. 检查启动结果\"></a>2. 检查启动结果</h3><p>在浏览器中输入ip地址，查看页面，如见到以下页面即安装成功(nginx默认监听的是80端口)<br><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_check.png\" alt=\"安装成功\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_check.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-success\"><p>以上操作完成后，及安装成功</p></div>\n<h2 id=\"四、Nginx配置详解\"><a href=\"#四、Nginx配置详解\" class=\"headerlink\" title=\"四、Nginx配置详解\"></a>四、Nginx配置详解</h2><p>打开 <font color=\"red\">/usr/local/nginx/conf/nginx.conf</font> 文件进行编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#user  nobody;</span>\nworker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。</span>\n\n<span class=\"token comment\"># 错误日志存放路径</span>\n<span class=\"token comment\">#error_log  logs/error.log;</span>\n<span class=\"token comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"token comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"token comment\"># nginx进程pid存放路径</span>\n<span class=\"token comment\">#pid        logs/nginx.pid;</span>\n\n\nevents <span class=\"token punctuation\">&#123;</span>\n    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 工作进程的最大连接数量</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nhttp <span class=\"token punctuation\">&#123;</span>\n    include       mime.types<span class=\"token punctuation\">;</span><span class=\"token comment\"># 指定mime类型，由mime.type来定义</span>\n    default_type  application/octet-stream<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 日志格式设置</span>\n    <span class=\"token comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n    <span class=\"token comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span>\n    <span class=\"token comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span>\n    \n    <span class=\"token comment\"># 用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径</span>\n    <span class=\"token comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"token comment\"># 指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。</span>\n    <span class=\"token comment\"># 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。</span>\n    sendfile        on<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用</span>\n    <span class=\"token comment\">#tcp_nopush     on;</span>\n    \n    <span class=\"token comment\"># keepalive超时时间</span>\n    <span class=\"token comment\">#keepalive_timeout  0;</span>\n    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 开启gzip压缩服务</span>\n    <span class=\"token comment\">#gzip  on;</span>\n    \n    <span class=\"token comment\"># 虚拟主机</span>\n    server <span class=\"token punctuation\">&#123;</span>\n        listen       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 配置监听端口号</span>\n        server_name  localhost<span class=\"token punctuation\">;</span><span class=\"token comment\"># 配置访问域名，域名可以有多个，用空格隔开</span>\n        \n        <span class=\"token comment\"># 字符集设置</span>\n        <span class=\"token comment\">#charset koi8-r;</span>\n\n        <span class=\"token comment\">#access_log  logs/host.access.log  main;</span>\n\n        location / <span class=\"token punctuation\">&#123;</span>\n            root   /usr/demo<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 项目路径</span>\n            index  login.html<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 需要访问的html文件名称</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token comment\"># 错误跳转页</span>\n        <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"token comment\">#</span>\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n            root   html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    root           html;</span>\n        <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"token comment\">#    include        fastcgi_params;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n        <span class=\"token comment\"># concurs with nginx's one</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n        <span class=\"token comment\">#    deny  all;</span>\n        <span class=\"token comment\">#&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       8000;</span>\n    <span class=\"token comment\">#    listen       somename:8080;</span>\n    <span class=\"token comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n\n    <span class=\"token comment\"># HTTPS server</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       443 ssl;</span>\n    <span class=\"token comment\">#    server_name  localhost;</span>\n\n    <span class=\"token comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"token comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"token comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"token comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"token comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"token comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>编辑完成后，重启Nginx即可生效</p></div>\n<h2 id=\"五、Nginx基础命令\"><a href=\"#五、Nginx基础命令\" class=\"headerlink\" title=\"五、Nginx基础命令\"></a>五、Nginx基础命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./nginx <span class=\"token comment\"># 启动nginx</span>\n./nginx -s stop <span class=\"token comment\"># 先查出nginx进程id再使用kill命令强制杀掉进程</span>\n./nginx -s quit <span class=\"token comment\"># 待nginx进程处理任务完毕进行停止</span>\n./nginx -s reload <span class=\"token comment\"># 重启nginx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>每次编辑完nginx.conf文件后都必须重启nginx</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在拥有服务器后，需要将程序部署到服务器中，然后通过访问服务器地址加端口来展示网站，那就需要使用到nginx</p>\n<h2 id=\"一、下载\"><a href=\"#一、下载\" class=\"headerlink\" title=\"一、下载\"></a>一、下载</h2><p>打开 <a href=\"http://nginx.org/download/\">Nginx官方下载链接(后缀tgz)</a> 进行下载，当前最新的1.9.9本，下载完成后一般将文件放置于 /usr/local/目录下</p>\n<h2 id=\"二、安装\"><a href=\"#二、安装\" class=\"headerlink\" title=\"二、安装\"></a>二、安装</h2><h3 id=\"1-解压文件\"><a href=\"#1-解压文件\" class=\"headerlink\" title=\"1. 解压文件\"></a>1. 解压文件</h3><p>使用以下命令进行解压，解压完成后可看到local目录下多了一个nginx-1.9.9的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">tar</span> zxvf nginx-1.9.9.tar.gz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_download.jpg\" alt=\"解压成功\"></p>\n<h3 id=\"2-编译\"><a href=\"#2-编译\" class=\"headerlink\" title=\"2. 编译\"></a>2. 编译</h3><p>解压完成后，进入解压后的文件夹内，使用configure命令检查安装环境</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\"># –prefix指定nginx的安装目录，默认路径就是/usr/local/nginx</span>\n./configure --prefix<span class=\"token operator\">=</span>/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>以上操作完成后，输入以下命令进行编译</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>编译完成后，输入以下命令安装编译程序</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">make</span> <span class=\"token function\">install</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>以上步骤全部完成后，进入 <font color=\"red\">/usr/local/nginx/sbin</font> 目录下查看是否存在nginx，如果存在即安装成功<br><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_install.png\" alt=\"安装成功\"></p>\n<h2 id=\"三、启动Nginx\"><a href=\"#三、启动Nginx\" class=\"headerlink\" title=\"三、启动Nginx\"></a>三、启动Nginx</h2><h3 id=\"1-启动\"><a href=\"#1-启动\" class=\"headerlink\" title=\"1.启动\"></a>1.启动</h3><p>进入 <font color=\"red\">/usr/local/nginx/sbin/</font> 目录下，输入以下命令即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./nginx<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-检查启动结果\"><a href=\"#2-检查启动结果\" class=\"headerlink\" title=\"2. 检查启动结果\"></a>2. 检查启动结果</h3><p>在浏览器中输入ip地址，查看页面，如见到以下页面即安装成功(nginx默认监听的是80端口)<br><img src=\"/2021/10/09/Linux-Nginx-install/Linux_nginx_check.png\" alt=\"安装成功\"></p>\n<div class=\"post-note note-success\"><p>以上操作完成后，及安装成功</p></div>\n<h2 id=\"四、Nginx配置详解\"><a href=\"#四、Nginx配置详解\" class=\"headerlink\" title=\"四、Nginx配置详解\"></a>四、Nginx配置详解</h2><p>打开 <font color=\"red\">/usr/local/nginx/conf/nginx.conf</font> 文件进行编辑</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token comment\">#user  nobody;</span>\nworker_processes  <span class=\"token number\">1</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。</span>\n\n<span class=\"token comment\"># 错误日志存放路径</span>\n<span class=\"token comment\">#error_log  logs/error.log;</span>\n<span class=\"token comment\">#error_log  logs/error.log  notice;</span>\n<span class=\"token comment\">#error_log  logs/error.log  info;</span>\n\n<span class=\"token comment\"># nginx进程pid存放路径</span>\n<span class=\"token comment\">#pid        logs/nginx.pid;</span>\n\n\nevents <span class=\"token punctuation\">&#123;</span>\n    worker_connections  <span class=\"token number\">1024</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 工作进程的最大连接数量</span>\n<span class=\"token punctuation\">&#125;</span>\n\n\nhttp <span class=\"token punctuation\">&#123;</span>\n    include       mime.types<span class=\"token punctuation\">;</span><span class=\"token comment\"># 指定mime类型，由mime.type来定义</span>\n    default_type  application/octet-stream<span class=\"token punctuation\">;</span>\n<span class=\"token comment\"># 日志格式设置</span>\n    <span class=\"token comment\">#log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '</span>\n    <span class=\"token comment\">#                  '$status $body_bytes_sent \"$http_referer\" '</span>\n    <span class=\"token comment\">#                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';</span>\n    \n    <span class=\"token comment\"># 用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径</span>\n    <span class=\"token comment\">#access_log  logs/access.log  main;</span>\n\n    <span class=\"token comment\"># 指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。</span>\n    <span class=\"token comment\"># 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。</span>\n    sendfile        on<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用</span>\n    <span class=\"token comment\">#tcp_nopush     on;</span>\n    \n    <span class=\"token comment\"># keepalive超时时间</span>\n    <span class=\"token comment\">#keepalive_timeout  0;</span>\n    keepalive_timeout  <span class=\"token number\">65</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\"># 开启gzip压缩服务</span>\n    <span class=\"token comment\">#gzip  on;</span>\n    \n    <span class=\"token comment\"># 虚拟主机</span>\n    server <span class=\"token punctuation\">&#123;</span>\n        listen       <span class=\"token number\">80</span><span class=\"token punctuation\">;</span><span class=\"token comment\"># 配置监听端口号</span>\n        server_name  localhost<span class=\"token punctuation\">;</span><span class=\"token comment\"># 配置访问域名，域名可以有多个，用空格隔开</span>\n        \n        <span class=\"token comment\"># 字符集设置</span>\n        <span class=\"token comment\">#charset koi8-r;</span>\n\n        <span class=\"token comment\">#access_log  logs/host.access.log  main;</span>\n\n        location / <span class=\"token punctuation\">&#123;</span>\n            root   /usr/demo<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 项目路径</span>\n            index  login.html<span class=\"token punctuation\">;</span> <span class=\"token comment\"># 需要访问的html文件名称</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n        <span class=\"token comment\"># 错误跳转页</span>\n        <span class=\"token comment\">#error_page  404              /404.html;</span>\n\n        <span class=\"token comment\"># redirect server error pages to the static page /50x.html</span>\n        <span class=\"token comment\">#</span>\n        error_page   <span class=\"token number\">500</span> <span class=\"token number\">502</span> <span class=\"token number\">503</span> <span class=\"token number\">504</span>  /50x.html<span class=\"token punctuation\">;</span>\n        location <span class=\"token operator\">=</span> /50x.html <span class=\"token punctuation\">&#123;</span>\n            root   html<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n\n        <span class=\"token comment\"># proxy the PHP scripts to Apache listening on 127.0.0.1:80</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    proxy_pass   http://127.0.0.1;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ \\.php$ &#123;</span>\n        <span class=\"token comment\">#    root           html;</span>\n        <span class=\"token comment\">#    fastcgi_pass   127.0.0.1:9000;</span>\n        <span class=\"token comment\">#    fastcgi_index  index.php;</span>\n        <span class=\"token comment\">#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span>\n        <span class=\"token comment\">#    include        fastcgi_params;</span>\n        <span class=\"token comment\">#&#125;</span>\n\n        <span class=\"token comment\"># deny access to .htaccess files, if Apache's document root</span>\n        <span class=\"token comment\"># concurs with nginx's one</span>\n        <span class=\"token comment\">#</span>\n        <span class=\"token comment\">#location ~ /\\.ht &#123;</span>\n        <span class=\"token comment\">#    deny  all;</span>\n        <span class=\"token comment\">#&#125;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n\n    <span class=\"token comment\"># another virtual host using mix of IP-, name-, and port-based configuration</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       8000;</span>\n    <span class=\"token comment\">#    listen       somename:8080;</span>\n    <span class=\"token comment\">#    server_name  somename  alias  another.alias;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n\n    <span class=\"token comment\"># HTTPS server</span>\n    <span class=\"token comment\">#</span>\n    <span class=\"token comment\">#server &#123;</span>\n    <span class=\"token comment\">#    listen       443 ssl;</span>\n    <span class=\"token comment\">#    server_name  localhost;</span>\n\n    <span class=\"token comment\">#    ssl_certificate      cert.pem;</span>\n    <span class=\"token comment\">#    ssl_certificate_key  cert.key;</span>\n\n    <span class=\"token comment\">#    ssl_session_cache    shared:SSL:1m;</span>\n    <span class=\"token comment\">#    ssl_session_timeout  5m;</span>\n\n    <span class=\"token comment\">#    ssl_ciphers  HIGH:!aNULL:!MD5;</span>\n    <span class=\"token comment\">#    ssl_prefer_server_ciphers  on;</span>\n\n    <span class=\"token comment\">#    location / &#123;</span>\n    <span class=\"token comment\">#        root   html;</span>\n    <span class=\"token comment\">#        index  index.html index.htm;</span>\n    <span class=\"token comment\">#    &#125;</span>\n    <span class=\"token comment\">#&#125;</span>\n\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>编辑完成后，重启Nginx即可生效</p></div>\n<h2 id=\"五、Nginx基础命令\"><a href=\"#五、Nginx基础命令\" class=\"headerlink\" title=\"五、Nginx基础命令\"></a>五、Nginx基础命令</h2><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">./nginx <span class=\"token comment\"># 启动nginx</span>\n./nginx -s stop <span class=\"token comment\"># 先查出nginx进程id再使用kill命令强制杀掉进程</span>\n./nginx -s quit <span class=\"token comment\"># 待nginx进程处理任务完毕进行停止</span>\n./nginx -s reload <span class=\"token comment\"># 重启nginx</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>每次编辑完nginx.conf文件后都必须重启nginx</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python中自动安装依赖(freeze)","date":"2021-10-05T08:35:20.000Z","_content":"## 前言\n在学习python的过程中，经常会遇到需要在另外一台机器上去运行程序或者换电脑进行开发的情况出现，当遇到这些情况时最笨的办法就只能一遍一遍的敲运行命令看少哪个依赖包就去pip哪个依赖包，这样重复操作就非常的麻烦，那这时候我们就可以使用freeze命令来导出已安装模块文档\n## 使用\n在可运行项目的电脑中，进入项目根目录输入以下命令以导出已安装模块文档，完成以下命令后可在当前目录下生成一个相对应的文件，文件中包含了包名以及版本号\n```bash\npip freeze > modules.txt\n```\n在另外一台电脑的项目根目录输入以下命令即可开始安装需要安装的依赖\n```bash\npip install -r modules.txt\n```\n{% note success %}\n接下来就只需要耐心等待安装完成，然后启动项目就好啦~\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Python-requirements-install.md","raw":"---\ntitle: Python中自动安装依赖(freeze)\ndate: 2021-10-05 16:35:20\ntags: [python]\ncategories: 日常问题\n---\n## 前言\n在学习python的过程中，经常会遇到需要在另外一台机器上去运行程序或者换电脑进行开发的情况出现，当遇到这些情况时最笨的办法就只能一遍一遍的敲运行命令看少哪个依赖包就去pip哪个依赖包，这样重复操作就非常的麻烦，那这时候我们就可以使用freeze命令来导出已安装模块文档\n## 使用\n在可运行项目的电脑中，进入项目根目录输入以下命令以导出已安装模块文档，完成以下命令后可在当前目录下生成一个相对应的文件，文件中包含了包名以及版本号\n```bash\npip freeze > modules.txt\n```\n在另外一台电脑的项目根目录输入以下命令即可开始安装需要安装的依赖\n```bash\npip install -r modules.txt\n```\n{% note success %}\n接下来就只需要耐心等待安装完成，然后启动项目就好啦~\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Python-requirements-install","published":1,"updated":"2021-10-14T08:54:45.419Z","_id":"ckujksbu20000bcu3demq94yr","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在学习python的过程中，经常会遇到需要在另外一台机器上去运行程序或者换电脑进行开发的情况出现，当遇到这些情况时最笨的办法就只能一遍一遍的敲运行命令看少哪个依赖包就去pip哪个依赖包，这样重复操作就非常的麻烦，那这时候我们就可以使用freeze命令来导出已安装模块文档</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在可运行项目的电脑中，进入项目根目录输入以下命令以导出已安装模块文档，完成以下命令后可在当前目录下生成一个相对应的文件，文件中包含了包名以及版本号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> modules.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在另外一台电脑的项目根目录输入以下命令即可开始安装需要安装的依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> -r modules.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>接下来就只需要耐心等待安装完成，然后启动项目就好啦~</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"前言\"><a href=\"#前言\" class=\"headerlink\" title=\"前言\"></a>前言</h2><p>在学习python的过程中，经常会遇到需要在另外一台机器上去运行程序或者换电脑进行开发的情况出现，当遇到这些情况时最笨的办法就只能一遍一遍的敲运行命令看少哪个依赖包就去pip哪个依赖包，这样重复操作就非常的麻烦，那这时候我们就可以使用freeze命令来导出已安装模块文档</p>\n<h2 id=\"使用\"><a href=\"#使用\" class=\"headerlink\" title=\"使用\"></a>使用</h2><p>在可运行项目的电脑中，进入项目根目录输入以下命令以导出已安装模块文档，完成以下命令后可在当前目录下生成一个相对应的文件，文件中包含了包名以及版本号</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip freeze <span class=\"token operator\">></span> modules.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>在另外一台电脑的项目根目录输入以下命令即可开始安装需要安装的依赖</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip <span class=\"token function\">install</span> -r modules.txt<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>接下来就只需要耐心等待安装完成，然后启动项目就好啦~</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python中使用asyncio进行异步处理","date":"2021-10-10T08:37:03.000Z","_content":"在开发过程中，经常遇到需要并发处理一些事务或不想等待程序执行立马得到返回值，此时便可异步去处理\n### 同步执行\n首先来看看同步执行一个方法时，程序会按照顺序一次执行完成才会执行下一次，故我们在打印结果时可以看到，每隔1秒打印了一次\n```python\n# coding:utf-8\nimport time\n\n\ndef hello(name):\n    time.sleep(1)\n    print('hi, %s, %s' % (name, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    for i in names:\n        hello(i)\n\n\nif __name__ == '__main__':\n    main()\n```\n![同步结果](Python-asyncio/Python_asyncio_synchronization.jpg)\n### 异步执行\n通过以下操作，可以看到执行时间为同一秒，即完成了一次简单的异步操作\n```python\n# coding:utf-8\nimport time\nimport asyncio\n\n\n# 定义异步函数\nasync def hello(names):\n    await asyncio.sleep(1)\n    print('hi, %s, %s' % (names, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    # 将方法添加进事件循环\n    loop = asyncio.get_event_loop()\n    tasks = [hello(i) for i in names]\n    # 阻塞调用，直到协程运行结束才返回。参数是future，传入协程对象时内部会自动变为future\n    loop.run_until_complete(asyncio.wait(tasks))\n    loop.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n![异步结果](Python-asyncio/Python_asyncio.jpg)\n\n{% note warning %}\n异步IO的asyncio库使用事件循环驱动的协程实现并发。用户可主动控制程序，在认为耗时IO处添加await（yield from）。在asyncio库中，协程使用@asyncio.coroutine装饰，使用yield from来驱动，在python3.5中作了如下更改：\n```python\n@asyncio.coroutine -> async\nyield from -> await\n```\nPython3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async & await 关键字实现协程代码。\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Python-asyncio.md","raw":"---\ntitle: Python中使用asyncio进行异步处理\ndate: 2021-10-10 16:37:03\ntags: [python]\ncategories: 日常问题\n---\n在开发过程中，经常遇到需要并发处理一些事务或不想等待程序执行立马得到返回值，此时便可异步去处理\n### 同步执行\n首先来看看同步执行一个方法时，程序会按照顺序一次执行完成才会执行下一次，故我们在打印结果时可以看到，每隔1秒打印了一次\n```python\n# coding:utf-8\nimport time\n\n\ndef hello(name):\n    time.sleep(1)\n    print('hi, %s, %s' % (name, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    for i in names:\n        hello(i)\n\n\nif __name__ == '__main__':\n    main()\n```\n![同步结果](Python-asyncio/Python_asyncio_synchronization.jpg)\n### 异步执行\n通过以下操作，可以看到执行时间为同一秒，即完成了一次简单的异步操作\n```python\n# coding:utf-8\nimport time\nimport asyncio\n\n\n# 定义异步函数\nasync def hello(names):\n    await asyncio.sleep(1)\n    print('hi, %s, %s' % (names, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    # 将方法添加进事件循环\n    loop = asyncio.get_event_loop()\n    tasks = [hello(i) for i in names]\n    # 阻塞调用，直到协程运行结束才返回。参数是future，传入协程对象时内部会自动变为future\n    loop.run_until_complete(asyncio.wait(tasks))\n    loop.close()\n\n\nif __name__ == '__main__':\n    main()\n```\n\n![异步结果](Python-asyncio/Python_asyncio.jpg)\n\n{% note warning %}\n异步IO的asyncio库使用事件循环驱动的协程实现并发。用户可主动控制程序，在认为耗时IO处添加await（yield from）。在asyncio库中，协程使用@asyncio.coroutine装饰，使用yield from来驱动，在python3.5中作了如下更改：\n```python\n@asyncio.coroutine -> async\nyield from -> await\n```\nPython3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async & await 关键字实现协程代码。\n{% endnote %}\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Python-asyncio","published":1,"updated":"2021-10-14T08:54:45.435Z","_id":"ckul0uaqa0000pcu386qrbqsy","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在开发过程中，经常遇到需要并发处理一些事务或不想等待程序执行立马得到返回值，此时便可异步去处理</p>\n<h3 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h3><p>首先来看看同步执行一个方法时，程序会按照顺序一次执行完成才会执行下一次，故我们在打印结果时可以看到，每隔1秒打印了一次</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding:utf-8</span>\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi, %s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jacky'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        hello<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/10/10/Python-asyncio/Python_asyncio_synchronization.jpg\" alt=\"同步结果\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/10/10/Python-asyncio/Python_asyncio_synchronization.jpg\" class=\"lozad post-image\"></p>\n<h3 id=\"异步执行\"><a href=\"#异步执行\" class=\"headerlink\" title=\"异步执行\"></a>异步执行</h3><p>通过以下操作，可以看到执行时间为同一秒，即完成了一次简单的异步操作</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding:utf-8</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> asyncio\n\n\n<span class=\"token comment\"># 定义异步函数</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi, %s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jacky'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 将方法添加进事件循环</span>\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>hello<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 阻塞调用，直到协程运行结束才返回。参数是future，传入协程对象时内部会自动变为future</span>\n    loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/2021/10/10/Python-asyncio/Python_asyncio.jpg\" alt=\"异步结果\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/10/10/Python-asyncio/Python_asyncio.jpg\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-warning\"><p>异步IO的asyncio库使用事件循环驱动的协程实现并发。用户可主动控制程序，在认为耗时IO处添加await（yield from）。在asyncio库中，协程使用@asyncio.coroutine装饰，使用yield from来驱动，在python3.5中作了如下更改：</p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@asyncio<span class=\"token punctuation\">.</span>coroutine</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span>\n<span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">await</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre><p>Python3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async &amp; await 关键字实现协程代码。</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在开发过程中，经常遇到需要并发处理一些事务或不想等待程序执行立马得到返回值，此时便可异步去处理</p>\n<h3 id=\"同步执行\"><a href=\"#同步执行\" class=\"headerlink\" title=\"同步执行\"></a>同步执行</h3><p>首先来看看同步执行一个方法时，程序会按照顺序一次执行完成才会执行下一次，故我们在打印结果时可以看到，每隔1秒打印了一次</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding:utf-8</span>\n<span class=\"token keyword\">import</span> time\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    time<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi, %s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jacky'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">:</span>\n        hello<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/10/10/Python-asyncio/Python_asyncio_synchronization.jpg\" alt=\"同步结果\"></p>\n<h3 id=\"异步执行\"><a href=\"#异步执行\" class=\"headerlink\" title=\"异步执行\"></a>异步执行</h3><p>通过以下操作，可以看到执行时间为同一秒，即完成了一次简单的异步操作</p>\n<pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token comment\"># coding:utf-8</span>\n<span class=\"token keyword\">import</span> time\n<span class=\"token keyword\">import</span> asyncio\n\n\n<span class=\"token comment\"># 定义异步函数</span>\n<span class=\"token keyword\">async</span> <span class=\"token keyword\">def</span> <span class=\"token function\">hello</span><span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">await</span> asyncio<span class=\"token punctuation\">.</span>sleep<span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span><span class=\"token string\">'hi, %s, %s'</span> <span class=\"token operator\">%</span> <span class=\"token punctuation\">(</span>names<span class=\"token punctuation\">,</span> time<span class=\"token punctuation\">.</span>strftime<span class=\"token punctuation\">(</span><span class=\"token string\">'%X'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">def</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    names <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token string\">'jacky'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'bob'</span><span class=\"token punctuation\">,</span> <span class=\"token string\">'init'</span><span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 将方法添加进事件循环</span>\n    loop <span class=\"token operator\">=</span> asyncio<span class=\"token punctuation\">.</span>get_event_loop<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n    tasks <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>hello<span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> names<span class=\"token punctuation\">]</span>\n    <span class=\"token comment\"># 阻塞调用，直到协程运行结束才返回。参数是future，传入协程对象时内部会自动变为future</span>\n    loop<span class=\"token punctuation\">.</span>run_until_complete<span class=\"token punctuation\">(</span>asyncio<span class=\"token punctuation\">.</span>wait<span class=\"token punctuation\">(</span>tasks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    loop<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n\n<span class=\"token keyword\">if</span> __name__ <span class=\"token operator\">==</span> <span class=\"token string\">'__main__'</span><span class=\"token punctuation\">:</span>\n    main<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"/2021/10/10/Python-asyncio/Python_asyncio.jpg\" alt=\"异步结果\"></p>\n<div class=\"post-note note-warning\"><p>异步IO的asyncio库使用事件循环驱动的协程实现并发。用户可主动控制程序，在认为耗时IO处添加await（yield from）。在asyncio库中，协程使用@asyncio.coroutine装饰，使用yield from来驱动，在python3.5中作了如下更改：</p><pre class=\"line-numbers language-python\" data-language=\"python\"><code class=\"language-python\"><span class=\"token decorator annotation punctuation\">@asyncio<span class=\"token punctuation\">.</span>coroutine</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">async</span>\n<span class=\"token keyword\">yield</span> <span class=\"token keyword\">from</span> <span class=\"token operator\">-</span><span class=\"token operator\">></span> <span class=\"token keyword\">await</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre><p>Python3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async &amp; await 关键字实现协程代码。</p></div>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Git-强制提交本地分支来覆盖远程分支","date":"2021-10-11T06:58:17.000Z","_content":"在代码目录下输入以下命令即可\n```bash\ngit push origin 分支名 --force\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","source":"_posts/Git-OverlayRemoteCode.md","raw":"---\ntitle: Git-强制提交本地分支来覆盖远程分支\ndate: 2021-10-11 14:58:17\ntags: [Git]\ncategories: 日常问题\n---\n在代码目录下输入以下命令即可\n```bash\ngit push origin 分支名 --force\n```\n![添加微信](https://init-blog.init888.cn/post/common/WX_QR_code.png)","slug":"Git-OverlayRemoteCode","published":1,"updated":"2021-10-14T08:54:45.392Z","_id":"ckumbw1tj0000dgu3eipc3hp1","comments":1,"layout":"post","photos":[],"link":"","content":"<p>在代码目录下输入以下命令即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin 分支名 --force<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<p>在代码目录下输入以下命令即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"><span class=\"token function\">git</span> push origin 分支名 --force<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"https://init-blog.init888.cn/post/common/WX_QR_code.png\" alt=\"添加微信\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/Fiddler-Proxy/Download.jpg","slug":"Download.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler.jpg","slug":"Fiddler.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_After.jpg","slug":"Fiddler_After.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Before.jpg","slug":"Fiddler_Before.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Android_Proxy.png","slug":"Fiddler_Android_Proxy.png","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Certificate_Phone.png","slug":"Fiddler_Certificate_Phone.png","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Https_traffic.png","slug":"Fiddler_Https_traffic.png","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_IP.jpg","slug":"Fiddler_IP.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Ignore.jpg","slug":"Fiddler_Ignore.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Open.jpg","slug":"Fiddler_Open.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Port.jpg","slug":"Fiddler_Port.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Right.jpg","slug":"Fiddler_Right.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_Successful.jpg","slug":"Fiddler_Successful.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_certificate.jpg","slug":"Fiddler_certificate.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_certificate_install.jpg","slug":"Fiddler_certificate_install.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_iOS_Proxy.png","slug":"Fiddler_iOS_Proxy.png","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_filter.jpg","slug":"Fiddler_filter.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Fiddler-Proxy/Fiddler_left.jpg","slug":"Fiddler_left.jpg","post":"ckt2jxv3h0001lcu33ap62rrn","modified":0,"renderable":0},{"_id":"source/_posts/Parameter-Decomposition/result.jpg","slug":"result.jpg","post":"ckt34tyfh0000ccri6plngqfi","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Crontab/crontab_sel.png","slug":"crontab_sel.png","post":"ckt2jxv3m0005lcu32qu28jzp","modified":0,"renderable":0},{"_id":"source/_posts/Python-Change-List/show_result.jpg","slug":"show_result.jpg","post":"ckt9g9yux0000ysu3fwmd51pt","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium/Find_element_baidu.jpg","slug":"Find_element_baidu.jpg","post":"ckt2jxv3q0006lcu30iw09lot","modified":0,"renderable":0},{"_id":"source/_posts/Web_Hexo/git_version.png","slug":"git_version.png","post":"ckt2jxv3y000blcu32zu5exok","modified":0,"renderable":0},{"_id":"source/_posts/Python-Package/useCommand.jpg","slug":"useCommand.jpg","post":"cktxx70dh0000ocu356v33rce","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/Linux-initPython.jpg","slug":"Linux-initPython.jpg","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/Linux-install-win.jpg","slug":"Linux-install-win.jpg","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/Linux-pythonInstall.jpg","slug":"Linux-pythonInstall.jpg","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/img.png","slug":"img.png","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/Linux-python-Path.jpg","slug":"Linux-python-Path.jpg","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Python-Install/Linux-Python-success.jpg","slug":"Linux-Python-success.jpg","post":"cku3rc2sy0000g0u3gwjg8m20","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_download.jpg","slug":"Linux_nginx_download.jpg","post":"ckujgfm630000ewu3bczdevfb","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_install.png","slug":"Linux_nginx_install.png","post":"ckujgfm630000ewu3bczdevfb","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Nginx-install/Linux_nginx_check.png","slug":"Linux_nginx_check.png","post":"ckujgfm630000ewu3bczdevfb","modified":0,"renderable":0},{"_id":"source/_posts/Python-asyncio/Python_asyncio.jpg","slug":"Python_asyncio.jpg","post":"ckul0uaqa0000pcu386qrbqsy","modified":0,"renderable":0},{"_id":"source/_posts/Python-asyncio/Python_asyncio_synchronization.jpg","slug":"Python_asyncio_synchronization.jpg","post":"ckul0uaqa0000pcu386qrbqsy","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckt2jxv3q0006lcu30iw09lot","category_id":"ckt2jxv3k0003lcu3156i1svi","_id":"ckt2jxv3z000clcu32zfe3768"},{"post_id":"ckt2jxv3h0001lcu33ap62rrn","category_id":"ckt2jxv3k0003lcu3156i1svi","_id":"ckt2jxv40000flcu3g70yhw5e"},{"post_id":"ckt2jxv3x000alcu3cww4ek4h","category_id":"ckt2jxv3k0003lcu3156i1svi","_id":"ckt2jxv41000hlcu3ctn381x9"},{"post_id":"ckt2jxv3j0002lcu31vbvhlg7","category_id":"ckt2jxv3w0008lcu3hede9qkf","_id":"ckt2jxv42000llcu33969c2zq"},{"post_id":"ckt2jxv3y000blcu32zu5exok","category_id":"ckt2jxv3w0008lcu3hede9qkf","_id":"ckt2jxv43000mlcu30i8o914r"},{"post_id":"ckt2jxv3m0005lcu32qu28jzp","category_id":"ckt2jxv3z000dlcu3elghag8s","_id":"ckt2jxv44000olcu3bnsv4bdw"},{"post_id":"ckt2jxv3w0007lcu3gp1s1yjs","category_id":"ckt2jxv3z000dlcu3elghag8s","_id":"ckt2jxv44000qlcu39di0coz4"},{"post_id":"ckt34tyfh0000ccri6plngqfi","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckt34tyfr0003ccriey1b4kiv"},{"post_id":"ckt9g9yux0000ysu3fwmd51pt","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckt9g9yv50002ysu394qi3cqx"},{"post_id":"cktblomjs0000n4ri75drd3r9","category_id":"ckt34tyfn0001ccriansvh287","_id":"cktblomjx0002n4rifi0h0tq3"},{"post_id":"ckte0whpj0000x8u3664ca5f2","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckte0whpp0002x8u31dkjchyk"},{"post_id":"ckte71e160000c0u362o1175z","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckte71e190002c0u3aqujalds"},{"post_id":"cktxx70dh0000ocu356v33rce","category_id":"ckt2jxv3k0003lcu3156i1svi","_id":"cktxxowd000020wu39gfkfyia"},{"post_id":"cku3rc2sy0000g0u3gwjg8m20","category_id":"ckt2jxv3z000dlcu3elghag8s","_id":"cku3rc2t30003g0u35y3m0rto"},{"post_id":"ckujgfm630000ewu3bczdevfb","category_id":"ckt2jxv3z000dlcu3elghag8s","_id":"ckujgfm680003ewu3g0lpfb15"},{"post_id":"ckujksbu20000bcu3demq94yr","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckujksbu40002bcu3glch0amy"},{"post_id":"ckul0uaqa0000pcu386qrbqsy","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckul0uaqe0002pcu35adabufg"},{"post_id":"ckumbw1tj0000dgu3eipc3hp1","category_id":"ckt34tyfn0001ccriansvh287","_id":"ckumbw1tr0002dgu39ly5bgvs"}],"PostTag":[{"post_id":"ckt2jxv3h0001lcu33ap62rrn","tag_id":"ckt2jxv3m0004lcu3b40r7nx4","_id":"ckt2jxv40000glcu3762qfikz"},{"post_id":"ckt2jxv3h0001lcu33ap62rrn","tag_id":"ckt2jxv3w0009lcu36g12dg9t","_id":"ckt2jxv41000ilcu3e3d78on8"},{"post_id":"ckt2jxv3j0002lcu31vbvhlg7","tag_id":"ckt2jxv3z000elcu31qacc3al","_id":"ckt2jxv44000plcu3f77db3xy"},{"post_id":"ckt2jxv3j0002lcu31vbvhlg7","tag_id":"ckt2jxv41000klcu33so20cbv","_id":"ckt2jxv44000rlcu30vpt7pdm"},{"post_id":"ckt2jxv3m0005lcu32qu28jzp","tag_id":"ckt2jxv44000nlcu32yiy5mbv","_id":"ckt2jxv45000ulcu3ex5o2tnq"},{"post_id":"ckt2jxv3m0005lcu32qu28jzp","tag_id":"ckt2jxv44000slcu3difo9dem","_id":"ckt2jxv45000vlcu3asdq7jat"},{"post_id":"ckt2jxv3q0006lcu30iw09lot","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckt2jxv46000zlcu3a6uc06i4"},{"post_id":"ckt2jxv3q0006lcu30iw09lot","tag_id":"ckt2jxv45000wlcu30w4n2k26","_id":"ckt2jxv470010lcu34f212bwy"},{"post_id":"ckt2jxv3q0006lcu30iw09lot","tag_id":"ckt2jxv46000xlcu3c0vzfzfj","_id":"ckt2jxv470012lcu3flimhtx2"},{"post_id":"ckt2jxv3w0007lcu3gp1s1yjs","tag_id":"ckt2jxv44000nlcu32yiy5mbv","_id":"ckt2jxv470014lcu3djh85zby"},{"post_id":"ckt2jxv3w0007lcu3gp1s1yjs","tag_id":"ckt2jxv470011lcu37bqd7pb6","_id":"ckt2jxv470015lcu3ebnn06f4"},{"post_id":"ckt2jxv3x000alcu3cww4ek4h","tag_id":"ckt2jxv470013lcu34obvheas","_id":"ckt2jxv480017lcu3blch8tku"},{"post_id":"ckt2jxv3y000blcu32zu5exok","tag_id":"ckt2jxv3z000elcu31qacc3al","_id":"ckt2jxv480019lcu385t79cp4"},{"post_id":"ckt2jxv3y000blcu32zu5exok","tag_id":"ckt2jxv41000klcu33so20cbv","_id":"ckt2jxv48001alcu31sqq3hav"},{"post_id":"ckt34tyfh0000ccri6plngqfi","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckt34tyfq0002ccrihmlbghfi"},{"post_id":"ckt9g9yux0000ysu3fwmd51pt","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckt9g9yv50001ysu3gbq8304k"},{"post_id":"cktblomjs0000n4ri75drd3r9","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"cktblomjx0001n4ri356i52k4"},{"post_id":"ckte0whpj0000x8u3664ca5f2","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckte0whpo0001x8u3auhze4i7"},{"post_id":"ckte71e160000c0u362o1175z","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckte71e190001c0u3bm5sg5t9"},{"post_id":"cktxx70dh0000ocu356v33rce","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"cktxxowd000000wu38jbn81j9"},{"post_id":"cktxx70dh0000ocu356v33rce","tag_id":"ckt2jxv46000xlcu3c0vzfzfj","_id":"cktxxowd000010wu30lq51xm5"},{"post_id":"cku3rc2sy0000g0u3gwjg8m20","tag_id":"ckt2jxv44000nlcu32yiy5mbv","_id":"cku3rc2t30001g0u34o82ddxf"},{"post_id":"cku3rc2sy0000g0u3gwjg8m20","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"cku3rc2t30002g0u32vgncm8m"},{"post_id":"ckujgfm630000ewu3bczdevfb","tag_id":"ckt2jxv44000nlcu32yiy5mbv","_id":"ckujgfm680001ewu30dgqhkew"},{"post_id":"ckujgfm630000ewu3bczdevfb","tag_id":"ckt2jxv470011lcu37bqd7pb6","_id":"ckujgfm680002ewu3eo8ycid3"},{"post_id":"ckujksbu20000bcu3demq94yr","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckujksbu40001bcu394srh0su"},{"post_id":"ckul0uaqa0000pcu386qrbqsy","tag_id":"ckt2jxv45000tlcu38r1thvf4","_id":"ckul0uaqe0001pcu30o2i27nh"},{"post_id":"ckumbw1tj0000dgu3eipc3hp1","tag_id":"ckumbw1tm0001dgu3cqxh250u","_id":"ckumbw1tr0003dgu3dx3icd7u"}],"Tag":[{"name":"Fiddler","_id":"ckt2jxv3m0004lcu3b40r7nx4"},{"name":"测试工具","_id":"ckt2jxv3w0009lcu36g12dg9t"},{"name":"Hexo","_id":"ckt2jxv3z000elcu31qacc3al"},{"name":"博客","_id":"ckt2jxv41000klcu33so20cbv"},{"name":"Linux","_id":"ckt2jxv44000nlcu32yiy5mbv"},{"name":"定时任务","_id":"ckt2jxv44000slcu3difo9dem"},{"name":"python","_id":"ckt2jxv45000tlcu38r1thvf4"},{"name":"selenium","_id":"ckt2jxv45000wlcu30w4n2k26"},{"name":"自动化测试","_id":"ckt2jxv46000xlcu3c0vzfzfj"},{"name":"部署","_id":"ckt2jxv470011lcu37bqd7pb6"},{"name":"测试文档","_id":"ckt2jxv470013lcu34obvheas"},{"name":"Git","_id":"ckumbw1tm0001dgu3cqxh250u"}]}}