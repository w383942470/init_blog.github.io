{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"themes/kaze/source/css/main.styl","path":"css/main.styl","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/main.js","path":"js/main.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","path":"js/lib/busuanzi.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lozad.min.js","path":"js/lib/lozad.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/md5.min.js","path":"js/lib/md5.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","path":"js/lib/lightbox/baguetteBox.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","path":"js/lib/lightbox/baguetteBox.min.js","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","path":"js/lib/prism/prism-coy.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","path":"js/lib/prism/prism-dark.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","path":"js/lib/prism/prism-funky.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","path":"js/lib/prism/prism-line-numbers.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","path":"js/lib/prism/prism-okaidia.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","path":"js/lib/prism/prism-solarizedlight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","path":"js/lib/prism/prism-tomorrow.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","path":"js/lib/prism/prism-twilight.min.css","modified":0,"renderable":1},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","path":"js/lib/prism/prism.min.css","modified":0,"renderable":1}],"Cache":[{"_id":"source/_posts/Fiddler-Proxy.md","hash":"de3d975016366b0d629bb3fc2c329bbfd9202317","modified":1630403647491},{"_id":"source/_posts/Hexo_Article.md","hash":"4abe7a7621b77ada9d8d1bb6b06423929f234e43","modified":1630403636000},{"_id":"source/_posts/Linux-Crontab.md","hash":"b71b933369eaf7b315ac3655476cd4c2d3e9c784","modified":1630403647492},{"_id":"source/_posts/Python-Selenium.md","hash":"37e1852a1a7de17e31db5f580343db4bc53024fe","modified":1630403647492},{"_id":"source/_posts/Server_Screen.md","hash":"a5b2247be92b1404f4fdb5bf187a0ae8ca78962f","modified":1630403932746},{"_id":"source/_posts/Submit-Test.md","hash":"240b6b4e181801ad6541a74028a933776ae46c66","modified":1630403932742},{"_id":"source/_posts/Web_Hexo.md","hash":"be9da59b02b30ad0a5b261a4524bd662d278cd00","modified":1630403932749},{"_id":"source/about/index.md","hash":"c7785ea823c9ca5b2310ca6f6226fd1f4b2bb9fc","modified":1630313660449},{"_id":"source/_posts/Linux-Crontab/crontab_sel.png","hash":"9511d6800cc37be26709abb9e9391bd795a09935","modified":1630313491963},{"_id":"source/_posts/Web_Hexo/git_version.png","hash":"5040a21115b7f4e7cda4367f4baaa997f27b35d2","modified":1630313475047},{"_id":"source/_posts/Fiddler-Proxy/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818903},{"_id":"source/_posts/Hexo_Article/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818904},{"_id":"source/_posts/Linux-Crontab/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818905},{"_id":"source/_posts/Python-Selenium/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818906},{"_id":"source/_posts/Server_Screen/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818907},{"_id":"source/_posts/Submit-Test/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818908},{"_id":"source/_posts/Web_Hexo/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401818909},{"_id":"themes/kaze/.eslintrc.json","hash":"5826fc1d26f8e1327d6ce733c1dcfdd363e455d3","modified":1630313460364},{"_id":"themes/kaze/LICENSE","hash":"84c87e78e9781eb1c63f74f7f95abdf0c2a13195","modified":1630313460366},{"_id":"themes/kaze/README.md","hash":"8cd4cbd2dda92bf7e2c49d3264719a6a239de1ab","modified":1630313460366},{"_id":"themes/kaze/.gitignore","hash":"e8e704101761eae82558c166a3e8a5b53e778a5c","modified":1630313460365},{"_id":"themes/kaze/README_zh.md","hash":"77e23f4e033fd2b79a8fbd1811ae0fd6c2bd0766","modified":1630313460367},{"_id":"themes/kaze/_config.yml","hash":"d48fc9d560cda998d4401833cbc50a131e707d6a","modified":1630313663200},{"_id":"themes/kaze/gulpfile.js","hash":"f1f916f47ce9725557a63495cfc0b7942e3bb287","modified":1630313460367},{"_id":"themes/kaze/index.js","hash":"ba8ab5a0280b953aa97435ff8946cbcbb2755a27","modified":1630313663201},{"_id":"themes/kaze/languages/en.yml","hash":"86bb06af11e288b75421cc96ff66a9c52ddbead8","modified":1630313460368},{"_id":"themes/kaze/languages/zh-CN.yml","hash":"069496fa821c23eb25d835960563b9fa52f86d25","modified":1630313663201},{"_id":"themes/kaze/layout/about.ejs","hash":"06bbaacfedfea63867a5937beb6e09a295763375","modified":1630313460375},{"_id":"themes/kaze/layout/archive.ejs","hash":"95f014451d1045df3dfbfe82de255152916bc404","modified":1630313460375},{"_id":"themes/kaze/layout/artitalk.ejs","hash":"b732a3bf354231d5fcb19b69e1dd66b8b8bb33a7","modified":1630313460376},{"_id":"themes/kaze/layout/categories.ejs","hash":"e1f3e2641c4305656df9465ee6f9fde93a596dc5","modified":1630313460376},{"_id":"themes/kaze/layout/category.ejs","hash":"5add5abe99875c0b46125cbbbed576a351915cf3","modified":1630313460376},{"_id":"themes/kaze/layout/index.ejs","hash":"065ee8a03c816686a210d731d7b5473afb57388f","modified":1630313460377},{"_id":"themes/kaze/layout/layout.ejs","hash":"f0d09b15b25afa937f05d2fd4a6cc12d5f02c1fe","modified":1630313460377},{"_id":"themes/kaze/layout/links.ejs","hash":"c8ba5cba5c34bd87f088c582c30ab988f5598e37","modified":1630313460377},{"_id":"themes/kaze/layout/post.ejs","hash":"4eaca2d87b651371a703139c0172967e2a3628c4","modified":1630313460377},{"_id":"themes/kaze/layout/tag.ejs","hash":"de2f0ab78d4272982e4ad945609a1f2a6acac8f4","modified":1630313460378},{"_id":"themes/kaze/layout/tags.ejs","hash":"5978626693a28a8d8992f00327732da6e1ad9bcc","modified":1630313460378},{"_id":"themes/kaze/lib/lazyload.js","hash":"ed8d0995e204ca03169e227039b849b30c3a8a63","modified":1630313460378},{"_id":"themes/kaze/lib/mergeConfig.js","hash":"6f300970424a6cb3823311bb7fb60b2f12bfdf0c","modified":1630313460379},{"_id":"themes/kaze/scripts/index.js","hash":"e22ebdc3794fec7a8ce07be943b72e4eebb6a303","modified":1630313460383},{"_id":"themes/kaze/.github/ISSUE_TEMPLATE/bug-report-----.md","hash":"d1abbb26d1f4e97adf18fc181d3aac1c5072db7c","modified":1630313460364},{"_id":"themes/kaze/.github/ISSUE_TEMPLATE/feature-request-----.md","hash":"b644c1324a09c36d2708c06ff0766289afa79097","modified":1630313460365},{"_id":"themes/kaze/.github/workflows/beta.yml","hash":"1109341feae161628fb542f836ce09774e65d309","modified":1630313460365},{"_id":"themes/kaze/.github/workflows/release.yml","hash":"4b5ac4a336b649b78bf4d6bae286796113b3f7be","modified":1630313460365},{"_id":"themes/kaze/layout/_partial/archives.ejs","hash":"4e2037d0cbc1ca0f4830e25a784794604d1279a3","modified":1630313460369},{"_id":"themes/kaze/layout/_partial/author.ejs","hash":"fbedae957b0c31a6d27a365394621b80184aaf61","modified":1630313460370},{"_id":"themes/kaze/layout/_partial/categories.ejs","hash":"462c3ee01edfa8725ccc99bddafd0dc82f1cbfc5","modified":1630313460370},{"_id":"themes/kaze/layout/_partial/footer.ejs","hash":"bc3253afccb8ea7a7db86cdc655db8e9b3b4cafb","modified":1630313460370},{"_id":"themes/kaze/layout/_partial/head.ejs","hash":"537117a906bf2ad339faaeaccf71e0d068947271","modified":1630313460370},{"_id":"themes/kaze/layout/_partial/left-aside.ejs","hash":"55a9f75b77f7686e86df551c7db32affd4fb0834","modified":1630313460371},{"_id":"themes/kaze/layout/_partial/nav.ejs","hash":"7633ccfcaa300ea336e9184fb1465471743d694b","modified":1630313460371},{"_id":"themes/kaze/layout/_partial/pagination.ejs","hash":"8c6c3a86ad42553831fd94c716e55b402987ac5a","modified":1630313460371},{"_id":"themes/kaze/layout/_partial/recent-post.ejs","hash":"d1b88c4ed9629d579bd6ef76f95b823d87ce0233","modified":1630313460374},{"_id":"themes/kaze/layout/_partial/right-aside.ejs","hash":"4132e897ad2e08815e7465882f37e09debe6dabb","modified":1630313460374},{"_id":"themes/kaze/layout/_partial/scrollbutton.ejs","hash":"d8bd8cf564f716ff5db5abd382f821b9581dda13","modified":1630313460374},{"_id":"themes/kaze/layout/_partial/tags.ejs","hash":"38112e194ec9bd2855ace95274f331255c52f843","modified":1630313460374},{"_id":"themes/kaze/layout/_partial/toc-card.ejs","hash":"6d14483899e8101194d2b34782cb036eed568aa8","modified":1630313460375},{"_id":"themes/kaze/lib/minify/minifyCSS.js","hash":"f3c3ac264a6b788353483f5077b137b51da9a4f2","modified":1630313460379},{"_id":"themes/kaze/lib/minify/minifyHTML.js","hash":"df06caff1eef4c6d8035786ba760aeb1d76750fc","modified":1630313460379},{"_id":"themes/kaze/lib/minify/minifyJS.js","hash":"cb5d417447e7aaf8c78fa0f7b408659d86d5eca6","modified":1630313460380},{"_id":"themes/kaze/scripts/generators/pagerouter.js","hash":"f86551dbe588a297ccc744249ac1a69ac82e047f","modified":1630313460380},{"_id":"themes/kaze/scripts/generators/search.js","hash":"c336bcd252be642f7f3a6a2ec2c75bbc9067f610","modified":1630313460381},{"_id":"themes/kaze/scripts/helpers/count.js","hash":"a2ecc582e9f4489726bb9668b51b682f8129e30e","modified":1630313460381},{"_id":"themes/kaze/scripts/helpers/load.js","hash":"0c87cc180b8f4612f3fb23933bbcbc47223be435","modified":1630313460381},{"_id":"themes/kaze/scripts/highlight/replace.js","hash":"38879d7e4bafd016a0a3cd86df65233eb2d0f92e","modified":1630313460382},{"_id":"themes/kaze/scripts/tag/note.js","hash":"2cfa3b68b30f53480a7657174e6d662feb850526","modified":1630313460383},{"_id":"themes/kaze/source/css/main.styl","hash":"8b602110e32636076754d9e26555f4c924dfa8bb","modified":1630313460394},{"_id":"themes/kaze/source/js/main.js","hash":"10ed6cfe8e52b4eb1ae03adad79f0471ab4f29fd","modified":1630313663205},{"_id":"themes/kaze/src/scripts/console.ts","hash":"fb1272491d5f211469f531536c708a5cecebd82f","modified":1630313460400},{"_id":"themes/kaze/src/scripts/darkMode.ts","hash":"f9eda2794effec0af2a2ebd6588bca70e97caead","modified":1630313460400},{"_id":"themes/kaze/src/scripts/index.d.ts","hash":"f257b1abca545c0debd3925d9f4dfeb1c1a371d6","modified":1630313460400},{"_id":"themes/kaze/src/scripts/main.ts","hash":"06881ee55d3c12d47401934f9b8a3ea29df168a4","modified":1630313460401},{"_id":"themes/kaze/src/scripts/menuButton.ts","hash":"87dfe7069e11b72e84f6b7583656b7f229f86dbc","modified":1630313460401},{"_id":"themes/kaze/src/scripts/popButton.ts","hash":"55c819665e573def9496ff881dfb467eee5be1e4","modified":1630313460401},{"_id":"themes/kaze/src/scripts/rollup.config.js","hash":"5b172c73b324a3e35efcf94063331ac2a2f47a6b","modified":1630313460402},{"_id":"themes/kaze/src/scripts/scrollUp.ts","hash":"4db7c436ba93ec10acf3ecf7b67f3ebc8dae7a5a","modified":1630313460402},{"_id":"themes/kaze/src/scripts/search.ts","hash":"22977bc90603643e89fec560ca2c8da52415dd6f","modified":1630313460402},{"_id":"themes/kaze/src/scripts/tsconfig.json","hash":"ba07b3d567bfab7b4fcccc0efcfe72e3917dc0d7","modified":1630313460402},{"_id":"themes/kaze/layout/_partial/plugins/latex.ejs","hash":"642795cb714e753795c0402798cbb67f6ad76426","modified":1630313460373},{"_id":"themes/kaze/layout/_partial/plugins/lightbox.ejs","hash":"9a2c363ab54d64a1c9d0fc0cd1652e029013047c","modified":1630313460373},{"_id":"themes/kaze/source/css/_base/color.styl","hash":"c217c874ebf704cae31cef9787c7330e4d7d67f0","modified":1630313460384},{"_id":"themes/kaze/source/css/_base/highlight.styl","hash":"466974079c5f2cedc89e5ffa65b79beefe1d521b","modified":1630313460384},{"_id":"themes/kaze/source/css/_base/index.styl","hash":"c5eb9ee07af5825d919504fd55acaf7c74f92edc","modified":1630313460385},{"_id":"themes/kaze/source/css/_base/reset.styl","hash":"87dfbf9add559fa20ac922e73db9077c43dac180","modified":1630313460385},{"_id":"themes/kaze/source/css/_mixins/index.styl","hash":"f39e33c0d5b45e3c737207f7eb187a406d444ea8","modified":1630313460386},{"_id":"themes/kaze/source/css/_pages/about.styl","hash":"100e60ffcc52bef725ee8ef2d2d3d7384b2209c3","modified":1630313663202},{"_id":"themes/kaze/source/css/_pages/archives.styl","hash":"af3ce4bd66908822a194b57db497aefd2020b187","modified":1630313460386},{"_id":"themes/kaze/source/css/_pages/categories.styl","hash":"7f4b6f9f25e2bb00196c84de4827dc1fd2138aa9","modified":1630313460387},{"_id":"themes/kaze/source/css/_pages/index.styl","hash":"26f96b71c3399a0091d9a3eeb013d113834c6de2","modified":1630313460387},{"_id":"themes/kaze/source/css/_pages/rewrite.styl","hash":"00f3b9899d89058da78ed63ed7e7e02476074ac7","modified":1630313460387},{"_id":"themes/kaze/source/css/_pages/tags.styl","hash":"ecf086869ac2b3a7c8ac35259c67bce7491c8850","modified":1630313460388},{"_id":"themes/kaze/source/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1630313460395},{"_id":"themes/kaze/source/css/_variables/index.styl","hash":"79e9e1423705a8a28fb902eaa634beebbcb0a353","modified":1630313460394},{"_id":"themes/kaze/source/js/lib/lozad.min.js","hash":"2230059353a889fb3b6c7746030a7f3267fb4568","modified":1630313460396},{"_id":"themes/kaze/source/js/lib/md5.min.js","hash":"aed768f6bf5e3518a403452cb400b098fe4eb629","modified":1630313460396},{"_id":"themes/kaze/layout/_partial/plugins/comments/gitalk.ejs","hash":"1df54c8518b7c877ca1fd23bdac956935502edbc","modified":1630313460372},{"_id":"themes/kaze/layout/_partial/plugins/comments/livere.ejs","hash":"433f78a6bcdb944050868f33a2e326511bdd3f09","modified":1630313460372},{"_id":"themes/kaze/layout/_partial/plugins/comments/valine.ejs","hash":"e60f4ecbfff3b97ef093e3d241635aa877921e40","modified":1630313460373},{"_id":"themes/kaze/layout/_partial/plugins/comments/waline.ejs","hash":"c6b6cc91f33363740da2972b9ca2d7e5f16fd4aa","modified":1630313460373},{"_id":"themes/kaze/source/css/_pages/widgets/archive.styl","hash":"2f10c1c6da71c04b0232657dc6d6f30bd0b3036d","modified":1630313460388},{"_id":"themes/kaze/source/css/_pages/widgets/author.styl","hash":"48681a5fe41fa97514d61566032b887115b9ab20","modified":1630313663202},{"_id":"themes/kaze/source/css/_pages/widgets/button.styl","hash":"0cf7036ab2be25adc99b2ebb4a9f1bae492c278a","modified":1630313460389},{"_id":"themes/kaze/source/css/_pages/widgets/card.styl","hash":"9d224401bc45bd9f8fc27d71221ab94329f6c986","modified":1630313663203},{"_id":"themes/kaze/source/css/_pages/widgets/categories.styl","hash":"a482b11019600b12606e8f3ebf9fbd3b3cf9407d","modified":1630313663203},{"_id":"themes/kaze/source/css/_pages/widgets/columns.styl","hash":"0dce9e38b8ee4a3aae49b2b978859b01f132bf5f","modified":1630313460390},{"_id":"themes/kaze/source/css/_pages/widgets/container.styl","hash":"b62f9beb50f9bc6272b3b8bda0eff3eb049a31a2","modified":1630313460390},{"_id":"themes/kaze/source/css/_pages/widgets/footer.styl","hash":"30fa2c37da0c064118b3d7a654d3a0cbcbcb0683","modified":1630313460390},{"_id":"themes/kaze/source/css/_pages/widgets/nav.styl","hash":"f3a2dcfa7b57efc97bf5602112042d335f88dcd1","modified":1630313663204},{"_id":"themes/kaze/source/css/_pages/widgets/friends.styl","hash":"b5038754d995946ff09836b0d952dd1a5e131ab8","modified":1630313663204},{"_id":"themes/kaze/source/css/_pages/widgets/pagination.styl","hash":"87787a0ac9863dc2ef4647e665dc7723116af9c6","modified":1630313460391},{"_id":"themes/kaze/source/css/_pages/widgets/post.styl","hash":"fdb9b1c4163746a0858f7a60c59531dc0b6c4a1f","modified":1630313460391},{"_id":"themes/kaze/source/css/_pages/widgets/postlist.styl","hash":"8dd8f1c8e10f28f7895635f26d7269b01f7f60d5","modified":1630313460392},{"_id":"themes/kaze/source/css/_pages/widgets/recentposts.styl","hash":"694b653ce2c9dff023382468df2c3fecb89a9e03","modified":1630313460392},{"_id":"themes/kaze/source/css/_pages/widgets/search.styl","hash":"56713141669b5fc5a341ce625d67e3be60822ba3","modified":1630313460392},{"_id":"themes/kaze/source/css/_pages/widgets/tags.styl","hash":"8e28ad889a39547722ccd39aceab6bdf674657a4","modified":1630313460393},{"_id":"themes/kaze/source/css/_pages/widgets/section.styl","hash":"708375feb91a99dd4dd6be07422991c7aaa74813","modified":1630313460393},{"_id":"themes/kaze/source/css/_pages/widgets/toc.styl","hash":"4af392d4097e9ac649686134237c7bc46a3006f5","modified":1630313460393},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.css","hash":"3898827bc70ad71257f992ad1db7af29c391613d","modified":1630313460395},{"_id":"themes/kaze/source/js/lib/prism/prism-coy.min.css","hash":"24a435be86a12adf78fc448aa52f6fb7b635eb04","modified":1630313460396},{"_id":"themes/kaze/source/js/lib/lightbox/baguetteBox.min.js","hash":"24c5e555525ee9d41e6e48a14954d03bd689a9aa","modified":1630313460396},{"_id":"themes/kaze/source/js/lib/prism/prism-dark.min.css","hash":"e13ef6cdba90cb700e894ceff4584e95bd60de4c","modified":1630313460396},{"_id":"themes/kaze/source/js/lib/prism/prism-funky.min.css","hash":"c7bca25425490b9465bd546b2d08f28094dc25ee","modified":1630313460397},{"_id":"themes/kaze/source/js/lib/prism/prism-line-numbers.min.css","hash":"b8d1a09efe704ebd1854c894f49b573721b7427d","modified":1630313460397},{"_id":"themes/kaze/source/js/lib/prism/prism-okaidia.min.css","hash":"641ab0b006056b1182d4deb958a340033094f7ca","modified":1630313460398},{"_id":"themes/kaze/source/js/lib/prism/prism-solarizedlight.min.css","hash":"cf3751130cc2c473d8b6535b5eea7799373875b0","modified":1630313460398},{"_id":"themes/kaze/source/js/lib/prism/prism-tomorrow.min.css","hash":"9ae9c010592228f0913714d2406420ab9d4dc7b4","modified":1630313460398},{"_id":"themes/kaze/source/js/lib/prism/prism.min.css","hash":"aa3607158053897633d6cf9247b64a1df8f13ec3","modified":1630313460399},{"_id":"themes/kaze/source/js/lib/prism/prism-twilight.min.css","hash":"402395b16aacc61cd76002ca1eea02d101c98380","modified":1630313460399},{"_id":"public/search.json","hash":"28fb8ce9e6782898b8e6039d71fceef204b05f7b","modified":1630404603321},{"_id":"public/about/index.html","hash":"3f3a57060e0e34c37e0d4c1fb0b18e4ccb818829","modified":1630403694798},{"_id":"public/2021/08/30/Fiddler-Proxy/index.html","hash":"c0c61da69dd49954cdc333b14e0d696447637664","modified":1630403694798},{"_id":"public/2021/08/30/Web_Hexo/index.html","hash":"d907286da77017e0bfef19b09baf1e7aead13b0d","modified":1630401959213},{"_id":"public/2021/08/12/Linux-Crontab/index.html","hash":"3818697c2cd17503d3dda0d9914c310ef4dbc1d7","modified":1630403694798},{"_id":"public/2021/08/13/Python-Selenium/index.html","hash":"b2b548c941cb136c189e085467cf8165649bccfd","modified":1630403694798},{"_id":"public/2021/08/11/Hexo_Article/index.html","hash":"79fe146b291fd751e4bbb89b378680c9b20ae89d","modified":1630403694798},{"_id":"public/2021/08/06/Server_Screen/index.html","hash":"7a8a7b1b8bf5783afbfa213a5402ebf5f72d0809","modified":1630404603321},{"_id":"public/archives/index.html","hash":"bf779f83aa92e6cb33b034f9c54a70a734a2fdd6","modified":1630403694798},{"_id":"public/archives/2021/index.html","hash":"12cfebd724b20422f40c446485dd7db097ca8d25","modified":1630403694798},{"_id":"public/archives/2021/08/index.html","hash":"20c1f7c29d226192558aff69a5633fa7b1ddc978","modified":1630403694798},{"_id":"public/categories/测试相关/index.html","hash":"d3e364e54e9fd5d34e1e0a9e1c535f112c099a24","modified":1630403694798},{"_id":"public/categories/WEB前端/index.html","hash":"fb3f12340235477b6ce1856abe2330a5129e325b","modified":1630403694798},{"_id":"public/categories/服务器/index.html","hash":"4cbbd785fb4b1a88cdcf0b68fa9b08c86ee8b117","modified":1630403694798},{"_id":"public/tags/Fiddler/index.html","hash":"758bbf36de7c2960a19bd8d6b97efcaf64cdbc44","modified":1630403694798},{"_id":"public/tags/测试工具/index.html","hash":"04a8b4b63fbe4c765b5ddf099ad8664e64123dec","modified":1630403694798},{"_id":"public/tags/Hexo/index.html","hash":"574f55418b1dd1ee57b2b96a8ff36840baf38201","modified":1630403694798},{"_id":"public/tags/博客/index.html","hash":"dde57982d3556d85f88dc79d7c932db5499a8900","modified":1630403694798},{"_id":"public/tags/Linux/index.html","hash":"2d40d854a2e8b9b2642cfcb4690a6b9fbba4d31a","modified":1630403694798},{"_id":"public/tags/定时任务/index.html","hash":"68fa9a113b854983b1f01a83a2d9667478dca41f","modified":1630403694798},{"_id":"public/tags/部署/index.html","hash":"44e18189d010b0d0bbf7bf1362d6ac27cfcfb280","modified":1630403694798},{"_id":"public/tags/python/index.html","hash":"dc863f9c20031e8ef7e21aed2484bf6a3daa2ce9","modified":1630403694798},{"_id":"public/tags/selenium/index.html","hash":"c60fac325a8ea7ab1185b74926e3c30ebbdd21da","modified":1630403694798},{"_id":"public/tags/自动化测试/index.html","hash":"c2306a91d578697a8ac8ed44029de945078489c9","modified":1630403694798},{"_id":"public/index.html","hash":"2663e1607ee199087e4c9f573c627b58fbf82ae8","modified":1630403694798},{"_id":"public/categories/index.html","hash":"895a187a6b076f899182e61143660c133550d755","modified":1630403694798},{"_id":"public/tags/index.html","hash":"06b0e411d091e627ea854e637191eef9adc4900d","modified":1630403694798},{"_id":"public/links/index.html","hash":"bbfe6052bf29e34a7ccd71abd29d74294f933084","modified":1630403694798},{"_id":"public/2021/08/12/Linux-Crontab/crontab_sel.png","hash":"9511d6800cc37be26709abb9e9391bd795a09935","modified":1630401925747},{"_id":"public/2021/08/30/Web_Hexo/git_version.png","hash":"5040a21115b7f4e7cda4367f4baaa997f27b35d2","modified":1630401925747},{"_id":"public/css/prism-tomorrow.css","hash":"733208631ad1ebf0ba27f7e6f02eb11414d4e284","modified":1630401925747},{"_id":"public/css/prism-line-numbers.css","hash":"2f60836bdbdd93e2adbd172dbd304a45c37942e6","modified":1630401925747},{"_id":"public/2021/08/30/Fiddler-Proxy/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/2021/08/11/Hexo_Article/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/2021/08/12/Linux-Crontab/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/2021/08/06/Server_Screen/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/2021/08/13/Python-Selenium/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/2021/08/30/Web_Hexo/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401925747},{"_id":"public/js/main.js","hash":"4fad4e322bcea16bfd37dca9449419528d0e2f95","modified":1630401925747},{"_id":"public/js/lib/lozad.min.js","hash":"31d6033296c6e6ebff829ab29d171bac3177280d","modified":1630401925747},{"_id":"public/js/lib/busuanzi.min.js","hash":"6e41f31100ae7eb3a6f23f2c168f6dd56e7f7a9a","modified":1630401925747},{"_id":"public/js/lib/md5.min.js","hash":"ab074f76aa161e2851e19733d802a66c9a242387","modified":1630401925747},{"_id":"public/js/lib/lightbox/baguetteBox.min.css","hash":"4daa164702723f5206591005151dc89f58eab559","modified":1630401925747},{"_id":"public/js/lib/lightbox/baguetteBox.min.js","hash":"300d6a58c385a454ac7f6b271e210ab59f54796c","modified":1630401925747},{"_id":"public/js/lib/prism/prism-dark.min.css","hash":"99ad7013f4e2cb94d6858f1d338ce24976722e16","modified":1630401925747},{"_id":"public/js/lib/prism/prism-coy.min.css","hash":"de43e5d8fe8ac0e5be493fc37280a14764d224ba","modified":1630401925747},{"_id":"public/js/lib/prism/prism-okaidia.min.css","hash":"a611beee4ccd9bc303667159ad2977fc4fa02126","modified":1630401925747},{"_id":"public/js/lib/prism/prism-solarizedlight.min.css","hash":"58ddae9f0df85468118a028e24b975848e22488c","modified":1630401925747},{"_id":"public/js/lib/prism/prism-twilight.min.css","hash":"18a27c7ef76965a40daaab90035500a3ad7f2cbf","modified":1630401925747},{"_id":"public/js/lib/prism/prism-tomorrow.min.css","hash":"ff9820d63a78827b2798030c4734e9c752183953","modified":1630401925747},{"_id":"public/js/lib/prism/prism-funky.min.css","hash":"1b4f667352bde11377b82f6402af9470ca7d410d","modified":1630401925747},{"_id":"public/js/lib/prism/prism-line-numbers.min.css","hash":"7831e69297d5fadf91f33f63f2aeb58f0c374e6b","modified":1630401925747},{"_id":"public/js/lib/prism/prism.min.css","hash":"3e748cee6ef8cdaceec5335971b8d133aa9dcfa3","modified":1630401925747},{"_id":"public/css/main.css","hash":"6fd44a9d7c989e2e9f05a95ebd48d709da677f70","modified":1630401925747},{"_id":"public/2021/08/25/Submit-Test/index.html","hash":"baf5f188d4a7dd816ac31c61310a1d5845b077f7","modified":1630404603321},{"_id":"public/tags/测试文档/index.html","hash":"c042c2e98bafb8e748462a70cdad7004147bc19c","modified":1630403694798},{"_id":"public/2021/08/25/Submit-Test/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630401959213},{"_id":"public/2021/08/31/Web_Hexo/index.html","hash":"67ed8ef95c33bdc5e70899e5b52a4c713208d822","modified":1630404603321},{"_id":"public/2021/08/31/Web_Hexo/git_version.png","hash":"5040a21115b7f4e7cda4367f4baaa997f27b35d2","modified":1630403694798},{"_id":"public/2021/08/31/Web_Hexo/WX_QR_code.png","hash":"3d2620faccdcc5c19b8b218da730e6aeb03d195d","modified":1630403694798}],"Category":[{"name":"测试相关","_id":"ckszv7lx8000384u3hobu9fx8"},{"name":"WEB前端","_id":"ckszv7lxc000884u38evjef0s"},{"name":"服务器","_id":"ckszv7lxf000c84u31rzocoe0"}],"Data":[],"Page":[{"title":"关于","date":"2021-08-09T06:50:49.000Z","type":"about","layout":"about","_content":"","source":"about/index.md","raw":"---\ntitle: 关于\ndate: 2021-08-09 14:50:49\ntype: 'about'\nlayout: 'about'\n---\n","updated":"2021-08-30T08:54:20.449Z","path":"about/index.html","comments":1,"_id":"ckszv7lww000084u324rx2rpv","content":"","site":{"data":{}},"excerpt":"","more":""}],"Post":[{"title":"Fiddler抓包工具使用及配置","date":"2021-08-30T09:14:41.000Z","_content":"## 一、什么是Fiddler？\n<font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n## 二、下载安装Fiddler\n{% note info %}\nFiddler官网下载地址：[打开下载地址](https://www.telerik.com/download/fiddler)\n{% endnote %}\n## 三、如何配置Fiddler？\n安装完成后，打开软件\n![添加微信](Fiddler-Proxy/WX_QR_code.png)\n","source":"_posts/Fiddler-Proxy.md","raw":"---\ntitle: Fiddler抓包工具使用及配置\ndate: 2021-08-30 17:14:41\ntags: [Fiddler, 测试工具]\ncategories: 测试相关\n---\n## 一、什么是Fiddler？\n<font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n## 二、下载安装Fiddler\n{% note info %}\nFiddler官网下载地址：[打开下载地址](https://www.telerik.com/download/fiddler)\n{% endnote %}\n## 三、如何配置Fiddler？\n安装完成后，打开软件\n![添加微信](Fiddler-Proxy/WX_QR_code.png)\n","slug":"Fiddler-Proxy","published":1,"updated":"2021-08-31T09:54:07.491Z","_id":"ckszv7lwz000184u37wowawk7","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Fiddler？\"><a href=\"#一、什么是Fiddler？\" class=\"headerlink\" title=\"一、什么是Fiddler？\"></a>一、什么是Fiddler？</h2><p><font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。</p>\n<h2 id=\"二、下载安装Fiddler\"><a href=\"#二、下载安装Fiddler\" class=\"headerlink\" title=\"二、下载安装Fiddler\"></a>二、下载安装Fiddler</h2><div class=\"post-note note-info\"><p>Fiddler官网下载地址：<a href=\"https://www.telerik.com/download/fiddler\">打开下载地址</a></p></div>\n<h2 id=\"三、如何配置Fiddler？\"><a href=\"#三、如何配置Fiddler？\" class=\"headerlink\" title=\"三、如何配置Fiddler？\"></a>三、如何配置Fiddler？</h2><p>安装完成后，打开软件<br><img src=\"/2021/08/30/Fiddler-Proxy/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/30/Fiddler-Proxy/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Fiddler？\"><a href=\"#一、什么是Fiddler？\" class=\"headerlink\" title=\"一、什么是Fiddler？\"></a>一、什么是Fiddler？</h2><p><font color=\"red\">Fiddler </font>是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。</p>\n<h2 id=\"二、下载安装Fiddler\"><a href=\"#二、下载安装Fiddler\" class=\"headerlink\" title=\"二、下载安装Fiddler\"></a>二、下载安装Fiddler</h2><div class=\"post-note note-info\"><p>Fiddler官网下载地址：<a href=\"https://www.telerik.com/download/fiddler\">打开下载地址</a></p></div>\n<h2 id=\"三、如何配置Fiddler？\"><a href=\"#三、如何配置Fiddler？\" class=\"headerlink\" title=\"三、如何配置Fiddler？\"></a>三、如何配置Fiddler？</h2><p>安装完成后，打开软件<br><img src=\"/2021/08/30/Fiddler-Proxy/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Hexo博客新建文章","date":"2021-08-11T01:55:21.000Z","_content":"## 创建新文章\n### 一、新文章创建命令\n``` bash\nhexo new <模板名称> <文件名称>\n```\n### 二、模板名称简介\n| 模板名称     | 作用   | 路径             |\n| ---------- | ------ | ---------------- |\n| post     | 新建文章      | /source/_posts/ |\n| draft     | 新建草稿          | /source/_drafts/           |\n| page   | 新建页面(如标签、分类)      | /source/ |\n\n{% note warning %}\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n{% endnote %}\n\n## 编辑新文章内容（基于 Markdown）\n### 一、编辑头部信息\n打开刚刚创建的.md文件，我们可以看到被两个\"---\"包围的区域，在此区域中可填写以下参数\n\n|参数名称|作用|\n|----------|------|\n| title     | 网站标题      |\n| tags     | \t文章标签，支持多个。(如：[博客,前端])          |\n| categories   | 文章分类(如：前端)      |\n\n### 二、基本语法\n#### 1.什么是Markdown？\n{% note info %}\nMarkdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n{% endnote %}\n#### 2.Markdown基本语法\n##### 1.标题。一共支持六级\n``` bash\n# //一级标题\n## //二级标题\n### //三级标题\n#### //四级标题\n##### //五级标题\n###### //六级标题\n```\n##### 2.字体\n``` bash\n*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来\n```\n##### 3.引用\n在引用的文字前加上\">\"即可\n``` bash\n> 这是引用的内容\n>> 这是引用的内容\n>>> 这是引用的内容\n```\n##### 4.分割线\n三个或者三个以上的 - 或者 * 都可以。\n``` bash\n---\n----\n***\n*****\n```\n##### 5.图片\n如果要在本地上传图片，那首先得安装图片插件\n``` bash\nnpm install hexo-asset-image --save\n```\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\n``` bash\nhexo new post article\n```\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n``` bash\n![这是一张图片](article/img.png) //![图片描述](图片路径) \n```\n{% note warning %}\n提示：注意文件夹名称必须与文件名称一致\n{% endnote %}\n\n##### 6.表格\n``` bash\n|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n```\n##### 7.超链接\n``` bash\n[打开百度](http://www.baidu.com, \"这是百度链接\") //[链接文字](链接地址 \"链接描述\")\n```\n![添加微信](Hexo_Article/WX_QR_code.png)","source":"_posts/Hexo_Article.md","raw":"---\ntitle: Hexo博客新建文章\ndate: 2021-08-11 09:55:21\ntags: [Hexo, 博客]\ncategories: WEB前端\n---\n## 创建新文章\n### 一、新文章创建命令\n``` bash\nhexo new <模板名称> <文件名称>\n```\n### 二、模板名称简介\n| 模板名称     | 作用   | 路径             |\n| ---------- | ------ | ---------------- |\n| post     | 新建文章      | /source/_posts/ |\n| draft     | 新建草稿          | /source/_drafts/           |\n| page   | 新建页面(如标签、分类)      | /source/ |\n\n{% note warning %}\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n{% endnote %}\n\n## 编辑新文章内容（基于 Markdown）\n### 一、编辑头部信息\n打开刚刚创建的.md文件，我们可以看到被两个\"---\"包围的区域，在此区域中可填写以下参数\n\n|参数名称|作用|\n|----------|------|\n| title     | 网站标题      |\n| tags     | \t文章标签，支持多个。(如：[博客,前端])          |\n| categories   | 文章分类(如：前端)      |\n\n### 二、基本语法\n#### 1.什么是Markdown？\n{% note info %}\nMarkdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n{% endnote %}\n#### 2.Markdown基本语法\n##### 1.标题。一共支持六级\n``` bash\n# //一级标题\n## //二级标题\n### //三级标题\n#### //四级标题\n##### //五级标题\n###### //六级标题\n```\n##### 2.字体\n``` bash\n*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来\n```\n##### 3.引用\n在引用的文字前加上\">\"即可\n``` bash\n> 这是引用的内容\n>> 这是引用的内容\n>>> 这是引用的内容\n```\n##### 4.分割线\n三个或者三个以上的 - 或者 * 都可以。\n``` bash\n---\n----\n***\n*****\n```\n##### 5.图片\n如果要在本地上传图片，那首先得安装图片插件\n``` bash\nnpm install hexo-asset-image --save\n```\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\n``` bash\nhexo new post article\n```\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n``` bash\n![这是一张图片](article/img.png) //![图片描述](图片路径) \n```\n{% note warning %}\n提示：注意文件夹名称必须与文件名称一致\n{% endnote %}\n\n##### 6.表格\n``` bash\n|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n```\n##### 7.超链接\n``` bash\n[打开百度](http://www.baidu.com, \"这是百度链接\") //[链接文字](链接地址 \"链接描述\")\n```\n![添加微信](Hexo_Article/WX_QR_code.png)","slug":"Hexo_Article","published":1,"updated":"2021-08-31T09:53:56.000Z","_id":"ckszv7lx6000284u3bgaf7t35","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><h3 id=\"一、新文章创建命令\"><a href=\"#一、新文章创建命令\" class=\"headerlink\" title=\"一、新文章创建命令\"></a>一、新文章创建命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new &lt;模板名称&gt; &lt;文件名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"二、模板名称简介\"><a href=\"#二、模板名称简介\" class=\"headerlink\" title=\"二、模板名称简介\"></a>二、模板名称简介</h3><table>\n<thead>\n<tr>\n<th>模板名称</th>\n<th>作用</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面(如标签、分类)</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<div class=\"post-note note-warning\"><p>提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称</p></div>\n\n<h2 id=\"编辑新文章内容（基于-Markdown）\"><a href=\"#编辑新文章内容（基于-Markdown）\" class=\"headerlink\" title=\"编辑新文章内容（基于 Markdown）\"></a>编辑新文章内容（基于 Markdown）</h2><h3 id=\"一、编辑头部信息\"><a href=\"#一、编辑头部信息\" class=\"headerlink\" title=\"一、编辑头部信息\"></a>一、编辑头部信息</h3><p>打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>文章标签，支持多个。(如：[博客,前端])</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文章分类(如：前端)</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1-什么是Markdown？\"><a href=\"#1-什么是Markdown？\" class=\"headerlink\" title=\"1.什么是Markdown？\"></a>1.什么是Markdown？</h4><div class=\"post-note note-info\"><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。</p></div>\n<h4 id=\"2-Markdown基本语法\"><a href=\"#2-Markdown基本语法\" class=\"headerlink\" title=\"2.Markdown基本语法\"></a>2.Markdown基本语法</h4><h5 id=\"1-标题。一共支持六级\"><a href=\"#1-标题。一共支持六级\" class=\"headerlink\" title=\"1.标题。一共支持六级\"></a>1.标题。一共支持六级</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># &#x2F;&#x2F;一级标题\n## &#x2F;&#x2F;二级标题\n### &#x2F;&#x2F;三级标题\n#### &#x2F;&#x2F;四级标题\n##### &#x2F;&#x2F;五级标题\n###### &#x2F;&#x2F;六级标题<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2.字体\"></a>2.字体</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">*斜体* &#x2F;&#x2F;左右分别用一个*号包起来\n**加粗** &#x2F;&#x2F;左右分别用两个*号包起来\n***斜体加粗*** &#x2F;&#x2F;左右分别用三个*号包起来\n~~删除线~~ &#x2F;&#x2F;左右分别用两个~~号包起来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3.引用\"></a>3.引用</h5><p>在引用的文字前加上”&gt;”即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&gt; 这是引用的内容\n&gt;&gt; 这是引用的内容\n&gt;&gt;&gt; 这是引用的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-分割线\"><a href=\"#4-分割线\" class=\"headerlink\" title=\"4.分割线\"></a>4.分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---\n----\n***\n*****<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"5-图片\"><a href=\"#5-图片\" class=\"headerlink\" title=\"5.图片\"></a>5.图片</h5><p>如果要在本地上传图片，那首先得安装图片插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install hexo-asset-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new post article<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">![这是一张图片](article&#x2F;img.png) &#x2F;&#x2F;![图片描述](图片路径) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-warning\"><p>提示：注意文件夹名称必须与文件名称一致</p></div>\n\n<h5 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"7-超链接\"><a href=\"#7-超链接\" class=\"headerlink\" title=\"7.超链接\"></a>7.超链接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[打开百度](http:&#x2F;&#x2F;www.baidu.com, &quot;这是百度链接&quot;) &#x2F;&#x2F;[链接文字](链接地址 &quot;链接描述&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/11/Hexo_Article/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/11/Hexo_Article/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"创建新文章\"><a href=\"#创建新文章\" class=\"headerlink\" title=\"创建新文章\"></a>创建新文章</h2><h3 id=\"一、新文章创建命令\"><a href=\"#一、新文章创建命令\" class=\"headerlink\" title=\"一、新文章创建命令\"></a>一、新文章创建命令</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new &lt;模板名称&gt; &lt;文件名称&gt;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"二、模板名称简介\"><a href=\"#二、模板名称简介\" class=\"headerlink\" title=\"二、模板名称简介\"></a>二、模板名称简介</h3><table>\n<thead>\n<tr>\n<th>模板名称</th>\n<th>作用</th>\n<th>路径</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>post</td>\n<td>新建文章</td>\n<td>/source/_posts/</td>\n</tr>\n<tr>\n<td>draft</td>\n<td>新建草稿</td>\n<td>/source/_drafts/</td>\n</tr>\n<tr>\n<td>page</td>\n<td>新建页面(如标签、分类)</td>\n<td>/source/</td>\n</tr>\n</tbody></table>\n<div class=\"post-note note-warning\"><p>提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称</p></div>\n\n<h2 id=\"编辑新文章内容（基于-Markdown）\"><a href=\"#编辑新文章内容（基于-Markdown）\" class=\"headerlink\" title=\"编辑新文章内容（基于 Markdown）\"></a>编辑新文章内容（基于 Markdown）</h2><h3 id=\"一、编辑头部信息\"><a href=\"#一、编辑头部信息\" class=\"headerlink\" title=\"一、编辑头部信息\"></a>一、编辑头部信息</h3><p>打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数</p>\n<table>\n<thead>\n<tr>\n<th>参数名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>title</td>\n<td>网站标题</td>\n</tr>\n<tr>\n<td>tags</td>\n<td>文章标签，支持多个。(如：[博客,前端])</td>\n</tr>\n<tr>\n<td>categories</td>\n<td>文章分类(如：前端)</td>\n</tr>\n</tbody></table>\n<h3 id=\"二、基本语法\"><a href=\"#二、基本语法\" class=\"headerlink\" title=\"二、基本语法\"></a>二、基本语法</h3><h4 id=\"1-什么是Markdown？\"><a href=\"#1-什么是Markdown？\" class=\"headerlink\" title=\"1.什么是Markdown？\"></a>1.什么是Markdown？</h4><div class=\"post-note note-info\"><p>Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。</p></div>\n<h4 id=\"2-Markdown基本语法\"><a href=\"#2-Markdown基本语法\" class=\"headerlink\" title=\"2.Markdown基本语法\"></a>2.Markdown基本语法</h4><h5 id=\"1-标题。一共支持六级\"><a href=\"#1-标题。一共支持六级\" class=\"headerlink\" title=\"1.标题。一共支持六级\"></a>1.标题。一共支持六级</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\"># &#x2F;&#x2F;一级标题\n## &#x2F;&#x2F;二级标题\n### &#x2F;&#x2F;三级标题\n#### &#x2F;&#x2F;四级标题\n##### &#x2F;&#x2F;五级标题\n###### &#x2F;&#x2F;六级标题<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-字体\"><a href=\"#2-字体\" class=\"headerlink\" title=\"2.字体\"></a>2.字体</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">*斜体* &#x2F;&#x2F;左右分别用一个*号包起来\n**加粗** &#x2F;&#x2F;左右分别用两个*号包起来\n***斜体加粗*** &#x2F;&#x2F;左右分别用三个*号包起来\n~~删除线~~ &#x2F;&#x2F;左右分别用两个~~号包起来<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"3-引用\"><a href=\"#3-引用\" class=\"headerlink\" title=\"3.引用\"></a>3.引用</h5><p>在引用的文字前加上”&gt;”即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&gt; 这是引用的内容\n&gt;&gt; 这是引用的内容\n&gt;&gt;&gt; 这是引用的内容<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"4-分割线\"><a href=\"#4-分割线\" class=\"headerlink\" title=\"4.分割线\"></a>4.分割线</h5><p>三个或者三个以上的 - 或者 * 都可以。</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">---\n----\n***\n*****<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"5-图片\"><a href=\"#5-图片\" class=\"headerlink\" title=\"5.图片\"></a>5.图片</h5><p>如果要在本地上传图片，那首先得安装图片插件</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install hexo-asset-image --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo new post article<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">![这是一张图片](article&#x2F;img.png) &#x2F;&#x2F;![图片描述](图片路径) <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-warning\"><p>提示：注意文件夹名称必须与文件名称一致</p></div>\n\n<h5 id=\"6-表格\"><a href=\"#6-表格\" class=\"headerlink\" title=\"6.表格\"></a>6.表格</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"7-超链接\"><a href=\"#7-超链接\" class=\"headerlink\" title=\"7.超链接\"></a>7.超链接</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[打开百度](http:&#x2F;&#x2F;www.baidu.com, &quot;这是百度链接&quot;) &#x2F;&#x2F;[链接文字](链接地址 &quot;链接描述&quot;)<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/11/Hexo_Article/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Linux中的定时任务(crontab)","date":"2021-08-12T05:49:14.000Z","_content":"## 一、什么是Crontab？\n<font color=red>cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=red>cron</font> 是被默认安装并启动的。\n## 二、为什么我们要使用Crontab？\n在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n## 三、如何使用Crontab？\n### 1. 查看Crontab的工作表\n``` bash\ncrontab -l\n```\n![查看工作表](Linux-Crontab/crontab_sel.png)\n### 2. 编辑Crontab工作表\n``` bash\ncrontab -e\n```\n{% note primary %}\n进入编辑页之后，输入\"a\"进入编辑模式。编辑完成之后，ctrl+c保存，输入\":\"，再输入\"wq\"加回车退出编辑模式。\n{% endnote %}\n### 3. 删除Crontab工作表中的工作\n``` bash\ncrontab -r\n```\n### 4. Crontab的命令构成\n#### 4.1 数字范围\n``` bash \n0-59 0-23 1-31 1-12 0-7 python main.py\n```\n{% note primary %}\n分钟 小时 日期 月份 周 命令\n{% endnote %}\n#### 4.2 特殊字符\n``` bash\n\"*\"代表所有的取值范围内的数字，如月份字段为\"*\"，则表示1到12个月；\n\n\"/\"代表每一定时间间隔的意思，如分钟字段为\"*/10\"，表示每10分钟执行1次。\n\n\"-\"代表从某个区间范围，是闭区间。如\"2-5\"表示\"2,3,4,5\"，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n```\n#### 4.3 日志存储\n{% note primary %}\n构建完上述命令后，可在命令后端加上\">> 文件名.log\"，存储日志\n{% endnote %}\n### 5. 示例\n#### 5.1 每一分钟执行一次\"mian.py\"文件\n``` bash\n* * * * * python main.py\n```\n{% note primary %}\n因为cron默认每一分钟扫描一次，故全部设置为\"*\"即可\n{% endnote %}\n#### 5.2 每小时的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 * * * * python main.py\n```\n#### 5.3 每天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * * python main.py\n```\n#### 5.4 每隔三天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 */3 * * python main.py\n```\n#### 5.5 每周三上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * 3 python main.py\n```\n![添加微信](Linux-Crontab/WX_QR_code.png)\n","source":"_posts/Linux-Crontab.md","raw":"---\ntitle: Linux中的定时任务(crontab)\ndate: 2021-08-12 13:49:14\ntags: [Linux, 定时任务]\ncategories: 服务器\n---\n## 一、什么是Crontab？\n<font color=red>cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=red>cron</font> 是被默认安装并启动的。\n## 二、为什么我们要使用Crontab？\n在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n## 三、如何使用Crontab？\n### 1. 查看Crontab的工作表\n``` bash\ncrontab -l\n```\n![查看工作表](Linux-Crontab/crontab_sel.png)\n### 2. 编辑Crontab工作表\n``` bash\ncrontab -e\n```\n{% note primary %}\n进入编辑页之后，输入\"a\"进入编辑模式。编辑完成之后，ctrl+c保存，输入\":\"，再输入\"wq\"加回车退出编辑模式。\n{% endnote %}\n### 3. 删除Crontab工作表中的工作\n``` bash\ncrontab -r\n```\n### 4. Crontab的命令构成\n#### 4.1 数字范围\n``` bash \n0-59 0-23 1-31 1-12 0-7 python main.py\n```\n{% note primary %}\n分钟 小时 日期 月份 周 命令\n{% endnote %}\n#### 4.2 特殊字符\n``` bash\n\"*\"代表所有的取值范围内的数字，如月份字段为\"*\"，则表示1到12个月；\n\n\"/\"代表每一定时间间隔的意思，如分钟字段为\"*/10\"，表示每10分钟执行1次。\n\n\"-\"代表从某个区间范围，是闭区间。如\"2-5\"表示\"2,3,4,5\"，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n```\n#### 4.3 日志存储\n{% note primary %}\n构建完上述命令后，可在命令后端加上\">> 文件名.log\"，存储日志\n{% endnote %}\n### 5. 示例\n#### 5.1 每一分钟执行一次\"mian.py\"文件\n``` bash\n* * * * * python main.py\n```\n{% note primary %}\n因为cron默认每一分钟扫描一次，故全部设置为\"*\"即可\n{% endnote %}\n#### 5.2 每小时的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 * * * * python main.py\n```\n#### 5.3 每天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * * python main.py\n```\n#### 5.4 每隔三天上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 */3 * * python main.py\n```\n#### 5.5 每周三上午8~9点的5和30分钟执行一次\"mian.py\"文件\n``` bash\n15,30 8-9 * * 3 python main.py\n```\n![添加微信](Linux-Crontab/WX_QR_code.png)\n","slug":"Linux-Crontab","published":1,"updated":"2021-08-31T09:54:07.492Z","_id":"ckszv7lxa000584u3hr3xag31","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Crontab？\"><a href=\"#一、什么是Crontab？\" class=\"headerlink\" title=\"一、什么是Crontab？\"></a>一、什么是Crontab？</h2><p><font color=\"red\">cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=\"red\">cron</font> 是被默认安装并启动的。</p>\n<h2 id=\"二、为什么我们要使用Crontab？\"><a href=\"#二、为什么我们要使用Crontab？\" class=\"headerlink\" title=\"二、为什么我们要使用Crontab？\"></a>二、为什么我们要使用Crontab？</h2><p>在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。</p>\n<h2 id=\"三、如何使用Crontab？\"><a href=\"#三、如何使用Crontab？\" class=\"headerlink\" title=\"三、如何使用Crontab？\"></a>三、如何使用Crontab？</h2><h3 id=\"1-查看Crontab的工作表\"><a href=\"#1-查看Crontab的工作表\" class=\"headerlink\" title=\"1. 查看Crontab的工作表\"></a>1. 查看Crontab的工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" alt=\"查看工作表\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" class=\"lozad post-image\"></p>\n<h3 id=\"2-编辑Crontab工作表\"><a href=\"#2-编辑Crontab工作表\" class=\"headerlink\" title=\"2. 编辑Crontab工作表\"></a>2. 编辑Crontab工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。</p></div>\n<h3 id=\"3-删除Crontab工作表中的工作\"><a href=\"#3-删除Crontab工作表中的工作\" class=\"headerlink\" title=\"3. 删除Crontab工作表中的工作\"></a>3. 删除Crontab工作表中的工作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-Crontab的命令构成\"><a href=\"#4-Crontab的命令构成\" class=\"headerlink\" title=\"4. Crontab的命令构成\"></a>4. Crontab的命令构成</h3><h4 id=\"4-1-数字范围\"><a href=\"#4-1-数字范围\" class=\"headerlink\" title=\"4.1 数字范围\"></a>4.1 数字范围</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">0-59 0-23 1-31 1-12 0-7 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>分钟 小时 日期 月份 周 命令</p></div>\n<h4 id=\"4-2-特殊字符\"><a href=\"#4-2-特殊字符\" class=\"headerlink\" title=\"4.2 特殊字符\"></a>4.2 特殊字符</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&quot;*&quot;代表所有的取值范围内的数字，如月份字段为&quot;*&quot;，则表示1到12个月；\n\n&quot;&#x2F;&quot;代表每一定时间间隔的意思，如分钟字段为&quot;*&#x2F;10&quot;，表示每10分钟执行1次。\n\n&quot;-&quot;代表从某个区间范围，是闭区间。如&quot;2-5&quot;表示&quot;2,3,4,5&quot;，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。\n\n&quot;,&quot;分散的数字（不一定连续），如1,2,3,4,7,9。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-3-日志存储\"><a href=\"#4-3-日志存储\" class=\"headerlink\" title=\"4.3 日志存储\"></a>4.3 日志存储</h4><div class=\"post-note note-primary\"><p>构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志</p></div>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><h4 id=\"5-1-每一分钟执行一次”mian-py”文件\"><a href=\"#5-1-每一分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.1 每一分钟执行一次”mian.py”文件\"></a>5.1 每一分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">* * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>因为cron默认每一分钟扫描一次，故全部设置为”*”即可</p></div>\n<h4 id=\"5-2-每小时的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-2-每小时的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.2 每小时的5和30分钟执行一次”mian.py”文件\"></a>5.2 每小时的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 *&#x2F;3 * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 * * 3 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/12/Linux-Crontab/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Crontab？\"><a href=\"#一、什么是Crontab？\" class=\"headerlink\" title=\"一、什么是Crontab？\"></a>一、什么是Crontab？</h2><p><font color=\"red\">cron</font> 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，<font color=\"red\">cron</font> 是被默认安装并启动的。</p>\n<h2 id=\"二、为什么我们要使用Crontab？\"><a href=\"#二、为什么我们要使用Crontab？\" class=\"headerlink\" title=\"二、为什么我们要使用Crontab？\"></a>二、为什么我们要使用Crontab？</h2><p>在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。</p>\n<h2 id=\"三、如何使用Crontab？\"><a href=\"#三、如何使用Crontab？\" class=\"headerlink\" title=\"三、如何使用Crontab？\"></a>三、如何使用Crontab？</h2><h3 id=\"1-查看Crontab的工作表\"><a href=\"#1-查看Crontab的工作表\" class=\"headerlink\" title=\"1. 查看Crontab的工作表\"></a>1. 查看Crontab的工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -l<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/crontab_sel.png\" alt=\"查看工作表\"></p>\n<h3 id=\"2-编辑Crontab工作表\"><a href=\"#2-编辑Crontab工作表\" class=\"headerlink\" title=\"2. 编辑Crontab工作表\"></a>2. 编辑Crontab工作表</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -e<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。</p></div>\n<h3 id=\"3-删除Crontab工作表中的工作\"><a href=\"#3-删除Crontab工作表中的工作\" class=\"headerlink\" title=\"3. 删除Crontab工作表中的工作\"></a>3. 删除Crontab工作表中的工作</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">crontab -r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"4-Crontab的命令构成\"><a href=\"#4-Crontab的命令构成\" class=\"headerlink\" title=\"4. Crontab的命令构成\"></a>4. Crontab的命令构成</h3><h4 id=\"4-1-数字范围\"><a href=\"#4-1-数字范围\" class=\"headerlink\" title=\"4.1 数字范围\"></a>4.1 数字范围</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">0-59 0-23 1-31 1-12 0-7 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>分钟 小时 日期 月份 周 命令</p></div>\n<h4 id=\"4-2-特殊字符\"><a href=\"#4-2-特殊字符\" class=\"headerlink\" title=\"4.2 特殊字符\"></a>4.2 特殊字符</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">&quot;*&quot;代表所有的取值范围内的数字，如月份字段为&quot;*&quot;，则表示1到12个月；\n\n&quot;&#x2F;&quot;代表每一定时间间隔的意思，如分钟字段为&quot;*&#x2F;10&quot;，表示每10分钟执行1次。\n\n&quot;-&quot;代表从某个区间范围，是闭区间。如&quot;2-5&quot;表示&quot;2,3,4,5&quot;，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。\n\n&quot;,&quot;分散的数字（不一定连续），如1,2,3,4,7,9。<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"4-3-日志存储\"><a href=\"#4-3-日志存储\" class=\"headerlink\" title=\"4.3 日志存储\"></a>4.3 日志存储</h4><div class=\"post-note note-primary\"><p>构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志</p></div>\n<h3 id=\"5-示例\"><a href=\"#5-示例\" class=\"headerlink\" title=\"5. 示例\"></a>5. 示例</h3><h4 id=\"5-1-每一分钟执行一次”mian-py”文件\"><a href=\"#5-1-每一分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.1 每一分钟执行一次”mian.py”文件\"></a>5.1 每一分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">* * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>因为cron默认每一分钟扫描一次，故全部设置为”*”即可</p></div>\n<h4 id=\"5-2-每小时的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-2-每小时的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.2 每小时的5和30分钟执行一次”mian.py”文件\"></a>5.2 每小时的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 * * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-3-每天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 * * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-4-每隔三天上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 *&#x2F;3 * * python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\"><a href=\"#5-5-每周三上午8-9点的5和30分钟执行一次”mian-py”文件\" class=\"headerlink\" title=\"5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件\"></a>5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">15,30 8-9 * * 3 python main.py<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/12/Linux-Crontab/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Screen的使用方法","date":"2021-08-06T08:36:27.000Z","_content":"## 为什么要使用screen命令\nVPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n## 一、screen命令是什么？\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n## 二、如何安装screen命令？\n除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\n``` bash\nyum install screen\n``` \nCentOS 8上移除了screen，需要安装epel后安装screen执行：\n``` bash\nyum install screen\n``` \nDebian/Ubuntu系统执行：\n``` bash\napt-get install screen\n``` \n## 三、screen命令使用方法？\n### 1、常用的使用方法\n用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n#### 1.1 创建screen会话\nscreen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\n``` bash\nscreen -S lnmp\n```\n#### 1.2 暂时离开，保留screen会话中的任务或程序\n\n当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n\n#### 1.3 恢复screen会话\n\n恢复到离开前创建的lnmp会话的工作界面,执行：\n``` bash\naaaq lnmp \n```\n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\n``` bash\nscreen -ls screen\n```\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\n``` bash\nscreen -r lnmp\n```\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\n``` bash\nscreen -r 11791\n```\n\n#### 1.4 关闭screen的会话\n\n执行：\n``` bash\nexit\n```\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n#### 1.5 删除会话\n``` bash\nscreen -S session_name -X quit\n```\nor\n``` bash\nscreen -X -S 122128 quit\n```\n### 2、远程演示\n首先演示者先在服务器上执行:\n``` bash\nscreen -S test\n```\n创建一个screen会话，观众可以链接到远程服务器上执行:\n``` bash\nscreen -x test\n```\n观众屏幕上就会出现和演示者同步。\n\n### 3、常用快捷键\n\n#### 3.1 在当前screen会话中创建窗口\nCtrl+a c\n\n#### 3.2 窗口列表\nCtrl+a w\n\n#### 3.3 下一个窗口\nCtrl+a n\n\n#### 3.4 上一个窗口\nCtrl+a p\n\n#### 3.5 在第0个窗口和第9个窗口之间切换\nCtrl+a 0-9\nCtrl+a 0-9\n![添加微信](Server_Screen/WX_QR_code.png)\n","source":"_posts/Server_Screen.md","raw":"---\ntitle: Screen的使用方法\ndate: 2021-08-06 16:36:27\ntags: [Linux, 部署]\ncategories: 服务器\n---\n## 为什么要使用screen命令\nVPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n## 一、screen命令是什么？\nScreen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n## 二、如何安装screen命令？\n除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\n``` bash\nyum install screen\n``` \nCentOS 8上移除了screen，需要安装epel后安装screen执行：\n``` bash\nyum install screen\n``` \nDebian/Ubuntu系统执行：\n``` bash\napt-get install screen\n``` \n## 三、screen命令使用方法？\n### 1、常用的使用方法\n用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n#### 1.1 创建screen会话\nscreen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\n``` bash\nscreen -S lnmp\n```\n#### 1.2 暂时离开，保留screen会话中的任务或程序\n\n当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n\n#### 1.3 恢复screen会话\n\n恢复到离开前创建的lnmp会话的工作界面,执行：\n``` bash\naaaq lnmp \n```\n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\n``` bash\nscreen -ls screen\n```\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\n``` bash\nscreen -r lnmp\n```\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\n``` bash\nscreen -r 11791\n```\n\n#### 1.4 关闭screen的会话\n\n执行：\n``` bash\nexit\n```\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n#### 1.5 删除会话\n``` bash\nscreen -S session_name -X quit\n```\nor\n``` bash\nscreen -X -S 122128 quit\n```\n### 2、远程演示\n首先演示者先在服务器上执行:\n``` bash\nscreen -S test\n```\n创建一个screen会话，观众可以链接到远程服务器上执行:\n``` bash\nscreen -x test\n```\n观众屏幕上就会出现和演示者同步。\n\n### 3、常用快捷键\n\n#### 3.1 在当前screen会话中创建窗口\nCtrl+a c\n\n#### 3.2 窗口列表\nCtrl+a w\n\n#### 3.3 下一个窗口\nCtrl+a n\n\n#### 3.4 上一个窗口\nCtrl+a p\n\n#### 3.5 在第0个窗口和第9个窗口之间切换\nCtrl+a 0-9\nCtrl+a 0-9\n![添加微信](Server_Screen/WX_QR_code.png)\n","slug":"Server_Screen","published":1,"updated":"2021-08-31T09:58:52.746Z","_id":"ckszv7lxb000684u3ajuu1yfh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"为什么要使用screen命令\"><a href=\"#为什么要使用screen命令\" class=\"headerlink\" title=\"为什么要使用screen命令\"></a>为什么要使用screen命令</h2><p>VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。</p>\n<h2 id=\"一、screen命令是什么？\"><a href=\"#一、screen命令是什么？\" class=\"headerlink\" title=\"一、screen命令是什么？\"></a>一、screen命令是什么？</h2><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。</p>\n<h2 id=\"二、如何安装screen命令？\"><a href=\"#二、如何安装screen命令？\" class=\"headerlink\" title=\"二、如何安装screen命令？\"></a>二、如何安装screen命令？</h2><p>除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>CentOS 8上移除了screen，需要安装epel后安装screen执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Debian/Ubuntu系统执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-get install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、screen命令使用方法？\"><a href=\"#三、screen命令使用方法？\" class=\"headerlink\" title=\"三、screen命令使用方法？\"></a>三、screen命令使用方法？</h2><h3 id=\"1、常用的使用方法\"><a href=\"#1、常用的使用方法\" class=\"headerlink\" title=\"1、常用的使用方法\"></a>1、常用的使用方法</h3><p>用来解决文章开始我们遇到的问题，比如在安装lnmp时。</p>\n<h4 id=\"1-1-创建screen会话\"><a href=\"#1-1-创建screen会话\" class=\"headerlink\" title=\"1.1 创建screen会话\"></a>1.1 创建screen会话</h4><p>screen创建一个名字为lnmp的会话。 VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a>; 可以先执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1-2-暂时离开，保留screen会话中的任务或程序\"><a href=\"#1-2-暂时离开，保留screen会话中的任务或程序\" class=\"headerlink\" title=\"1.2 暂时离开，保留screen会话中的任务或程序\"></a>1.2 暂时离开，保留screen会话中的任务或程序</h4><p>当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)</p>\n<h4 id=\"1-3-恢复screen会话\"><a href=\"#1-3-恢复screen会话\" class=\"headerlink\" title=\"1.3 恢复screen会话\"></a>1.3 恢复screen会话</h4><p>恢复到离开前创建的lnmp会话的工作界面,执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aaaq lnmp <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -ls screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -r lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -r 11791<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"1-4-关闭screen的会话\"><a href=\"#1-4-关闭screen的会话\" class=\"headerlink\" title=\"1.4 关闭screen的会话\"></a>1.4 关闭screen的会话</h4><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">exit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a></p>\n<h4 id=\"1-5-删除会话\"><a href=\"#1-5-删除会话\" class=\"headerlink\" title=\"1.5 删除会话\"></a>1.5 删除会话</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S session_name -X quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>or</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -X -S 122128 quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、远程演示\"><a href=\"#2、远程演示\" class=\"headerlink\" title=\"2、远程演示\"></a>2、远程演示</h3><p>首先演示者先在服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个screen会话，观众可以链接到远程服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -x test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观众屏幕上就会出现和演示者同步。</p>\n<h3 id=\"3、常用快捷键\"><a href=\"#3、常用快捷键\" class=\"headerlink\" title=\"3、常用快捷键\"></a>3、常用快捷键</h3><h4 id=\"3-1-在当前screen会话中创建窗口\"><a href=\"#3-1-在当前screen会话中创建窗口\" class=\"headerlink\" title=\"3.1 在当前screen会话中创建窗口\"></a>3.1 在当前screen会话中创建窗口</h4><p>Ctrl+a c</p>\n<h4 id=\"3-2-窗口列表\"><a href=\"#3-2-窗口列表\" class=\"headerlink\" title=\"3.2 窗口列表\"></a>3.2 窗口列表</h4><p>Ctrl+a w</p>\n<h4 id=\"3-3-下一个窗口\"><a href=\"#3-3-下一个窗口\" class=\"headerlink\" title=\"3.3 下一个窗口\"></a>3.3 下一个窗口</h4><p>Ctrl+a n</p>\n<h4 id=\"3-4-上一个窗口\"><a href=\"#3-4-上一个窗口\" class=\"headerlink\" title=\"3.4 上一个窗口\"></a>3.4 上一个窗口</h4><p>Ctrl+a p</p>\n<h4 id=\"3-5-在第0个窗口和第9个窗口之间切换\"><a href=\"#3-5-在第0个窗口和第9个窗口之间切换\" class=\"headerlink\" title=\"3.5 在第0个窗口和第9个窗口之间切换\"></a>3.5 在第0个窗口和第9个窗口之间切换</h4><p>Ctrl+a 0-9<br>Ctrl+a 0-9<br><img src=\"/2021/08/06/Server_Screen/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/06/Server_Screen/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"为什么要使用screen命令\"><a href=\"#为什么要使用screen命令\" class=\"headerlink\" title=\"为什么要使用screen命令\"></a>为什么要使用screen命令</h2><p>VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。</p>\n<h2 id=\"一、screen命令是什么？\"><a href=\"#一、screen命令是什么？\" class=\"headerlink\" title=\"一、screen命令是什么？\"></a>一、screen命令是什么？</h2><p>Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。</p>\n<h2 id=\"二、如何安装screen命令？\"><a href=\"#二、如何安装screen命令？\" class=\"headerlink\" title=\"二、如何安装screen命令？\"></a>二、如何安装screen命令？</h2><p>除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>CentOS 8上移除了screen，需要安装epel后安装screen执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Debian/Ubuntu系统执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">apt-get install screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"三、screen命令使用方法？\"><a href=\"#三、screen命令使用方法？\" class=\"headerlink\" title=\"三、screen命令使用方法？\"></a>三、screen命令使用方法？</h2><h3 id=\"1、常用的使用方法\"><a href=\"#1、常用的使用方法\" class=\"headerlink\" title=\"1、常用的使用方法\"></a>1、常用的使用方法</h3><p>用来解决文章开始我们遇到的问题，比如在安装lnmp时。</p>\n<h4 id=\"1-1-创建screen会话\"><a href=\"#1-1-创建screen会话\" class=\"headerlink\" title=\"1.1 创建screen会话\"></a>1.1 创建screen会话</h4><p>screen创建一个名字为lnmp的会话。 VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a>; 可以先执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"1-2-暂时离开，保留screen会话中的任务或程序\"><a href=\"#1-2-暂时离开，保留screen会话中的任务或程序\" class=\"headerlink\" title=\"1.2 暂时离开，保留screen会话中的任务或程序\"></a>1.2 暂时离开，保留screen会话中的任务或程序</h4><p>当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)</p>\n<h4 id=\"1-3-恢复screen会话\"><a href=\"#1-3-恢复screen会话\" class=\"headerlink\" title=\"1.3 恢复screen会话\"></a>1.3 恢复screen会话</h4><p>恢复到离开前创建的lnmp会话的工作界面,执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">aaaq lnmp <span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -ls screen<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -r lnmp<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -r 11791<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<h4 id=\"1-4-关闭screen的会话\"><a href=\"#1-4-关闭screen的会话\" class=\"headerlink\" title=\"1.4 关闭screen的会话\"></a>1.4 关闭screen的会话</h4><p>执行：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">exit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 <a href=\"https://www.vpser.net/\">https://www.vpser.net/</a></p>\n<h4 id=\"1-5-删除会话\"><a href=\"#1-5-删除会话\" class=\"headerlink\" title=\"1.5 删除会话\"></a>1.5 删除会话</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S session_name -X quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>or</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -X -S 122128 quit<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2、远程演示\"><a href=\"#2、远程演示\" class=\"headerlink\" title=\"2、远程演示\"></a>2、远程演示</h3><p>首先演示者先在服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -S test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建一个screen会话，观众可以链接到远程服务器上执行:</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">screen -x test<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>观众屏幕上就会出现和演示者同步。</p>\n<h3 id=\"3、常用快捷键\"><a href=\"#3、常用快捷键\" class=\"headerlink\" title=\"3、常用快捷键\"></a>3、常用快捷键</h3><h4 id=\"3-1-在当前screen会话中创建窗口\"><a href=\"#3-1-在当前screen会话中创建窗口\" class=\"headerlink\" title=\"3.1 在当前screen会话中创建窗口\"></a>3.1 在当前screen会话中创建窗口</h4><p>Ctrl+a c</p>\n<h4 id=\"3-2-窗口列表\"><a href=\"#3-2-窗口列表\" class=\"headerlink\" title=\"3.2 窗口列表\"></a>3.2 窗口列表</h4><p>Ctrl+a w</p>\n<h4 id=\"3-3-下一个窗口\"><a href=\"#3-3-下一个窗口\" class=\"headerlink\" title=\"3.3 下一个窗口\"></a>3.3 下一个窗口</h4><p>Ctrl+a n</p>\n<h4 id=\"3-4-上一个窗口\"><a href=\"#3-4-上一个窗口\" class=\"headerlink\" title=\"3.4 上一个窗口\"></a>3.4 上一个窗口</h4><p>Ctrl+a p</p>\n<h4 id=\"3-5-在第0个窗口和第9个窗口之间切换\"><a href=\"#3-5-在第0个窗口和第9个窗口之间切换\" class=\"headerlink\" title=\"3.5 在第0个窗口和第9个窗口之间切换\"></a>3.5 在第0个窗口和第9个窗口之间切换</h4><p>Ctrl+a 0-9<br>Ctrl+a 0-9<br><img src=\"/2021/08/06/Server_Screen/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"Python+Selenium 调起浏览器","date":"2021-08-13T05:56:37.000Z","_content":"## 一、什么是Selenium？\n<font color=red>Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n## 二、安装Selenium\n### 1. 下载python的selenium安装包\n``` bash\npip install selenium\n```\n### 2. Windows下下载与浏览器版本相对应的webdriver\nchrom浏览器的web driver\n``` bash\nhttp://npm.taobao.org/mirrors/chromedriver/\n```\nfirefox（火狐浏览器）的web driver\n``` bash\nhttps://github.com/mozilla/geckodriver/releases\n```\nSafari的web driver\n``` bash\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\n```\n{% note primary %}\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n{% endnote %}\n## 三、示例\n### 1. 引入Selenium包，并调起浏览器\n``` javascript\nfrom selenium import webdriver\n```\n![添加微信](Python-Selenium/WX_QR_code.png)\n","source":"_posts/Python-Selenium.md","raw":"---\ntitle: Python+Selenium 调起浏览器\ndate: 2021-08-13 13:56:37\ntags: [python, selenium, 自动化测试]\ncategories: 测试相关\n---\n## 一、什么是Selenium？\n<font color=red>Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n## 二、安装Selenium\n### 1. 下载python的selenium安装包\n``` bash\npip install selenium\n```\n### 2. Windows下下载与浏览器版本相对应的webdriver\nchrom浏览器的web driver\n``` bash\nhttp://npm.taobao.org/mirrors/chromedriver/\n```\nfirefox（火狐浏览器）的web driver\n``` bash\nhttps://github.com/mozilla/geckodriver/releases\n```\nSafari的web driver\n``` bash\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\n```\n{% note primary %}\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n{% endnote %}\n## 三、示例\n### 1. 引入Selenium包，并调起浏览器\n``` javascript\nfrom selenium import webdriver\n```\n![添加微信](Python-Selenium/WX_QR_code.png)\n","slug":"Python-Selenium","published":1,"updated":"2021-08-31T09:54:07.492Z","_id":"ckszv7lxc000784u39gdnf2fh","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"一、什么是Selenium？\"><a href=\"#一、什么是Selenium？\" class=\"headerlink\" title=\"一、什么是Selenium？\"></a>一、什么是Selenium？</h2><p><font color=\"red\">Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>\n<h2 id=\"二、安装Selenium\"><a href=\"#二、安装Selenium\" class=\"headerlink\" title=\"二、安装Selenium\"></a>二、安装Selenium</h2><h3 id=\"1-下载python的selenium安装包\"><a href=\"#1-下载python的selenium安装包\" class=\"headerlink\" title=\"1. 下载python的selenium安装包\"></a>1. 下载python的selenium安装包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-Windows下下载与浏览器版本相对应的webdriver\"><a href=\"#2-Windows下下载与浏览器版本相对应的webdriver\" class=\"headerlink\" title=\"2. Windows下下载与浏览器版本相对应的webdriver\"></a>2. Windows下下载与浏览器版本相对应的webdriver</h3><p>chrom浏览器的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;chromedriver&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>firefox（火狐浏览器）的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;geckodriver&#x2F;releases<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Safari的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;6900&#x2F;webdriver-support-in-safari-10&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>下载完成后，将解压出来的exe文件与py文件放置同一个目录下。</p></div>\n<h2 id=\"三、示例\"><a href=\"#三、示例\" class=\"headerlink\" title=\"三、示例\"></a>三、示例</h2><h3 id=\"1-引入Selenium包，并调起浏览器\"><a href=\"#1-引入Selenium包，并调起浏览器\" class=\"headerlink\" title=\"1. 引入Selenium包，并调起浏览器\"></a>1. 引入Selenium包，并调起浏览器</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">from selenium <span class=\"token keyword\">import</span> webdriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/13/Python-Selenium/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/13/Python-Selenium/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、什么是Selenium？\"><a href=\"#一、什么是Selenium？\" class=\"headerlink\" title=\"一、什么是Selenium？\"></a>一、什么是Selenium？</h2><p><font color=\"red\">Selenium</font>是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。</p>\n<h2 id=\"二、安装Selenium\"><a href=\"#二、安装Selenium\" class=\"headerlink\" title=\"二、安装Selenium\"></a>二、安装Selenium</h2><h3 id=\"1-下载python的selenium安装包\"><a href=\"#1-下载python的selenium安装包\" class=\"headerlink\" title=\"1. 下载python的selenium安装包\"></a>1. 下载python的selenium安装包</h3><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">pip install selenium<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"2-Windows下下载与浏览器版本相对应的webdriver\"><a href=\"#2-Windows下下载与浏览器版本相对应的webdriver\" class=\"headerlink\" title=\"2. Windows下下载与浏览器版本相对应的webdriver\"></a>2. Windows下下载与浏览器版本相对应的webdriver</h3><p>chrom浏览器的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">http:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;chromedriver&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>firefox（火狐浏览器）的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;geckodriver&#x2F;releases<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>Safari的web driver</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">https:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;6900&#x2F;webdriver-support-in-safari-10&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>下载完成后，将解压出来的exe文件与py文件放置同一个目录下。</p></div>\n<h2 id=\"三、示例\"><a href=\"#三、示例\" class=\"headerlink\" title=\"三、示例\"></a>三、示例</h2><h3 id=\"1-引入Selenium包，并调起浏览器\"><a href=\"#1-引入Selenium包，并调起浏览器\" class=\"headerlink\" title=\"1. 引入Selenium包，并调起浏览器\"></a>1. 引入Selenium包，并调起浏览器</h3><pre class=\"line-numbers language-javascript\" data-language=\"javascript\"><code class=\"language-javascript\">from selenium <span class=\"token keyword\">import</span> webdriver<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p><img src=\"/2021/08/13/Python-Selenium/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"如何搭建Hexo博客并部署到GitHub","_content":"## 什么是 Hexo？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n\n## 环境\n\n### 一、安装Git、Nodejs、Hexo\n\n#### 1.安装Git\nWindows：\n可通过[Git官网](https://git-scm.com/download/win)自行下载安装，一路Next，记住将路径加到环境变量中。\n\n\nLinux：\n##### 1.1 检查git是否已经安装\n``` bash\ngit --version\n```\n如果出现以下提示直接下一步：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n##### 1.2 安装Git\n如果出现的提示是Not Find那就进行以下命令进行安装吧\n``` bash\nyum -y install git\n```\n##### 1.3 检查Git版本\n安装完成后输入命令查看Git版本：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n{% note warning %}\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n{% endnote %}\n\n#### 2.安装Nodejs\nWindows：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 下载完成后一路next即可\n{% note warning %}\n提示：切记，将exe文件路径添加至环境变量中\n{% endnote %}\n\nLinux：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 将安装包上传到指定位置，并解压\n``` bash\ntar -xvf node-v10.6.0-linux-x64.tar.xz\n```\n##### 2.3 通过建立软连接变为全局\n``` bash\nln -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\nln -s /usr/local/application/nodejs/bin/node /usr/local/bin/\n```\n##### 2.4 检查是否安装成功\n``` bash\nnode-v\n```\n#### 3.安装Hexo\n##### 3.1 安装Hexo\n当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\n``` bash\nnpm install -g hexo-cli\n```\n##### 3.2 查看Hexo版本\n安装完成后，查看版本\n``` bash\nhexo -v\n```\n当看到打印出来的版本号后，说明以及安装完成\n\n### 二、生成Hexo\n#### 初始化Hexo\n``` bash\nhexo init myblog //文件夹名称\n```\n#### 安装依赖包\n``` bash\nnpm install\n```\n当新建完成后，将会出现以下文件夹\n##### 1.node_modules：依赖包\n##### 2.public：生成的页面\n##### 3.scaffolds：文章模板\n##### 4.source：文章\n##### 5.themes：主题\n##### 6._config.yml：配置文件\n\n### 三、启动Hexo项目\n#### 启动\n##### 1.生成静态文件\n``` bash\nhexo generate\n```\n也可以简写为\n``` bash\nhexo g\n```\n##### 2.生成静态文件\n``` bash\nhexo server\n```\n也可以简写为\n``` bash\nhexo s\n```\n{% note success %}\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n{% endnote %}\n\n\n### 三、部署至GitHub中的\n#### 1.GitHub创建仓库\n在GitHub中创建一个自己的仓库\n##### 1.1 生成SSH并添加至GitHub中\n1.配置Git相关信息\n``` bash\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的email\"\n```\n2.创建SSH，输入命令后一路回车\n``` bash\nssh-keygen -t rsa -C \"youremail\"\n```\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\n``` bash\nC:\\Users\\think\\.ssh //路径\n```\n{% note primary %}\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n{% endnote %}\n{% note success %}\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n{% endnote %}\n##### 1.2 在GitHub创建仓库\n点击右上角+号，选择new repository，在Repository name中输入：\n``` bash\n你的用户名.github.io\n```\n{% note success %}\n点击Create repository即可完成项目创建\n{% endnote %}\n#### 2.将Hexo部署到GitHub Pages中\n##### 2.1 修改配置文件\n1.打开根目录下的_config.yml文件，拉到最后\n``` bash\ndeploy:\n    type: git\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称\n```\n##### 2.2 安装上传渲染插件\n需要安装deploy-git，这样才可以部署到GitHub中\n``` bash\nnpm install hexo-deployer-git --save\n```\n##### 2.3 部署\n输入完整命令进行部署\n``` bash\nhexo clean\nhexo generate\nhexo deploy\n```\n也可以输入简化命令\n``` bash\nhexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署\n```\n##### 2.4 GitHub中配置GitHub Pages\n{% note success %}\n进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n{% endnote %}\n![添加微信](Web_Hexo/WX_QR_code.png)\n","source":"_posts/Web_Hexo.md","raw":"---\ntitle: 如何搭建Hexo博客并部署到GitHub\ntags: [Hexo, 博客]\ncategories: WEB前端\n---\n## 什么是 Hexo？\nHexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n\n## 环境\n\n### 一、安装Git、Nodejs、Hexo\n\n#### 1.安装Git\nWindows：\n可通过[Git官网](https://git-scm.com/download/win)自行下载安装，一路Next，记住将路径加到环境变量中。\n\n\nLinux：\n##### 1.1 检查git是否已经安装\n``` bash\ngit --version\n```\n如果出现以下提示直接下一步：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n##### 1.2 安装Git\n如果出现的提示是Not Find那就进行以下命令进行安装吧\n``` bash\nyum -y install git\n```\n##### 1.3 检查Git版本\n安装完成后输入命令查看Git版本：\n``` bash\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n```\n![检查git版本](Web_Hexo/git_version.png)\n{% note warning %}\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n{% endnote %}\n\n#### 2.安装Nodejs\nWindows：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 下载完成后一路next即可\n{% note warning %}\n提示：切记，将exe文件路径添加至环境变量中\n{% endnote %}\n\nLinux：\n##### 2.1 [Node.js 官方网站下载](https://nodejs.org/en/)，并且选择操作系统对应的包\n##### 2.2 将安装包上传到指定位置，并解压\n``` bash\ntar -xvf node-v10.6.0-linux-x64.tar.xz\n```\n##### 2.3 通过建立软连接变为全局\n``` bash\nln -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\nln -s /usr/local/application/nodejs/bin/node /usr/local/bin/\n```\n##### 2.4 检查是否安装成功\n``` bash\nnode-v\n```\n#### 3.安装Hexo\n##### 3.1 安装Hexo\n当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\n``` bash\nnpm install -g hexo-cli\n```\n##### 3.2 查看Hexo版本\n安装完成后，查看版本\n``` bash\nhexo -v\n```\n当看到打印出来的版本号后，说明以及安装完成\n\n### 二、生成Hexo\n#### 初始化Hexo\n``` bash\nhexo init myblog //文件夹名称\n```\n#### 安装依赖包\n``` bash\nnpm install\n```\n当新建完成后，将会出现以下文件夹\n##### 1.node_modules：依赖包\n##### 2.public：生成的页面\n##### 3.scaffolds：文章模板\n##### 4.source：文章\n##### 5.themes：主题\n##### 6._config.yml：配置文件\n\n### 三、启动Hexo项目\n#### 启动\n##### 1.生成静态文件\n``` bash\nhexo generate\n```\n也可以简写为\n``` bash\nhexo g\n```\n##### 2.生成静态文件\n``` bash\nhexo server\n```\n也可以简写为\n``` bash\nhexo s\n```\n{% note success %}\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n{% endnote %}\n\n\n### 三、部署至GitHub中的\n#### 1.GitHub创建仓库\n在GitHub中创建一个自己的仓库\n##### 1.1 生成SSH并添加至GitHub中\n1.配置Git相关信息\n``` bash\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的email\"\n```\n2.创建SSH，输入命令后一路回车\n``` bash\nssh-keygen -t rsa -C \"youremail\"\n```\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\n``` bash\nC:\\Users\\think\\.ssh //路径\n```\n{% note primary %}\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n{% endnote %}\n{% note success %}\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n{% endnote %}\n##### 1.2 在GitHub创建仓库\n点击右上角+号，选择new repository，在Repository name中输入：\n``` bash\n你的用户名.github.io\n```\n{% note success %}\n点击Create repository即可完成项目创建\n{% endnote %}\n#### 2.将Hexo部署到GitHub Pages中\n##### 2.1 修改配置文件\n1.打开根目录下的_config.yml文件，拉到最后\n``` bash\ndeploy:\n    type: git\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称\n```\n##### 2.2 安装上传渲染插件\n需要安装deploy-git，这样才可以部署到GitHub中\n``` bash\nnpm install hexo-deployer-git --save\n```\n##### 2.3 部署\n输入完整命令进行部署\n``` bash\nhexo clean\nhexo generate\nhexo deploy\n```\n也可以输入简化命令\n``` bash\nhexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署\n```\n##### 2.4 GitHub中配置GitHub Pages\n{% note success %}\n进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n{% endnote %}\n![添加微信](Web_Hexo/WX_QR_code.png)\n","slug":"Web_Hexo","published":1,"date":"2021-08-31T09:46:47.156Z","updated":"2021-08-31T09:58:52.749Z","_id":"ckszv7lxd000a84u32x0j97mx","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h3 id=\"一、安装Git、Nodejs、Hexo\"><a href=\"#一、安装Git、Nodejs、Hexo\" class=\"headerlink\" title=\"一、安装Git、Nodejs、Hexo\"></a>一、安装Git、Nodejs、Hexo</h3><h4 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h4><p>Windows：<br>可通过<a href=\"https://git-scm.com/download/win\">Git官网</a>自行下载安装，一路Next，记住将路径加到环境变量中。</p>\n<p>Linux：</p>\n<h5 id=\"1-1-检查git是否已经安装\"><a href=\"#1-1-检查git是否已经安装\" class=\"headerlink\" title=\"1.1 检查git是否已经安装\"></a>1.1 检查git是否已经安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果出现以下提示直接下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/31/Web_Hexo/git_version.png\" alt=\"检查git版本\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/31/Web_Hexo/git_version.png\" class=\"lozad post-image\"></p>\n<h5 id=\"1-2-安装Git\"><a href=\"#1-2-安装Git\" class=\"headerlink\" title=\"1.2 安装Git\"></a>1.2 安装Git</h5><p>如果出现的提示是Not Find那就进行以下命令进行安装吧</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y install git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"1-3-检查Git版本\"><a href=\"#1-3-检查Git版本\" class=\"headerlink\" title=\"1.3 检查Git版本\"></a>1.3 检查Git版本</h5><p>安装完成后输入命令查看Git版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/31/Web_Hexo/git_version.png\" alt=\"检查git版本\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/31/Web_Hexo/git_version.png\" class=\"lozad post-image\"></p>\n<div class=\"post-note note-warning\"><p>提示：yum安装git被安装在/usr/libexec/git-core目录下</p></div>\n\n<h4 id=\"2-安装Nodejs\"><a href=\"#2-安装Nodejs\" class=\"headerlink\" title=\"2.安装Nodejs\"></a>2.安装Nodejs</h4><p>Windows：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-下载完成后一路next即可\"><a href=\"#2-2-下载完成后一路next即可\" class=\"headerlink\" title=\"2.2 下载完成后一路next即可\"></a>2.2 下载完成后一路next即可</h5><div class=\"post-note note-warning\"><p>提示：切记，将exe文件路径添加至环境变量中</p></div>\n\n<p>Linux：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-将安装包上传到指定位置，并解压\"><a href=\"#2-2-将安装包上传到指定位置，并解压\" class=\"headerlink\" title=\"2.2 将安装包上传到指定位置，并解压\"></a>2.2 将安装包上传到指定位置，并解压</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tar -xvf node-v10.6.0-linux-x64.tar.xz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-通过建立软连接变为全局\"><a href=\"#2-3-通过建立软连接变为全局\" class=\"headerlink\" title=\"2.3 通过建立软连接变为全局\"></a>2.3 通过建立软连接变为全局</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-检查是否安装成功\"><a href=\"#2-4-检查是否安装成功\" class=\"headerlink\" title=\"2.4 检查是否安装成功\"></a>2.4 检查是否安装成功</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">node-v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><h5 id=\"3-1-安装Hexo\"><a href=\"#3-1-安装Hexo\" class=\"headerlink\" title=\"3.1 安装Hexo\"></a>3.1 安装Hexo</h5><p>当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -g hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"3-2-查看Hexo版本\"><a href=\"#3-2-查看Hexo版本\" class=\"headerlink\" title=\"3.2 查看Hexo版本\"></a>3.2 查看Hexo版本</h5><p>安装完成后，查看版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当看到打印出来的版本号后，说明以及安装完成</p>\n<h3 id=\"二、生成Hexo\"><a href=\"#二、生成Hexo\" class=\"headerlink\" title=\"二、生成Hexo\"></a>二、生成Hexo</h3><h4 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog &#x2F;&#x2F;文件夹名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当新建完成后，将会出现以下文件夹</p>\n<h5 id=\"1-node-modules：依赖包\"><a href=\"#1-node-modules：依赖包\" class=\"headerlink\" title=\"1.node_modules：依赖包\"></a>1.node_modules：依赖包</h5><h5 id=\"2-public：生成的页面\"><a href=\"#2-public：生成的页面\" class=\"headerlink\" title=\"2.public：生成的页面\"></a>2.public：生成的页面</h5><h5 id=\"3-scaffolds：文章模板\"><a href=\"#3-scaffolds：文章模板\" class=\"headerlink\" title=\"3.scaffolds：文章模板\"></a>3.scaffolds：文章模板</h5><h5 id=\"4-source：文章\"><a href=\"#4-source：文章\" class=\"headerlink\" title=\"4.source：文章\"></a>4.source：文章</h5><h5 id=\"5-themes：主题\"><a href=\"#5-themes：主题\" class=\"headerlink\" title=\"5.themes：主题\"></a>5.themes：主题</h5><h5 id=\"6-config-yml：配置文件\"><a href=\"#6-config-yml：配置文件\" class=\"headerlink\" title=\"6._config.yml：配置文件\"></a>6._config.yml：配置文件</h5><h3 id=\"三、启动Hexo项目\"><a href=\"#三、启动Hexo项目\" class=\"headerlink\" title=\"三、启动Hexo项目\"></a>三、启动Hexo项目</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><h5 id=\"1-生成静态文件\"><a href=\"#1-生成静态文件\" class=\"headerlink\" title=\"1.生成静态文件\"></a>1.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-生成静态文件\"><a href=\"#2-生成静态文件\" class=\"headerlink\" title=\"2.生成静态文件\"></a>2.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~</p></div>\n\n\n<h3 id=\"三、部署至GitHub中的\"><a href=\"#三、部署至GitHub中的\" class=\"headerlink\" title=\"三、部署至GitHub中的\"></a>三、部署至GitHub中的</h3><h4 id=\"1-GitHub创建仓库\"><a href=\"#1-GitHub创建仓库\" class=\"headerlink\" title=\"1.GitHub创建仓库\"></a>1.GitHub创建仓库</h4><p>在GitHub中创建一个自己的仓库</p>\n<h5 id=\"1-1-生成SSH并添加至GitHub中\"><a href=\"#1-1-生成SSH并添加至GitHub中\" class=\"headerlink\" title=\"1.1 生成SSH并添加至GitHub中\"></a>1.1 生成SSH并添加至GitHub中</h5><p>1.配置Git相关信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git config --global user.name &quot;你的用户名&quot;\ngit config --global user.email &quot;你的email&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2.创建SSH，输入命令后一路回车</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:\\Users\\think\\.ssh &#x2F;&#x2F;路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>id_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。</p></div>\n<div class=\"post-note note-success\"><p>然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去</p></div>\n<h5 id=\"1-2-在GitHub创建仓库\"><a href=\"#1-2-在GitHub创建仓库\" class=\"headerlink\" title=\"1.2 在GitHub创建仓库\"></a>1.2 在GitHub创建仓库</h5><p>点击右上角+号，选择new repository，在Repository name中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">你的用户名.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>点击Create repository即可完成项目创建</p></div>\n<h4 id=\"2-将Hexo部署到GitHub-Pages中\"><a href=\"#2-将Hexo部署到GitHub-Pages中\" class=\"headerlink\" title=\"2.将Hexo部署到GitHub Pages中\"></a>2.将Hexo部署到GitHub Pages中</h4><h5 id=\"2-1-修改配置文件\"><a href=\"#2-1-修改配置文件\" class=\"headerlink\" title=\"2.1 修改配置文件\"></a>2.1 修改配置文件</h5><p>1.打开根目录下的_config.yml文件，拉到最后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n    type: git\n    repository: https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的用户名.github.io.git\n    branch: master &#x2F;&#x2F;分支名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-2-安装上传渲染插件\"><a href=\"#2-2-安装上传渲染插件\" class=\"headerlink\" title=\"2.2 安装上传渲染插件\"></a>2.2 安装上传渲染插件</h5><p>需要安装deploy-git，这样才可以部署到GitHub中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-部署\"><a href=\"#2-3-部署\" class=\"headerlink\" title=\"2.3 部署\"></a>2.3 部署</h5><p>输入完整命令进行部署</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>也可以输入简化命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean &#x2F;&#x2F;清除之前生成的文件，也可不加\nhexo g &#x2F;&#x2F;生成静态文件\nhexo d &#x2F;&#x2F;部署<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-GitHub中配置GitHub-Pages\"><a href=\"#2-4-GitHub中配置GitHub-Pages\" class=\"headerlink\" title=\"2.4 GitHub中配置GitHub Pages\"></a>2.4 GitHub中配置GitHub Pages</h5><div class=\"post-note note-success\"><p>进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可</p></div>\n<p><img src=\"/2021/08/31/Web_Hexo/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/31/Web_Hexo/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"什么是-Hexo？\"><a href=\"#什么是-Hexo？\" class=\"headerlink\" title=\"什么是 Hexo？\"></a>什么是 Hexo？</h2><p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。</p>\n<h2 id=\"环境\"><a href=\"#环境\" class=\"headerlink\" title=\"环境\"></a>环境</h2><h3 id=\"一、安装Git、Nodejs、Hexo\"><a href=\"#一、安装Git、Nodejs、Hexo\" class=\"headerlink\" title=\"一、安装Git、Nodejs、Hexo\"></a>一、安装Git、Nodejs、Hexo</h3><h4 id=\"1-安装Git\"><a href=\"#1-安装Git\" class=\"headerlink\" title=\"1.安装Git\"></a>1.安装Git</h4><p>Windows：<br>可通过<a href=\"https://git-scm.com/download/win\">Git官网</a>自行下载安装，一路Next，记住将路径加到环境变量中。</p>\n<p>Linux：</p>\n<h5 id=\"1-1-检查git是否已经安装\"><a href=\"#1-1-检查git是否已经安装\" class=\"headerlink\" title=\"1.1 检查git是否已经安装\"></a>1.1 检查git是否已经安装</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git --version<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>如果出现以下提示直接下一步：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/31/Web_Hexo/git_version.png\" alt=\"检查git版本\"></p>\n<h5 id=\"1-2-安装Git\"><a href=\"#1-2-安装Git\" class=\"headerlink\" title=\"1.2 安装Git\"></a>1.2 安装Git</h5><p>如果出现的提示是Not Find那就进行以下命令进行安装吧</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">yum -y install git<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"1-3-检查Git版本\"><a href=\"#1-3-检查Git版本\" class=\"headerlink\" title=\"1.3 检查Git版本\"></a>1.3 检查Git版本</h5><p>安装完成后输入命令查看Git版本：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p><img src=\"/2021/08/31/Web_Hexo/git_version.png\" alt=\"检查git版本\"></p>\n<div class=\"post-note note-warning\"><p>提示：yum安装git被安装在/usr/libexec/git-core目录下</p></div>\n\n<h4 id=\"2-安装Nodejs\"><a href=\"#2-安装Nodejs\" class=\"headerlink\" title=\"2.安装Nodejs\"></a>2.安装Nodejs</h4><p>Windows：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-下载完成后一路next即可\"><a href=\"#2-2-下载完成后一路next即可\" class=\"headerlink\" title=\"2.2 下载完成后一路next即可\"></a>2.2 下载完成后一路next即可</h5><div class=\"post-note note-warning\"><p>提示：切记，将exe文件路径添加至环境变量中</p></div>\n\n<p>Linux：</p>\n<h5 id=\"2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\"><a href=\"#2-1-Node-js-官方网站下载，并且选择操作系统对应的包-1\" class=\"headerlink\" title=\"2.1 Node.js 官方网站下载，并且选择操作系统对应的包\"></a>2.1 <a href=\"https://nodejs.org/en/\">Node.js 官方网站下载</a>，并且选择操作系统对应的包</h5><h5 id=\"2-2-将安装包上传到指定位置，并解压\"><a href=\"#2-2-将安装包上传到指定位置，并解压\" class=\"headerlink\" title=\"2.2 将安装包上传到指定位置，并解压\"></a>2.2 将安装包上传到指定位置，并解压</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">tar -xvf node-v10.6.0-linux-x64.tar.xz<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-通过建立软连接变为全局\"><a href=\"#2-3-通过建立软连接变为全局\" class=\"headerlink\" title=\"2.3 通过建立软连接变为全局\"></a>2.3 通过建立软连接变为全局</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-检查是否安装成功\"><a href=\"#2-4-检查是否安装成功\" class=\"headerlink\" title=\"2.4 检查是否安装成功\"></a>2.4 检查是否安装成功</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">node-v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"3-安装Hexo\"><a href=\"#3-安装Hexo\" class=\"headerlink\" title=\"3.安装Hexo\"></a>3.安装Hexo</h4><h5 id=\"3-1-安装Hexo\"><a href=\"#3-1-安装Hexo\" class=\"headerlink\" title=\"3.1 安装Hexo\"></a>3.1 安装Hexo</h5><p>当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install -g hexo-cli<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"3-2-查看Hexo版本\"><a href=\"#3-2-查看Hexo版本\" class=\"headerlink\" title=\"3.2 查看Hexo版本\"></a>3.2 查看Hexo版本</h5><p>安装完成后，查看版本</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo -v<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当看到打印出来的版本号后，说明以及安装完成</p>\n<h3 id=\"二、生成Hexo\"><a href=\"#二、生成Hexo\" class=\"headerlink\" title=\"二、生成Hexo\"></a>二、生成Hexo</h3><h4 id=\"初始化Hexo\"><a href=\"#初始化Hexo\" class=\"headerlink\" title=\"初始化Hexo\"></a>初始化Hexo</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo init myblog &#x2F;&#x2F;文件夹名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h4 id=\"安装依赖包\"><a href=\"#安装依赖包\" class=\"headerlink\" title=\"安装依赖包\"></a>安装依赖包</h4><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>当新建完成后，将会出现以下文件夹</p>\n<h5 id=\"1-node-modules：依赖包\"><a href=\"#1-node-modules：依赖包\" class=\"headerlink\" title=\"1.node_modules：依赖包\"></a>1.node_modules：依赖包</h5><h5 id=\"2-public：生成的页面\"><a href=\"#2-public：生成的页面\" class=\"headerlink\" title=\"2.public：生成的页面\"></a>2.public：生成的页面</h5><h5 id=\"3-scaffolds：文章模板\"><a href=\"#3-scaffolds：文章模板\" class=\"headerlink\" title=\"3.scaffolds：文章模板\"></a>3.scaffolds：文章模板</h5><h5 id=\"4-source：文章\"><a href=\"#4-source：文章\" class=\"headerlink\" title=\"4.source：文章\"></a>4.source：文章</h5><h5 id=\"5-themes：主题\"><a href=\"#5-themes：主题\" class=\"headerlink\" title=\"5.themes：主题\"></a>5.themes：主题</h5><h5 id=\"6-config-yml：配置文件\"><a href=\"#6-config-yml：配置文件\" class=\"headerlink\" title=\"6._config.yml：配置文件\"></a>6._config.yml：配置文件</h5><h3 id=\"三、启动Hexo项目\"><a href=\"#三、启动Hexo项目\" class=\"headerlink\" title=\"三、启动Hexo项目\"></a>三、启动Hexo项目</h3><h4 id=\"启动\"><a href=\"#启动\" class=\"headerlink\" title=\"启动\"></a>启动</h4><h5 id=\"1-生成静态文件\"><a href=\"#1-生成静态文件\" class=\"headerlink\" title=\"1.生成静态文件\"></a>1.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo generate<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo g<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-生成静态文件\"><a href=\"#2-生成静态文件\" class=\"headerlink\" title=\"2.生成静态文件\"></a>2.生成静态文件</h5><pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo server<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>也可以简写为</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo s<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~</p></div>\n\n\n<h3 id=\"三、部署至GitHub中的\"><a href=\"#三、部署至GitHub中的\" class=\"headerlink\" title=\"三、部署至GitHub中的\"></a>三、部署至GitHub中的</h3><h4 id=\"1-GitHub创建仓库\"><a href=\"#1-GitHub创建仓库\" class=\"headerlink\" title=\"1.GitHub创建仓库\"></a>1.GitHub创建仓库</h4><p>在GitHub中创建一个自己的仓库</p>\n<h5 id=\"1-1-生成SSH并添加至GitHub中\"><a href=\"#1-1-生成SSH并添加至GitHub中\" class=\"headerlink\" title=\"1.1 生成SSH并添加至GitHub中\"></a>1.1 生成SSH并添加至GitHub中</h5><p>1.配置Git相关信息</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">git config --global user.name &quot;你的用户名&quot;\ngit config --global user.email &quot;你的email&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<p>2.创建SSH，输入命令后一路回车</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">ssh-keygen -t rsa -C &quot;youremail&quot;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">C:\\Users\\think\\.ssh &#x2F;&#x2F;路径<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-primary\"><p>id_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。</p></div>\n<div class=\"post-note note-success\"><p>然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去</p></div>\n<h5 id=\"1-2-在GitHub创建仓库\"><a href=\"#1-2-在GitHub创建仓库\" class=\"headerlink\" title=\"1.2 在GitHub创建仓库\"></a>1.2 在GitHub创建仓库</h5><p>点击右上角+号，选择new repository，在Repository name中输入：</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">你的用户名.github.io<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<div class=\"post-note note-success\"><p>点击Create repository即可完成项目创建</p></div>\n<h4 id=\"2-将Hexo部署到GitHub-Pages中\"><a href=\"#2-将Hexo部署到GitHub-Pages中\" class=\"headerlink\" title=\"2.将Hexo部署到GitHub Pages中\"></a>2.将Hexo部署到GitHub Pages中</h4><h5 id=\"2-1-修改配置文件\"><a href=\"#2-1-修改配置文件\" class=\"headerlink\" title=\"2.1 修改配置文件\"></a>2.1 修改配置文件</h5><p>1.打开根目录下的_config.yml文件，拉到最后</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">deploy:\n    type: git\n    repository: https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的用户名.github.io.git\n    branch: master &#x2F;&#x2F;分支名称<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-2-安装上传渲染插件\"><a href=\"#2-2-安装上传渲染插件\" class=\"headerlink\" title=\"2.2 安装上传渲染插件\"></a>2.2 安装上传渲染插件</h5><p>需要安装deploy-git，这样才可以部署到GitHub中</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">npm install hexo-deployer-git --save<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h5 id=\"2-3-部署\"><a href=\"#2-3-部署\" class=\"headerlink\" title=\"2.3 部署\"></a>2.3 部署</h5><p>输入完整命令进行部署</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean\nhexo generate\nhexo deploy<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>也可以输入简化命令</p>\n<pre class=\"line-numbers language-bash\" data-language=\"bash\"><code class=\"language-bash\">hexo clean &#x2F;&#x2F;清除之前生成的文件，也可不加\nhexo g &#x2F;&#x2F;生成静态文件\nhexo d &#x2F;&#x2F;部署<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"2-4-GitHub中配置GitHub-Pages\"><a href=\"#2-4-GitHub中配置GitHub-Pages\" class=\"headerlink\" title=\"2.4 GitHub中配置GitHub Pages\"></a>2.4 GitHub中配置GitHub Pages</h5><div class=\"post-note note-success\"><p>进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可</p></div>\n<p><img src=\"/2021/08/31/Web_Hexo/WX_QR_code.png\" alt=\"添加微信\"></p>\n"},{"title":"软件测试质量保障之开发提测","date":"2021-08-25T03:34:41.000Z","_content":"## 1.什么是提测 ？\n“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n## 2.为什么要有提测这个流程？\n开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n## 3.如果没有提测这个流程会有些什么样的影响？\n功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n## 4.如何做好提测，以提高提测质量？\n推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。\n在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。\n自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。\n如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。\n提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n## 5.提测邮件模板\n### <center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center>\n### <font color=\"#00FF00;\">一、提测需求:</font>\n#### <font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font>\n#### <font color=\"#00FF00;\">2.接口文档：接口文档链接</font>\n### <font color=\"#00FF00;\">二、提测环境:测试环境</font>\n### <font color=\"#00FF00;\">三、自测结论:通过</font>\n### <font color=\"#00FF00;\">四、提测范围:</font>\n#### <font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font>\n#### <font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font>\n#### <font color=\"#00FF00;\">3，测试类型为功能测试</font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n![添加微信](Submit-Test/WX_QR_code.png)\n","source":"_posts/Submit-Test.md","raw":"---\ntitle: 软件测试质量保障之开发提测\ndate: 2021-08-25 11:34:41\ntags: [测试文档]\ncategories: 测试相关\n---\n## 1.什么是提测 ？\n“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n## 2.为什么要有提测这个流程？\n开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n## 3.如果没有提测这个流程会有些什么样的影响？\n功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n## 4.如何做好提测，以提高提测质量？\n推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。\n在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。\n自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。\n如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。\n提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n## 5.提测邮件模板\n### <center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center>\n### <font color=\"#00FF00;\">一、提测需求:</font>\n#### <font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font>\n#### <font color=\"#00FF00;\">2.接口文档：接口文档链接</font>\n### <font color=\"#00FF00;\">二、提测环境:测试环境</font>\n### <font color=\"#00FF00;\">三、自测结论:通过</font>\n### <font color=\"#00FF00;\">四、提测范围:</font>\n#### <font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font>\n#### <font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font>\n#### <font color=\"#00FF00;\">3，测试类型为功能测试</font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n### <font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font>\n![添加微信](Submit-Test/WX_QR_code.png)\n","slug":"Submit-Test","published":1,"updated":"2021-08-31T09:58:52.742Z","_id":"ckszv8bra0000k0u3f0mmgwkj","comments":1,"layout":"post","photos":[],"link":"","content":"<h2 id=\"1-什么是提测-？\"><a href=\"#1-什么是提测-？\" class=\"headerlink\" title=\"1.什么是提测 ？\"></a>1.什么是提测 ？</h2><p>“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。</p>\n<h2 id=\"2-为什么要有提测这个流程？\"><a href=\"#2-为什么要有提测这个流程？\" class=\"headerlink\" title=\"2.为什么要有提测这个流程？\"></a>2.为什么要有提测这个流程？</h2><p>开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。</p>\n<h2 id=\"3-如果没有提测这个流程会有些什么样的影响？\"><a href=\"#3-如果没有提测这个流程会有些什么样的影响？\" class=\"headerlink\" title=\"3.如果没有提测这个流程会有些什么样的影响？\"></a>3.如果没有提测这个流程会有些什么样的影响？</h2><p>功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。</p>\n<h2 id=\"4-如何做好提测，以提高提测质量？\"><a href=\"#4-如何做好提测，以提高提测质量？\" class=\"headerlink\" title=\"4.如何做好提测，以提高提测质量？\"></a>4.如何做好提测，以提高提测质量？</h2><p>推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。<br>在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。<br>自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。<br>如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。<br>提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。</p>\n<h2 id=\"5-提测邮件模板\"><a href=\"#5-提测邮件模板\" class=\"headerlink\" title=\"5.提测邮件模板\"></a>5.提测邮件模板</h2><h3 id=\"XXXX-需求提测通知\"><a href=\"#XXXX-需求提测通知\" class=\"headerlink\" title=\" XXXX 需求提测通知\"></a><center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center></h3><h3 id=\"一、提测需求\"><a href=\"#一、提测需求\" class=\"headerlink\" title=\"一、提测需求:\"></a><font color=\"#00FF00;\">一、提测需求:</font></h3><h4 id=\"1-XXXX-需求文档：需求链接\"><a href=\"#1-XXXX-需求文档：需求链接\" class=\"headerlink\" title=\"1. XXXX 需求文档：需求链接\"></a><font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font></h4><h4 id=\"2-接口文档：接口文档链接\"><a href=\"#2-接口文档：接口文档链接\" class=\"headerlink\" title=\"2.接口文档：接口文档链接\"></a><font color=\"#00FF00;\">2.接口文档：接口文档链接</font></h4><h3 id=\"二、提测环境-测试环境\"><a href=\"#二、提测环境-测试环境\" class=\"headerlink\" title=\"二、提测环境:测试环境\"></a><font color=\"#00FF00;\">二、提测环境:测试环境</font></h3><h3 id=\"三、自测结论-通过\"><a href=\"#三、自测结论-通过\" class=\"headerlink\" title=\"三、自测结论:通过\"></a><font color=\"#00FF00;\">三、自测结论:通过</font></h3><h3 id=\"四、提测范围\"><a href=\"#四、提测范围\" class=\"headerlink\" title=\"四、提测范围:\"></a><font color=\"#00FF00;\">四、提测范围:</font></h3><h4 id=\"1，提测XX功能，起到了XX的效果\"><a href=\"#1，提测XX功能，起到了XX的效果\" class=\"headerlink\" title=\"1，提测XX功能，起到了XX的效果\"></a><font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font></h4><h4 id=\"2，测试类型为功能测试和接口测试-如有接口测试\"><a href=\"#2，测试类型为功能测试和接口测试-如有接口测试\" class=\"headerlink\" title=\"2，测试类型为功能测试和接口测试(如有接口测试)\"></a><font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font></h4><h4 id=\"3，测试类型为功能测试\"><a href=\"#3，测试类型为功能测试\" class=\"headerlink\" title=\"3，测试类型为功能测试\"></a><font color=\"#00FF00;\">3，测试类型为功能测试</font></h4><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><p><img src=\"/2021/08/25/Submit-Test/WX_QR_code.png\" alt=\"添加微信\" srcset=\"data:image/svg+xml,%3Csvg%20xmlns='http://www.w3.org/2000/svg'%20viewBox='0%200%20300%20300'%3E%3C/svg%3E\" data-src=\"/2021/08/25/Submit-Test/WX_QR_code.png\" class=\"lozad post-image\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"1-什么是提测-？\"><a href=\"#1-什么是提测-？\" class=\"headerlink\" title=\"1.什么是提测 ？\"></a>1.什么是提测 ？</h2><p>“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。</p>\n<h2 id=\"2-为什么要有提测这个流程？\"><a href=\"#2-为什么要有提测这个流程？\" class=\"headerlink\" title=\"2.为什么要有提测这个流程？\"></a>2.为什么要有提测这个流程？</h2><p>开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。</p>\n<h2 id=\"3-如果没有提测这个流程会有些什么样的影响？\"><a href=\"#3-如果没有提测这个流程会有些什么样的影响？\" class=\"headerlink\" title=\"3.如果没有提测这个流程会有些什么样的影响？\"></a>3.如果没有提测这个流程会有些什么样的影响？</h2><p>功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。</p>\n<h2 id=\"4-如何做好提测，以提高提测质量？\"><a href=\"#4-如何做好提测，以提高提测质量？\" class=\"headerlink\" title=\"4.如何做好提测，以提高提测质量？\"></a>4.如何做好提测，以提高提测质量？</h2><p>推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。<br>在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。<br>自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。<br>如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。<br>提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。</p>\n<h2 id=\"5-提测邮件模板\"><a href=\"#5-提测邮件模板\" class=\"headerlink\" title=\"5.提测邮件模板\"></a>5.提测邮件模板</h2><h3 id=\"XXXX-需求提测通知\"><a href=\"#XXXX-需求提测通知\" class=\"headerlink\" title=\" XXXX 需求提测通知\"></a><center><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求提测通知</font></center></h3><h3 id=\"一、提测需求\"><a href=\"#一、提测需求\" class=\"headerlink\" title=\"一、提测需求:\"></a><font color=\"#00FF00;\">一、提测需求:</font></h3><h4 id=\"1-XXXX-需求文档：需求链接\"><a href=\"#1-XXXX-需求文档：需求链接\" class=\"headerlink\" title=\"1. XXXX 需求文档：需求链接\"></a><font color=\"#00FF00;\">1.</font><font color=\"blue\"> XXXX </font><font color=\"#00FF00;\">需求文档：需求链接</font></h4><h4 id=\"2-接口文档：接口文档链接\"><a href=\"#2-接口文档：接口文档链接\" class=\"headerlink\" title=\"2.接口文档：接口文档链接\"></a><font color=\"#00FF00;\">2.接口文档：接口文档链接</font></h4><h3 id=\"二、提测环境-测试环境\"><a href=\"#二、提测环境-测试环境\" class=\"headerlink\" title=\"二、提测环境:测试环境\"></a><font color=\"#00FF00;\">二、提测环境:测试环境</font></h3><h3 id=\"三、自测结论-通过\"><a href=\"#三、自测结论-通过\" class=\"headerlink\" title=\"三、自测结论:通过\"></a><font color=\"#00FF00;\">三、自测结论:通过</font></h3><h3 id=\"四、提测范围\"><a href=\"#四、提测范围\" class=\"headerlink\" title=\"四、提测范围:\"></a><font color=\"#00FF00;\">四、提测范围:</font></h3><h4 id=\"1，提测XX功能，起到了XX的效果\"><a href=\"#1，提测XX功能，起到了XX的效果\" class=\"headerlink\" title=\"1，提测XX功能，起到了XX的效果\"></a><font color=\"#00FF00;\">1，提测<font color=\"blue\">XX</font>功能，起到了<font color=\"blue\">XX</font>的效果</font></h4><h4 id=\"2，测试类型为功能测试和接口测试-如有接口测试\"><a href=\"#2，测试类型为功能测试和接口测试-如有接口测试\" class=\"headerlink\" title=\"2，测试类型为功能测试和接口测试(如有接口测试)\"></a><font color=\"#00FF00;\">2，测试类型为功能测试和接口测试(如有接口测试)</font></h4><h4 id=\"3，测试类型为功能测试\"><a href=\"#3，测试类型为功能测试\" class=\"headerlink\" title=\"3，测试类型为功能测试\"></a><font color=\"#00FF00;\">3，测试类型为功能测试</font></h4><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><h3 id=\"五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\"><a href=\"#五、影响范围-本次提测对XX功能-模块有影响，需要重点关注-1\" class=\"headerlink\" title=\"五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \"></a><font color=\"#00FF00;\">五、影响范围: 本次提测对<font color=\"blue\">XX</font>功能/模块有影响，需要重点关注 </font></h3><p><img src=\"/2021/08/25/Submit-Test/WX_QR_code.png\" alt=\"添加微信\"></p>\n"}],"PostAsset":[{"_id":"source/_posts/Fiddler-Proxy/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lwz000184u37wowawk7","modified":0,"renderable":0},{"_id":"source/_posts/Hexo_Article/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lx6000284u3bgaf7t35","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Crontab/crontab_sel.png","slug":"crontab_sel.png","post":"ckszv7lxa000584u3hr3xag31","modified":0,"renderable":0},{"_id":"source/_posts/Linux-Crontab/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lxa000584u3hr3xag31","modified":0,"renderable":0},{"_id":"source/_posts/Server_Screen/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lxb000684u3ajuu1yfh","modified":0,"renderable":0},{"_id":"source/_posts/Python-Selenium/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lxc000784u39gdnf2fh","modified":0,"renderable":0},{"_id":"source/_posts/Web_Hexo/git_version.png","slug":"git_version.png","post":"ckszv7lxd000a84u32x0j97mx","modified":0,"renderable":0},{"_id":"source/_posts/Web_Hexo/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv7lxd000a84u32x0j97mx","modified":0,"renderable":0},{"_id":"source/_posts/Submit-Test/WX_QR_code.png","slug":"WX_QR_code.png","post":"ckszv8bra0000k0u3f0mmgwkj","modified":0,"renderable":0}],"PostCategory":[{"post_id":"ckszv7lwz000184u37wowawk7","category_id":"ckszv7lx8000384u3hobu9fx8","_id":"ckszv7lxe000b84u3hj2uc7dy"},{"post_id":"ckszv7lxc000784u39gdnf2fh","category_id":"ckszv7lx8000384u3hobu9fx8","_id":"ckszv7lxg000e84u3gw1wahpc"},{"post_id":"ckszv7lxd000a84u32x0j97mx","category_id":"ckszv7lxc000884u38evjef0s","_id":"ckszv7lxg000g84u31nyudh5t"},{"post_id":"ckszv7lx6000284u3bgaf7t35","category_id":"ckszv7lxc000884u38evjef0s","_id":"ckszv7lxh000k84u3b10ihg9j"},{"post_id":"ckszv7lxa000584u3hr3xag31","category_id":"ckszv7lxf000c84u31rzocoe0","_id":"ckszv7lxi000l84u3btpi9clw"},{"post_id":"ckszv7lxb000684u3ajuu1yfh","category_id":"ckszv7lxf000c84u31rzocoe0","_id":"ckszv7lxi000o84u39v4r5a92"},{"post_id":"ckszv8bra0000k0u3f0mmgwkj","category_id":"ckszv7lx8000384u3hobu9fx8","_id":"ckszv8brf0002k0u33k87enme"}],"PostTag":[{"post_id":"ckszv7lwz000184u37wowawk7","tag_id":"ckszv7lx9000484u34op4fkp1","_id":"ckszv7lxg000f84u38t4f5m0k"},{"post_id":"ckszv7lwz000184u37wowawk7","tag_id":"ckszv7lxc000984u3ei1hgiog","_id":"ckszv7lxg000h84u32gn2a1zc"},{"post_id":"ckszv7lx6000284u3bgaf7t35","tag_id":"ckszv7lxf000d84u3hrnc2qnw","_id":"ckszv7lxi000n84u3biv88443"},{"post_id":"ckszv7lx6000284u3bgaf7t35","tag_id":"ckszv7lxg000j84u3dig65ctf","_id":"ckszv7lxj000p84u3730yb7yo"},{"post_id":"ckszv7lxa000584u3hr3xag31","tag_id":"ckszv7lxi000m84u3hdp0ed8j","_id":"ckszv7lxj000s84u391m18j2o"},{"post_id":"ckszv7lxa000584u3hr3xag31","tag_id":"ckszv7lxj000q84u33xm61q4h","_id":"ckszv7lxk000t84u3gw7s8anh"},{"post_id":"ckszv7lxb000684u3ajuu1yfh","tag_id":"ckszv7lxi000m84u3hdp0ed8j","_id":"ckszv7lxk000w84u3bcry54zb"},{"post_id":"ckszv7lxb000684u3ajuu1yfh","tag_id":"ckszv7lxk000u84u37tf25hxb","_id":"ckszv7lxk000x84u3gjwn8ukw"},{"post_id":"ckszv7lxc000784u39gdnf2fh","tag_id":"ckszv7lxk000v84u3ecpiaem6","_id":"ckszv7lxm001184u302wh5qfh"},{"post_id":"ckszv7lxc000784u39gdnf2fh","tag_id":"ckszv7lxl000y84u3frqj6def","_id":"ckszv7lxm001284u3528ngq57"},{"post_id":"ckszv7lxc000784u39gdnf2fh","tag_id":"ckszv7lxl000z84u3el2y0zo8","_id":"ckszv7lxm001484u38uit4bk9"},{"post_id":"ckszv7lxd000a84u32x0j97mx","tag_id":"ckszv7lxf000d84u3hrnc2qnw","_id":"ckszv7lxn001584u37x919g7c"},{"post_id":"ckszv7lxd000a84u32x0j97mx","tag_id":"ckszv7lxg000j84u3dig65ctf","_id":"ckszv7lxn001684u37bpo9owb"},{"post_id":"ckszv8bra0000k0u3f0mmgwkj","tag_id":"ckszv8brd0001k0u39znb1ahb","_id":"ckszv8brg0003k0u376d5hx1v"}],"Tag":[{"name":"Fiddler","_id":"ckszv7lx9000484u34op4fkp1"},{"name":"测试工具","_id":"ckszv7lxc000984u3ei1hgiog"},{"name":"Hexo","_id":"ckszv7lxf000d84u3hrnc2qnw"},{"name":"博客","_id":"ckszv7lxg000j84u3dig65ctf"},{"name":"Linux","_id":"ckszv7lxi000m84u3hdp0ed8j"},{"name":"定时任务","_id":"ckszv7lxj000q84u33xm61q4h"},{"name":"部署","_id":"ckszv7lxk000u84u37tf25hxb"},{"name":"python","_id":"ckszv7lxk000v84u3ecpiaem6"},{"name":"selenium","_id":"ckszv7lxl000y84u3frqj6def"},{"name":"自动化测试","_id":"ckszv7lxl000z84u3el2y0zo8"},{"name":"测试文档","_id":"ckszv8brd0001k0u39znb1ahb"}]}}