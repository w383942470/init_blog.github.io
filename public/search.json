[{"title":"Git-强制提交本地分支来覆盖远程分支","url":"/2021/10/11/Git-OverlayRemoteCode/","content":"在代码目录下输入以下命令即可\ngit push origin 分支名 --force\n\n","categories":["日常问题"],"tags":["Git"]},{"title":"Python中使用asyncio进行异步处理","url":"/2021/10/10/Python-asyncio/","content":"在开发过程中，经常遇到需要并发处理一些事务或不想等待程序执行立马得到返回值，此时便可异步去处理\n同步执行首先来看看同步执行一个方法时，程序会按照顺序一次执行完成才会执行下一次，故我们在打印结果时可以看到，每隔1秒打印了一次\n# coding:utf-8\nimport time\n\n\ndef hello(name):\n    time.sleep(1)\n    print('hi, %s, %s' % (name, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    for i in names:\n        hello(i)\n\n\nif __name__ == '__main__':\n    main()\n\n异步执行通过以下操作，可以看到执行时间为同一秒，即完成了一次简单的异步操作\n# coding:utf-8\nimport time\nimport asyncio\n\n\n# 定义异步函数\nasync def hello(names):\n    await asyncio.sleep(1)\n    print('hi, %s, %s' % (names, time.strftime('%X')))\n\n\ndef main():\n    names = ['jacky', 'bob', 'init']\n    # 将方法添加进事件循环\n    loop = asyncio.get_event_loop()\n    tasks = [hello(i) for i in names]\n    # 阻塞调用，直到协程运行结束才返回。参数是future，传入协程对象时内部会自动变为future\n    loop.run_until_complete(asyncio.wait(tasks))\n    loop.close()\n\n\nif __name__ == '__main__':\n    main()\n\n\n异步IO的asyncio库使用事件循环驱动的协程实现并发。用户可主动控制程序，在认为耗时IO处添加await（yield from）。在asyncio库中，协程使用@asyncio.coroutine装饰，使用yield from来驱动，在python3.5中作了如下更改：@asyncio.coroutine -> async\nyield from -> awaitPython3.8之后 @asyncio.coroutine 装饰器就会被移除，推荐使用async &amp; await 关键字实现协程代码。\n\n","categories":["日常问题"],"tags":["python"]},{"title":"在Linux下安装配置Nginx","url":"/2021/10/09/Linux-Nginx-install/","content":"在拥有服务器后，需要将程序部署到服务器中，然后通过访问服务器地址加端口来展示网站，那就需要使用到nginx\n一、下载打开 Nginx官方下载链接(后缀tgz) 进行下载，当前最新的1.9.9本，下载完成后一般将文件放置于 /usr/local/目录下\n二、安装1. 解压文件使用以下命令进行解压，解压完成后可看到local目录下多了一个nginx-1.9.9的文件夹\ntar zxvf nginx-1.9.9.tar.gz\n\n2. 编译解压完成后，进入解压后的文件夹内，使用configure命令检查安装环境\n# –prefix指定nginx的安装目录，默认路径就是/usr/local/nginx\n./configure --prefix=/usr/local/nginx --with-http_stub_status_module --with-http_ssl_module\n以上操作完成后，输入以下命令进行编译\nmake\n编译完成后，输入以下命令安装编译程序\nmake install\n以上步骤全部完成后，进入 /usr/local/nginx/sbin 目录下查看是否存在nginx，如果存在即安装成功\n三、启动Nginx1.启动进入 /usr/local/nginx/sbin/ 目录下，输入以下命令即可\n./nginx\n2. 检查启动结果在浏览器中输入ip地址，查看页面，如见到以下页面即安装成功(nginx默认监听的是80端口)\n以上操作完成后，及安装成功\n四、Nginx配置详解打开 /usr/local/nginx/conf/nginx.conf 文件进行编辑\n#user  nobody;\nworker_processes  1;# 工作进程：数目。根据硬件调整，通常等于cpu数量或者2倍cpu数量。\n\n# 错误日志存放路径\n#error_log  logs/error.log;\n#error_log  logs/error.log  notice;\n#error_log  logs/error.log  info;\n\n# nginx进程pid存放路径\n#pid        logs/nginx.pid;\n\n\nevents &#123;\n    worker_connections  1024;# 工作进程的最大连接数量\n&#125;\n\n\nhttp &#123;\n    include       mime.types;# 指定mime类型，由mime.type来定义\n    default_type  application/octet-stream;\n# 日志格式设置\n    #log_format  main  '$remote_addr - $remote_user [$time_local] \"$request\" '\n    #                  '$status $body_bytes_sent \"$http_referer\" '\n    #                  '\"$http_user_agent\" \"$http_x_forwarded_for\"';\n    \n    # 用log_format指令设置日志格式后，需要用access_log来指定日志文件存放路径\n    #access_log  logs/access.log  main;\n\n    # 指定nginx是否调用sendfile函数来输出文件，对于普通应用，必须设置on。\n    # 如果用来进行下载等应用磁盘io重负载应用，可设着off，以平衡磁盘与网络io处理速度，降低系统uptime。\n    sendfile        on;\n    \n    # 此选项允许或禁止使用socket的TCP_CORK的选项，此选项仅在sendfile的时候使用\n    #tcp_nopush     on;\n    \n    # keepalive超时时间\n    #keepalive_timeout  0;\n    keepalive_timeout  65;\n    \n    # 开启gzip压缩服务\n    #gzip  on;\n    \n    # 虚拟主机\n    server &#123;\n        listen       80;# 配置监听端口号\n        server_name  localhost;# 配置访问域名，域名可以有多个，用空格隔开\n        \n        # 字符集设置\n        #charset koi8-r;\n\n        #access_log  logs/host.access.log  main;\n\n        location / &#123;\n            root   /usr/demo; # 项目路径\n            index  login.html; # 需要访问的html文件名称\n        &#125;\n        \n        # 错误跳转页\n        #error_page  404              /404.html;\n\n        # redirect server error pages to the static page /50x.html\n        #\n        error_page   500 502 503 504  /50x.html;\n        location = /50x.html &#123;\n            root   html;\n        &#125;\n\n        # proxy the PHP scripts to Apache listening on 127.0.0.1:80\n        #\n        #location ~ \\.php$ &#123;\n        #    proxy_pass   http://127.0.0.1;\n        #&#125;\n\n        # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000\n        #\n        #location ~ \\.php$ &#123;\n        #    root           html;\n        #    fastcgi_pass   127.0.0.1:9000;\n        #    fastcgi_index  index.php;\n        #    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;\n        #    include        fastcgi_params;\n        #&#125;\n\n        # deny access to .htaccess files, if Apache's document root\n        # concurs with nginx's one\n        #\n        #location ~ /\\.ht &#123;\n        #    deny  all;\n        #&#125;\n    &#125;\n\n\n    # another virtual host using mix of IP-, name-, and port-based configuration\n    #\n    #server &#123;\n    #    listen       8000;\n    #    listen       somename:8080;\n    #    server_name  somename  alias  another.alias;\n\n    #    location / &#123;\n    #        root   html;\n    #        index  index.html index.htm;\n    #    &#125;\n    #&#125;\n\n\n    # HTTPS server\n    #\n    #server &#123;\n    #    listen       443 ssl;\n    #    server_name  localhost;\n\n    #    ssl_certificate      cert.pem;\n    #    ssl_certificate_key  cert.key;\n\n    #    ssl_session_cache    shared:SSL:1m;\n    #    ssl_session_timeout  5m;\n\n    #    ssl_ciphers  HIGH:!aNULL:!MD5;\n    #    ssl_prefer_server_ciphers  on;\n\n    #    location / &#123;\n    #        root   html;\n    #        index  index.html index.htm;\n    #    &#125;\n    #&#125;\n\n&#125;\n编辑完成后，重启Nginx即可生效\n五、Nginx基础命令./nginx # 启动nginx\n./nginx -s stop # 先查出nginx进程id再使用kill命令强制杀掉进程\n./nginx -s quit # 待nginx进程处理任务完毕进行停止\n./nginx -s reload # 重启nginx\n每次编辑完nginx.conf文件后都必须重启nginx\n\n","categories":["服务器"],"tags":["Linux","部署"]},{"title":"Python中自动安装依赖(freeze)","url":"/2021/10/05/Python-requirements-install/","content":"前言在学习python的过程中，经常会遇到需要在另外一台机器上去运行程序或者换电脑进行开发的情况出现，当遇到这些情况时最笨的办法就只能一遍一遍的敲运行命令看少哪个依赖包就去pip哪个依赖包，这样重复操作就非常的麻烦，那这时候我们就可以使用freeze命令来导出已安装模块文档\n使用在可运行项目的电脑中，进入项目根目录输入以下命令以导出已安装模块文档，完成以下命令后可在当前目录下生成一个相对应的文件，文件中包含了包名以及版本号\npip freeze > modules.txt\n在另外一台电脑的项目根目录输入以下命令即可开始安装需要安装的依赖\npip install -r modules.txt\n接下来就只需要耐心等待安装完成，然后启动项目就好啦~\n\n","categories":["日常问题"],"tags":["python"]},{"title":"Linux下安装python3","url":"/2021/09/28/Linux-Python-Install/","content":"在Linux服务器中，一般都会自带python，版本为2.X，但是由于python不断迭代更新，我们用到的版本大多为3.X，故今天拿到一台新的服务器，准备在服务器中再安装一个python3.7.3版本。\n尽量不要删除自带2.X的python，因为可能会有其他地方用到了，删掉了可能会导致其他问题难以解决。\n一、下载安装包本次安装的python版本为 3.7.3 。首先，我们需要下载python 3.7.3版本的安装包\n1、在Linux中通过 wget 方式来下载：1.1、在Linux中新建一个存放安装包的文件夹1.2、然后进入该目录再使用 wget 命令进行下载wget https://www.python.org/ftp/python/3.7.3/Python-3.7.3.tgz\n2、在Windows下打开 python下载链接(后缀tgz) 来进行下载：\n2.1、下载完成后将安装包放入新建的文件夹中即可二、安装1、进入安装包所在目录，解压压缩包tar -zxvf Python-3.7.3.tgz\n2、解压完成后，进入源码文件夹中指定安装路径，之后如果想卸载此版本时，删除安装目录即可3、进入安装路径后，需要指定安装目录，输入以下命令./configure --prefix=/usr/python3.7.3\n4. 完成指定后，进入安装目录下，进行编译# 进入安装目录路径\ncd python3.7.3\n# 编译\nmake\n5. 编译完成后，进行安装make install\n\n因为我使用的是 centOS 7 ，在 centOS 中直接使用 make install 命令会报错 No module named ‘_ctypes’ ，解决方案：安装之前我们需要先使用命令 yum install libffi-devel -y 安装完成之后再进行安装python即可成功\n6、配置系统环境变量安装完python3后我们在随意目录下输入命令:\npython -V\n会发现，指向的依旧是2.X的版本，但我们希望可以直接使用的是python 3.7.3版本，所以需要将path添加到环境变量中去修改/etc/profile系统环境变量配置文件，添加安装路径下的bin目录\n# 使用vim命令，打开etc目录下的profile文件\nvim /etc/profile\n# 在文件首行输入以下内容\nPATH=/usr/python3.7.3/bin:/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/root/bin\n保存后，使用以下命令重载配置文件：\nsource /etc/profile\n三、验证安装输入以下命令进行验证：\npython3 -V\npip3 -V\n\n以上即安装全过程，全程顺畅无阻，完美安装~\n\n","categories":["服务器"],"tags":["Linux","python"]},{"title":"Python程序打包成exe可执行文件(pyinstaller)","url":"/2021/09/24/Python-Package/","content":"一、为什么要将项目打包我们在日常开发中，在编辑器中完成了开发后，需要使得程序能够脱离编辑器独立运行，所有的第三方依赖、资源和代码均被打包进该exe内，那我们就需要将程序打包成exe可执行文件。打包可使用的工具有很多，这次主要做pyinstaller的示例。\n二、安装pyinstaller安装命令：\npip install pyinstaller\n三、如何使用pyinstaller1.功能注释\n\n\n功能\n注释\n\n\n\n-F\n打包成一个文件\n\n\npyinstaller -F main.py\n将main.py打包，生成main.exe文件\n\n\n-D\n打包成一个文件夹\n\n\n-n\n重新命名\n\n\npyinstaller -F main.py -n name\n将main.py打包，生成main.exe文件\n\n\n-noconsole\n去 掉cmd命令窗口\n\n\n-i\n加入图标，图标所需要的是ico格式\n\n\npyinstaller -i index.ico -F main.py\n将main.py打包，生成main.exe文件，并给予index.ico作为图标\n\n\n2.使用在当前脚本所在位置打开cmd，输入命令\npyinstaller -F main.py\n当看到以下输出即为打包成功\n12781 INFO: Building EXE from EXE-00.toc completed successfully.\n打包完成后，在当前文件夹下会生成一个dist及build文件夹，在dist文件夹下就可以看到刚刚我们打包所生成的exe文件，接下来双击即可运行\n","categories":["测试相关"],"tags":["python","自动化测试"]},{"title":"Python中使用正则去除html标签","url":"/2021/09/10/Python-Re-RemoveHtml/","content":"在爬虫过程中渠道的text中包含html标签，或者想剔除某一块标签，使用正则即可将html标签完全剔除\nimport re\n\nhtml = '&lt;font color=red>区块链&lt;/font>技术应用场景落地，重庆智能学生证助力大数据精准教学'\n\npattern = re.compile(r'&lt;[^>]+>', re.S)\ntitle = pattern.sub('', html)\n\nprint(title)\n\n","categories":["日常问题"],"tags":["python"]},{"title":"Python如何利用BeautifulSoup剔除不想要的标签","url":"/2021/09/10/Python-Bs4-RemoveLabel/","content":"在爬虫过程中遇到页面中有部分标签不是想要的，但是又无法取下一层标签进行精确定位时，可以用BeautifulSoup中的一下方法进行剔除标签，从而达到目的\nfrom bs4 import BeautifulSoup\nhtml = '\n&lt;h3>\n&lt;small>Sep 09, 2021, 08:00 ET&lt;/small>\nKawaii Islands raises $2.4M in private token sale for its upcoming anime metaverse\n&lt;/h3>'\npage_html = BeautifulSoup(html, 'lxml')\n[s.extract() for s in page_html('small')]\n\nprint(page_html.text)\n\n","categories":["日常问题"],"tags":["python"]},{"title":"Python爬虫遇到中文乱码怎么办","url":"/2021/09/08/Python-request-MistakenCode/","content":"在爬虫过程中遇到页面中文编码乱码的问题，直接给返回值更改编码即可解决\nimport requests\n\nres = requests.get(url)\n\nres.encoding = 'gb2312'\n\nprint(res.text)\n\n","categories":["日常问题"],"tags":["python"]},{"title":"Python如何随机打乱list列表","url":"/2021/09/05/Python-Change-List/","content":"条件假设已有一个list为[‘dog’, ‘pig’, ‘cat’, ‘mouse’]，需求是将该列表随机打乱\n解决方法使用python随机函数random，调用random中的shuffle方法，将需要打乱的列表作为参数传递\nimport random\n\ndemo_list = ['dog', 'pig', 'cat', 'mouse']\n\nprint(demo_list)\nprint('------------------------------')\n\n# 循环打印十次看随机后的列表\nfor i in range(0, 10):\n    random.shuffle(demo_list)\n    print(demo_list)\n\n","categories":["日常问题"],"tags":["python"]},{"title":"python如何将url中参数分解","url":"/2021/09/02/Parameter-Decomposition/","content":"python分解url中的参数import urllib.parse as urlparse\n\nurl = 'http://service.weibo.com/share/share.php?title=财联社9月2日电，英国报告新增38154例新冠肺炎确诊病例，新增178例死亡病例。 &amp;amp;url=https://www.cls.cn/detail/827698&amp;amp;searchPic=false'\n\nparsed = urlparse.urlparse(url)\n\nprint(parsed)\n\nquerys = urlparse.parse_qs(parsed.query)\n\nprint(querys)\n\nquerys = &#123;k: v[0] for k, v in querys.items()&#125;\n\nprint(querys)\n\n","categories":["日常问题"],"tags":["python"]},{"title":"Fiddler抓包工具使用及配置","url":"/2021/08/30/Fiddler-Proxy/","content":"一、什么是Fiddler？Fiddler 是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n二、下载安装FiddlerFiddler官网下载地址：打开下载地址\n\n一路next，当见到浏览器打开以下页面时，及安装成功\n\n三、如何配置Fiddler？1、打开Fiddler安装完成后，打开软件(在安装目录下找到Fiddler.exe文件，双击打开)\n\n2、配置Fiddler打开后我们可以看到Fiddler的一个面板，随后打开tools &gt; options 菜单\n\n在options菜单中，我们打开https模块，然后勾选Decrypt HTTPS traffic\n\n随后软件出现以下弹窗，我们选yes\n\n在上一步后，系统将提示是否安装证书，我们选是就行了\n\n接着勾选上Ignore server certificate errors即可，返回主面板然后打开浏览器，现在我们就可以看到左侧面板中有抓到的包数据进来了\n\n在左侧面板中，我们可以看到数据包的状态码、host、url等\n\n在左侧面板中选中一个数据包，则可在右侧面板中查看到该请求的请求头以及具体返回值相关信息\n\n2.1、配置手机抓包Fiddler中打开tools &gt; options &gt; connection 设置端口，并允许远程连接\n\n首先我们需要在Fiddler右上角获取当前ip地址，手机连接wifi必须与电脑连接的网络处于同一网段\n\nAndroid:打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存\n\niOS:打开手机中设置 &gt; WIFI &gt; 网络详情 &gt; 代理(配置代理) &gt; 手动 中输入刚刚我们的ip以及端口号保存\n\n然后打开手机自带的浏览器，输入下面地址，然后点击 FiddlerRoot certificate 下载证书\nIP地址:端口号 &#x2F;&#x2F;注意冒号用英文冒号\nAndroid 下载完成后，在下载中找到文件点击根据提示进行安装，至到系统提示安装完成iOS 需注意下载完成之后，打开设置 &gt; 通用 &gt; 描述文件 进行安装，安装完成之后进入关于本机 &gt; 证书信任中将 DO_NOT_TRUST_FidderRoot 打开\n\n以上配置完成了之后就可以愉快的抓包啦~\n四、如何使用Fiddler1、过滤器在右侧面板中，打开 Filters ，勾选 use Filters ，然后与下图相同配置，在输入框中输入想要过滤出来的域名，如:baidu.com 多个域名之间使用英文分号隔开，设置完成后点击右侧Action中 Run Filterset Now 立即执行\n\n2、断点在顶部菜单中选择 Rules &gt; Automatic BreakPoints，在这个菜单项我们可以看到有Before Requests 、 After Requests 、 Disabled 三个选项，默认选中Disables。Before Requests 则为在请求之前拦截，选择了此项后，我们可以在请求之前修改请求头，修改完成后，点击Run to Completion即可发送请求，以达到测试效果After Requests 则为在请求之后拦截，选择了此项后，我们可以在请求之后修改返回参数，修改完成后，点击Run to Completion即可发送请求，以达到测试效果\n\n3、弱网设置在右侧面板中，打开 FiddlerScript，找到以下脚本进行更改。 request-trickle-delay 中的值代表每KB的数据被上传时会被延时多少毫秒； response-trickle-delay 则对应下载时每KB的数据会被延时多少毫秒\nif (m_SimulateModem) &#123;\n    // Delay sends by 300ms per KB uploaded.\n    oSession[\"request-trickle-delay\"] = \"300\"; \n    // Delay receives by 150ms per KB downloaded.\n    oSession[\"response-trickle-delay\"] = \"150\"; \n&#125;\n五、小节如果上述操作没有抓到包，建议尝试手动导入导出证书后再试。最后附上官方文档，如有其它功能需求可以查看官方文档~\n\n","categories":["测试相关"],"tags":["Fiddler","测试工具"]},{"title":"软件测试质量保障之开发提测","url":"/2021/08/25/Submit-Test/","content":"一、什么是提测 ？“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n二、为什么要有提测这个流程？开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n三、如果没有提测这个流程会有些什么样的影响？功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n四、如何做好提测，以提高提测质量？推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n五、提测邮件模板 XXXX 需求提测通知一、提测需求:1. XXXX 需求文档：需求链接2.接口文档：接口文档链接二、提测环境:测试环境三、自测结论:通过四、提测范围:1，提测XX功能，起到了XX的效果2，测试类型为功能测试和接口测试(如有接口测试)3，测试类型为功能测试五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \n","categories":["测试相关"],"tags":["测试文档"]},{"title":"Python+Selenium 调起浏览器","url":"/2021/08/13/Python-Selenium/","content":"一、什么是Selenium？Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n二、安装Selenium1. 下载python的selenium安装包pip install selenium\n2. Windows下下载与浏览器版本相对应的webdriverchrom浏览器的web driver\nhttp://npm.taobao.org/mirrors/chromedriver/\nfirefox（火狐浏览器）的web driver\nhttps://github.com/mozilla/geckodriver/releases\nSafari的web driver\nhttps://webkit.org/blog/6900/webdriver-support-in-safari-10/\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n三、示例1. 引入Selenium包，并调起浏览器首先，引入需要用到的selenium包中的webdriver模块\nfrom selenium import webdriver\n使用webdriver模块中的方法，调起对应的浏览器\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 调起火狐浏览器，如对应驱动不在统一目录下，在括号中加入路径\ndriver = webdriver.Firefox()\n2. 在浏览器中打开百度使用刚刚创建的driver对象，调用get方法，get方法中需要传入一个url参数，运行下列代码，我们就可以看到浏览器打开百度啦\nfrom selenium import webdriver\n\n# 调起谷歌浏览器，如webdriver.exe不在统一目录下，在括号中加入路径\ndriver = webdriver.Chrome()\n# 定义一个url后使用get方法\nurl = 'https://www.baidu.com'\ndriver.get(url)\n# 在操作完成后，需要调用quit()方法关闭浏览器\ndriver.quit()\n3. 在百度中搜索selenium经过上述操作，我们已经可以打开百度了，那接下来我们就给百度输入一个selenium的关键词进行搜索\n3.1 selenium定位元素的几种方法# 以下方法均有复数形式，则返回一个列表。方法名称则将element加上s即可\n# 通过ID进行匹配查找\ndriver.find_element_by_id()\n# 通过name进行匹配查找\ndriver.find_element_by_name()\n# 通过xpath进行匹配查找\ndriver.find_element_by_xpath()\n# 通过链接内容进行匹配查找\ndriver.find_element_by_link_text()\n# 通过部分链接内容进行匹配查找\ndriver.find_element_by_partical_link_text()\n# 通过标签名称进行匹配查找\ndriver.find_element_by_tag_name()\n# 通过class名称进行匹配查找\ndriver.find_element_by_class_name()\n# 通过CSS选择器进行匹配查找\ndriver.find_element_by_css_selector()\n3.2 使用以上方法定位百度输入框打开百度，选中输入框，可以看到输入框有id也有name，那么在查找元素的时候就可以根据id或name来定位\n# 将定位到的输入框对象赋值给word_input变量\nword_input = driver.find_element_by_id('kw')\n\n3.3 将关键词输入为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\n# 定义需要输入的关键词变量\nkey_word = 'selenium'\n# 为了防止在输入之前输入框中有内容，影响输入结果，在输入前先试用clean方法清空输入框\nword_input.clean()\n# 清空完成后将关键词输入\nword_input.send_keys(key_word)\n3.3 搜索输入完内容后，利用上述方法找到按钮对象，即可使用click()方法点击”百度一下”，运行脚本即可实现想要的结果\nsearch = driver.find_element_by_id('s_kw_wrap')\nsearch.click()\n以上就完成了简单的python调起浏览器操作~如果其他问题欢迎联系交流，或者参考中文官方文档\n\n","categories":["测试相关"],"tags":["python","selenium","自动化测试"]},{"title":"Linux中的定时任务(crontab)","url":"/2021/08/12/Linux-Crontab/","content":"一、什么是Crontab？cron 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，cron 是被默认安装并启动的。\n二、为什么我们要使用Crontab？在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n三、如何使用Crontab？1. 查看Crontab的工作表crontab -l\n\n2. 编辑Crontab工作表crontab -e\n进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。\n3. 删除Crontab工作表中的工作crontab -r\n4. Crontab的命令构成4.1 数字范围0-59 0-23 1-31 1-12 0-7 python main.py\n分钟 小时 日期 月份 周 命令\n4.2 特殊字符\"*\"代表所有的取值范围内的数字，如月份字段为\"*\"，则表示1到12个月；\n\n\"/\"代表每一定时间间隔的意思，如分钟字段为\"*/10\"，表示每10分钟执行1次。\n\n\"-\"代表从某个区间范围，是闭区间。如\"2-5\"表示\"2,3,4,5\"，小时字段中0-23/2表示在0~23点范围内每2个小时执行一次。\n\n\",\"分散的数字（不一定连续），如1,2,3,4,7,9。\n4.3 日志存储构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志\n5. 示例5.1 每一分钟执行一次”mian.py”文件* * * * * python main.py\n因为cron默认每一分钟扫描一次，故全部设置为”*”即可\n5.2 每小时的5和30分钟执行一次”mian.py”文件15,30 * * * * python main.py\n5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 * * * python main.py\n5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 */3 * * python main.py\n5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 * * 3 python main.py\n\n","categories":["服务器"],"tags":["Linux","定时任务"]},{"title":"如何搭建Hexo博客并部署到GitHub","url":"/2021/08/12/Web_Hexo/","content":"什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n环境一、安装Git、Nodejs、Hexo1.安装GitWindows：可通过Git官网自行下载安装，一路Next，记住将路径加到环境变量中。\nLinux：\n1.1 检查git是否已经安装git --version\n如果出现以下提示直接下一步：\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n\n1.2 安装Git如果出现的提示是Not Find那就进行以下命令进行安装吧\nyum -y install git\n1.3 检查Git版本安装完成后输入命令查看Git版本：\n[root@VM_0_5_centos /]# git --version\ngit version 2.27.GIT\n\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n\n2.安装NodejsWindows：\n2.1 Node.js 官方网站下载，并且选择操作系统对应的包2.2 下载完成后一路next即可提示：切记，将exe文件路径添加至环境变量中\n\nLinux：\n2.1 Node.js 官方网站下载，并且选择操作系统对应的包2.2 将安装包上传到指定位置，并解压tar -xvf node-v10.6.0-linux-x64.tar.xz\n2.3 通过建立软连接变为全局ln -s /usr/local/application/nodejs/bin/npm /usr/local/bin/\nln -s /usr/local/application/nodejs/bin/node /usr/local/bin/\n2.4 检查是否安装成功node-v\n3.安装Hexo3.1 安装Hexo当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\nnpm install -g hexo-cli\n3.2 查看Hexo版本安装完成后，查看版本\nhexo -v\n当看到打印出来的版本号后，说明以及安装完成\n二、生成Hexo初始化Hexohexo init myblog //文件夹名称\n安装依赖包npm install\n当新建完成后，将会出现以下文件夹\n1.node_modules：依赖包2.public：生成的页面3.scaffolds：文章模板4.source：文章5.themes：主题6._config.yml：配置文件三、启动Hexo项目启动1.生成静态文件hexo generate\n也可以简写为\nhexo g\n2.生成静态文件hexo server\n也可以简写为\nhexo s\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n\n\n三、部署至GitHub中的1.GitHub创建仓库在GitHub中创建一个自己的仓库\n1.1 生成SSH并添加至GitHub中1.配置Git相关信息\ngit config --global user.name \"你的用户名\"\ngit config --global user.email \"你的email\"\n2.创建SSH，输入命令后一路回车\nssh-keygen -t rsa -C \"youremail\"\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\nC:\\Users\\think\\.ssh //路径\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n1.2 在GitHub创建仓库点击右上角+号，选择new repository，在Repository name中输入：\n你的用户名.github.io\n点击Create repository即可完成项目创建\n2.将Hexo部署到GitHub Pages中2.1 修改配置文件1.打开根目录下的_config.yml文件，拉到最后\ndeploy:\n    type: git\n    repository: https://github.com/你的用户名/你的用户名.github.io.git\n    branch: master //分支名称\n2.2 安装上传渲染插件需要安装deploy-git，这样才可以部署到GitHub中\nnpm install hexo-deployer-git --save\n2.3 部署输入完整命令进行部署\nhexo clean\nhexo generate\nhexo deploy\n也可以输入简化命令\nhexo clean //清除之前生成的文件，也可不加\nhexo g //生成静态文件\nhexo d //部署\n2.4 GitHub中配置GitHub Pages进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n\n","categories":["WEB前端"],"tags":["Hexo","博客"]},{"title":"Hexo博客新建文章","url":"/2021/08/11/Hexo_Article/","content":"创建新文章一、新文章创建命令hexo new &lt;模板名称> &lt;文件名称>\n二、模板名称简介\n\n\n模板名称\n作用\n路径\n\n\n\npost\n新建文章\n/source/_posts/\n\n\ndraft\n新建草稿\n/source/_drafts/\n\n\npage\n新建页面(如标签、分类)\n/source/\n\n\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n\n编辑新文章内容（基于 Markdown）一、编辑头部信息打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数\n\n\n\n参数名称\n作用\n\n\n\ntitle\n网站标题\n\n\ntags\n文章标签，支持多个。(如：[博客,前端])\n\n\ncategories\n文章分类(如：前端)\n\n\n二、基本语法1.什么是Markdown？Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n2.Markdown基本语法1.标题。一共支持六级# //一级标题\n## //二级标题\n### //三级标题\n#### //四级标题\n##### //五级标题\n###### //六级标题\n2.字体*斜体* //左右分别用一个*号包起来\n**加粗** //左右分别用两个*号包起来\n***斜体加粗*** //左右分别用三个*号包起来\n~~删除线~~ //左右分别用两个~~号包起来\n3.引用在引用的文字前加上”&gt;”即可\n> 这是引用的内容\n>> 这是引用的内容\n>>> 这是引用的内容\n4.分割线三个或者三个以上的 - 或者 * 都可以。\n---\n----\n***\n*****\n5.图片如果要在本地上传图片，那首先得安装图片插件\nnpm install hexo-asset-image --save\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\nhexo new post article\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n![这是一张图片](article/img.png) //![图片描述](图片路径) \n提示：注意文件夹名称必须与文件名称一致\n\n6.表格|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n7.超链接[打开百度](http://www.baidu.com, \"这是百度链接\") //[链接文字](链接地址 \"链接描述\")\n\n","categories":["WEB前端"],"tags":["Hexo","博客"]},{"title":"Screen的使用方法","url":"/2021/08/06/Server_Screen/","content":"为什么要使用screen命令VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n一、screen命令是什么？Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n二、如何安装screen命令？除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\nyum install screen\nCentOS 8上移除了screen，需要安装epel后安装screen执行：\nyum install screen\nDebian/Ubuntu系统执行：\napt-get install screen\n三、screen命令使用方法？1、常用的使用方法用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n1.1 创建screen会话screen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\nscreen -S lnmp\n1.2 暂时离开，保留screen会话中的任务或程序当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n1.3 恢复screen会话恢复到离开前创建的lnmp会话的工作界面,执行：\naaaq lnmp \n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\nscreen -ls screen\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\nscreen -r lnmp\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\nscreen -r 11791\n\n1.4 关闭screen的会话执行：\nexit\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n1.5 删除会话screen -S session_name -X quit\nor\nscreen -X -S 122128 quit\n2、远程演示首先演示者先在服务器上执行:\nscreen -S test\n创建一个screen会话，观众可以链接到远程服务器上执行:\nscreen -x test\n观众屏幕上就会出现和演示者同步。\n3、常用快捷键3.1 在当前screen会话中创建窗口Ctrl+a c\n3.2 窗口列表Ctrl+a w\n3.3 下一个窗口Ctrl+a n\n3.4 上一个窗口Ctrl+a p\n3.5 在第0个窗口和第9个窗口之间切换Ctrl+a 0-9Ctrl+a 0-9\n","categories":["服务器"],"tags":["Linux","部署"]}]