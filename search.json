[{"title":"Fiddler抓包工具使用及配置","url":"/2021/08/30/Fiddler-Proxy/","content":"一、什么是Fiddler？Fiddler 是一个强大的HTTP调试抓包工具。Fiddler官方版可以用其检测网页和服务器的交互情况，Fiddler能够记录所有客户端和服务器间的http请求，支持监视、设置断点、甚至修改输入输出数据等功能。Fiddler对开发人员或者测试人员来说，都是非常有用的工具。\n二、下载安装FiddlerFiddler官网下载地址：打开下载地址\n三、如何配置Fiddler？安装完成后，打开软件&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD=======\n\n\n\n\n\n\n\ndevelop\n\n\n\n\n\n\n\n","categories":["测试相关"],"tags":["Fiddler","测试工具"]},{"title":"如何搭建Hexo博客并部署到GitHub","url":"/2021/08/30/Web_Hexo/","content":"什么是 Hexo？Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 Markdown（或其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。基于Node.js的静态博客框架，依赖少易于安装使用，可以方便的生成静态网页托管在GitHub和Coding上，是搭建博客的首选框架。\n环境一、安装Git、Nodejs、Hexo1.安装GitWindows：可通过Git官网自行下载安装，一路Next，记住将路径加到环境变量中。\nLinux：\n1.1 检查git是否已经安装git --version\n如果出现以下提示直接下一步：\n[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT\n\n1.2 安装Git如果出现的提示是Not Find那就进行以下命令进行安装吧\nyum -y install git\n1.3 检查Git版本安装完成后输入命令查看Git版本：\n[root@VM_0_5_centos &#x2F;]# git --version\ngit version 2.27.GIT\n\n提示：yum安装git被安装在/usr/libexec/git-core目录下\n\n2.安装NodejsWindows：\n2.1 Node.js 官方网站下载，并且选择操作系统对应的包2.2 下载完成后一路next即可提示：切记，将exe文件路径添加至环境变量中\n\nLinux：\n2.1 Node.js 官方网站下载，并且选择操作系统对应的包2.2 将安装包上传到指定位置，并解压tar -xvf node-v10.6.0-linux-x64.tar.xz\n2.3 通过建立软连接变为全局ln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;npm &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\nln -s &#x2F;usr&#x2F;local&#x2F;application&#x2F;nodejs&#x2F;bin&#x2F;node &#x2F;usr&#x2F;local&#x2F;bin&#x2F;\n2.4 检查是否安装成功node-v\n3.安装Hexo3.1 安装Hexo当Git以及node.js安装完毕后，即可开始安装Hexo，首先先创建一个文件夹(用于存放code)，使用 git bash 进入该文件夹，输入命令：\nnpm install -g hexo-cli\n3.2 查看Hexo版本安装完成后，查看版本\nhexo -v\n当看到打印出来的版本号后，说明以及安装完成\n二、生成Hexo初始化Hexohexo init myblog &#x2F;&#x2F;文件夹名称\n安装依赖包npm install\n当新建完成后，将会出现以下文件夹\n1.node_modules：依赖包2.public：生成的页面3.scaffolds：文章模板4.source：文章5.themes：主题6._config.yml：配置文件三、启动Hexo项目启动1.生成静态文件hexo generate\n也可以简写为\nhexo g\n2.生成静态文件hexo server\n也可以简写为\nhexo s\n完成以上操作后，根据提示在浏览器输入localhost:4000即可打开看到你的博客啦~\n\n\n三、部署至GitHub中的1.GitHub创建仓库在GitHub中创建一个自己的仓库\n1.1 生成SSH并添加至GitHub中1.配置Git相关信息\ngit config --global user.name &quot;你的用户名&quot;\ngit config --global user.email &quot;你的email&quot;\n2.创建SSH，输入命令后一路回车\nssh-keygen -t rsa -C &quot;youremail&quot;\n创建完成后会在本地生成一个文件夹，在文件夹中找到id_rsa.pub，复制出来\nC:\\Users\\think\\.ssh &#x2F;&#x2F;路径\nid_rsa是当前计算机的私人秘钥，id_rsa.pub是公共秘钥。把公钥放在GitHub上，这样GitHub就会根据公钥去匹配你的私钥，当匹配上了后，就能够通过git上传你的文件到GitHub。\n然后在GitHub的setting中，找到SSH keys的设置选项，点击New SSH key 把刚刚复制的信息放进去\n1.2 在GitHub创建仓库点击右上角+号，选择new repository，在Repository name中输入：\n你的用户名.github.io\n点击Create repository即可完成项目创建\n2.将Hexo部署到GitHub Pages中2.1 修改配置文件1.打开根目录下的_config.yml文件，拉到最后\ndeploy:\n    type: git\n    repository: https:&#x2F;&#x2F;github.com&#x2F;你的用户名&#x2F;你的用户名.github.io.git\n    branch: master &#x2F;&#x2F;分支名称\n2.2 安装上传渲染插件需要安装deploy-git，这样才可以部署到GitHub中\nnpm install hexo-deployer-git --save\n2.3 部署输入完整命令进行部署\nhexo clean\nhexo generate\nhexo deploy\n也可以输入简化命令\nhexo clean &#x2F;&#x2F;清除之前生成的文件，也可不加\nhexo g &#x2F;&#x2F;生成静态文件\nhexo d &#x2F;&#x2F;部署\n2.4 GitHub中配置GitHub Pages进入刚刚创建的仓库中，打开Setting-Pages，选择需要部署的分支以及读取的根目录，点击save后，页面将会将部署后可访问的域名展示出来，直接访问即可\n\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n\n\n\n\n\n\n\ndevelop\n\n\n\n\n\n\n\n","categories":["WEB前端"],"tags":["Hexo","博客"]},{"title":"软件测试质量保障之开发提测","url":"/2021/08/25/Submit-Test/","content":"1.什么是提测 ？“提测”即提交测试人员进行系统性的测试。进入到该流程说明开发人员对于模块的编写实现以及接口的完成是完全按照产品、设计师提供的prd以及设计图实现，然后测试人员开始测试的一个流程。\n2.为什么要有提测这个流程？开发提测是正式开始测试的重要关卡，提测质量的好坏会直接影响测试阶段的效率，进而影响项目进度。较好的提测质量，对提高测试效率和优化项目进度有着事半功倍的作用。\n3.如果没有提测这个流程会有些什么样的影响？功能跟产品PRD里的不一样，走偏了；前端BUG不断； 严重阻塞性BUG不断；测试环境极度不稳定，测试人员需要一直与开发人员沟通定位问题。这些问题都会造成极大的沟通成本、执行成本，也会占用很多资源，直接影响了整个部门对需求处理的吞吐量。\n4.如何做好提测，以提高提测质量？推进提测质量的提高，可以有很多种方式。每个公司或项目组都会有各自特点及相应适用匹配的方法流程。在正式提测前开发实现中，可以通过方案讲解会、code review来提高实现质量及预期结果；正式提测阶段，可以通过自测用例、交互走查、视觉走查等方式把关质量；提测后，可以有产品验收等方式。在这里，主要和大家一起沟通下正式提测阶段的自测用例。自测用例(冒烟测试用例)由测试在迭代开发完成之前以邮件的形式发送至开发人员邮箱中，开发人员在接收到邮件且完成开发后，自行根据测试用例进行自测(在此之前开发人员需先自行验证是否有报错)。如开发人员在自测过程中发现存在与需求/设计图相违背的情况，需告知产品以及测试，三方进行协调决定是否采纳，如采纳则继续执行用例，不采纳则开发人员需重新整理方案后再继续执行用例。提测的开始需由开发人员发送邮件至测试人员告知可进行提测，随即测试人员开始根据用例进行测试，若冒烟测试通过，则正式进入测试流程，开始进一步根据测试大纲进行测试；如若冒烟测试不通过且非机型问题，则测试人员向全体相关人员发送提测不通过邮件，开发人员需修改完成后重新自测，通过后可再次提测(一天时间内测试人员不接受两次提测)。\n5.提测邮件模板 XXXX 需求提测通知一、提测需求:1. XXXX 需求文档：需求链接2.接口文档：接口文档链接二、提测环境:测试环境三、自测结论:通过四、提测范围:1，提测XX功能，起到了XX的效果2，测试类型为功能测试和接口测试(如有接口测试)3，测试类型为功能测试&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 =======\n五、影响范围: 本次提测对XX功能/模块有影响，需要重点关注 \n\n\n\n\n\n\n\ndevelop\n\n\n\n\n\n\n\n","categories":["测试相关"],"tags":["测试文档"]},{"title":"Python+Selenium 调起浏览器","url":"/2021/08/13/Python-Selenium/","content":"一、什么是Selenium？Selenium是一个用于Web应用程序测试的工具。Selenium测试直接运行在浏览器中，就像真正的用户在操作一样。支持的浏览器包括IE（7, 8, 9, 10, 11），Mozilla Firefox，Safari，Google Chrome，Opera，Edge等。这个工具的主要功能包括：测试与浏览器的兼容性——测试你的应用程序看是否能够很好得工作在不同浏览器和操作系统之上。测试系统功能——创建回归测试检验软件功能和用户需求。支持自动录制动作和自动生成 .Net、Java、Perl等不同语言的测试脚本。\n二、安装Selenium1. 下载python的selenium安装包pip install selenium\n2. Windows下下载与浏览器版本相对应的webdriverchrom浏览器的web driver\nhttp:&#x2F;&#x2F;npm.taobao.org&#x2F;mirrors&#x2F;chromedriver&#x2F;\nfirefox（火狐浏览器）的web driver\nhttps:&#x2F;&#x2F;github.com&#x2F;mozilla&#x2F;geckodriver&#x2F;releases\nSafari的web driver\nhttps:&#x2F;&#x2F;webkit.org&#x2F;blog&#x2F;6900&#x2F;webdriver-support-in-safari-10&#x2F;\n下载完成后，将解压出来的exe文件与py文件放置同一个目录下。\n三、示例1. 引入Selenium包，并调起浏览器from selenium import webdriver\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n![添加微信](Python-Selenium/WX_QR_code.png)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop\n\n","categories":["测试相关"],"tags":["python","selenium","自动化测试"]},{"title":"Linux中的定时任务(crontab)","url":"/2021/08/12/Linux-Crontab/","content":"一、什么是Crontab？cron 是一个Linux定时执行工具，可以在无需人工干预的情况下运行作业。 在服务器中，cron 是被默认安装并启动的。\n二、为什么我们要使用Crontab？在日常服务器项目运行过程中，我们避免不了的需要在固定的时间去执行固定的任务。如果每次都需要手动执行程序去完成任务，那实在是太累了，此时就可以用到crontab来代替我们人工去触发执行这些任务。\n三、如何使用Crontab？1. 查看Crontab的工作表crontab -l\n\n2. 编辑Crontab工作表crontab -e\n进入编辑页之后，输入”a”进入编辑模式。编辑完成之后，ctrl+c保存，输入”:”，再输入”wq”加回车退出编辑模式。\n3. 删除Crontab工作表中的工作crontab -r\n4. Crontab的命令构成4.1 数字范围0-59 0-23 1-31 1-12 0-7 python main.py\n分钟 小时 日期 月份 周 命令\n4.2 特殊字符&quot;*&quot;代表所有的取值范围内的数字，如月份字段为&quot;*&quot;，则表示1到12个月；\n\n&quot;&#x2F;&quot;代表每一定时间间隔的意思，如分钟字段为&quot;*&#x2F;10&quot;，表示每10分钟执行1次。\n\n&quot;-&quot;代表从某个区间范围，是闭区间。如&quot;2-5&quot;表示&quot;2,3,4,5&quot;，小时字段中0-23&#x2F;2表示在0~23点范围内每2个小时执行一次。\n\n&quot;,&quot;分散的数字（不一定连续），如1,2,3,4,7,9。\n4.3 日志存储构建完上述命令后，可在命令后端加上”&gt;&gt; 文件名.log”，存储日志\n5. 示例5.1 每一分钟执行一次”mian.py”文件* * * * * python main.py\n因为cron默认每一分钟扫描一次，故全部设置为”*”即可\n5.2 每小时的5和30分钟执行一次”mian.py”文件15,30 * * * * python main.py\n5.3 每天上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 * * * python main.py\n5.4 每隔三天上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 *&#x2F;3 * * python main.py\n5.5 每周三上午8~9点的5和30分钟执行一次”mian.py”文件15,30 8-9 * * 3 python main.py\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n![添加微信](Linux-Crontab/WX_QR_code.png)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop\n\n","categories":["服务器"],"tags":["Linux","定时任务"]},{"title":"Hexo博客新建文章","url":"/2021/08/11/Hexo_Article/","content":"创建新文章一、新文章创建命令hexo new &lt;模板名称&gt; &lt;文件名称&gt;\n二、模板名称简介\n\n\n模板名称\n作用\n路径\n\n\n\npost\n新建文章\n/source/_posts/\n\n\ndraft\n新建草稿\n/source/_drafts/\n\n\npage\n新建页面(如标签、分类)\n/source/\n\n\n提示：此处的文件名称非文章名称，而是在source/_posts目录下创建的.md文件名称\n\n编辑新文章内容（基于 Markdown）一、编辑头部信息打开刚刚创建的.md文件，我们可以看到被两个”—“包围的区域，在此区域中可填写以下参数\n\n\n\n参数名称\n作用\n\n\n\ntitle\n网站标题\n\n\ntags\n文章标签，支持多个。(如：[博客,前端])\n\n\ncategories\n文章分类(如：前端)\n\n\n二、基本语法1.什么是Markdown？Markdown 是一种可以使用普通文本编辑器编写的 标记语言，通过简单的 标记语法，它可以使普通文本内容具有一定的格式。\n2.Markdown基本语法1.标题。一共支持六级# &#x2F;&#x2F;一级标题\n## &#x2F;&#x2F;二级标题\n### &#x2F;&#x2F;三级标题\n#### &#x2F;&#x2F;四级标题\n##### &#x2F;&#x2F;五级标题\n###### &#x2F;&#x2F;六级标题\n2.字体*斜体* &#x2F;&#x2F;左右分别用一个*号包起来\n**加粗** &#x2F;&#x2F;左右分别用两个*号包起来\n***斜体加粗*** &#x2F;&#x2F;左右分别用三个*号包起来\n~~删除线~~ &#x2F;&#x2F;左右分别用两个~~号包起来\n3.引用在引用的文字前加上”&gt;”即可\n&gt; 这是引用的内容\n&gt;&gt; 这是引用的内容\n&gt;&gt;&gt; 这是引用的内容\n4.分割线三个或者三个以上的 - 或者 * 都可以。\n---\n----\n***\n*****\n5.图片如果要在本地上传图片，那首先得安装图片插件\nnpm install hexo-asset-image --save\n安装完成后再新建一个文章，此时我们会发现在_posts文件夹下出现了一个与文件名称相同的文件夹\nhexo new post article\n接下来我们将需要用到的图片放入对应的文件夹中，并在需要显示图片的地方输入以下内容即可\n![这是一张图片](article&#x2F;img.png) &#x2F;&#x2F;![图片描述](图片路径) \n提示：注意文件夹名称必须与文件名称一致\n\n6.表格|标题|标题|\n|---|---|\n|内容|内容|\n|内容|内容|\n7.超链接[打开百度](http:&#x2F;&#x2F;www.baidu.com, &quot;这是百度链接&quot;) &#x2F;&#x2F;[链接文字](链接地址 &quot;链接描述&quot;)\n&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD\n=======\n![添加微信](Hexo_Article/WX_QR_code.png)\n&gt;&gt;&gt;&gt;&gt;&gt;&gt; develop\n\n","categories":["WEB前端"],"tags":["Hexo","博客"]},{"title":"Screen的使用方法","url":"/2021/08/06/Server_Screen/","content":"为什么要使用screen命令VPS侦探在刚接触Linux时最怕的就是SSH远程登录Linux VPS编译安装程序时（比如安装lnmp）网络突然断开，或者其他情况导致不得不与远程SSH服务器链接断开，远程执行的命令也被迫停止，只能重新连接，重新运行。相信现在有些VPSer也遇到过这个问题，今天就给VPSer们介绍一款远程会话管理工具 - screen命令。\n一、screen命令是什么？Screen是一个可以在多个进程之间多路复用一个物理终端的全屏窗口管理器。Screen中有会话的概念，用户可以在一个screen会话中创建多个screen窗口，在每一个screen窗口中就像操作一个真实的telnet/SSH连接窗口那样。\n二、如何安装screen命令？除部分精简的系统或者定制的系统大部分都安装了screen命令，如果没有安装，CentOS系统可以执行：\nyum install screen\nCentOS 8上移除了screen，需要安装epel后安装screen执行：\nyum install screen\nDebian/Ubuntu系统执行：\napt-get install screen\n三、screen命令使用方法？1、常用的使用方法用来解决文章开始我们遇到的问题，比如在安装lnmp时。\n1.1 创建screen会话screen创建一个名字为lnmp的会话。 VPS侦探 https://www.vpser.net/; 可以先执行：\nscreen -S lnmp\n1.2 暂时离开，保留screen会话中的任务或程序当需要临时离开时（会话中的程序不会关闭，仍在运行）可以用快捷键Ctrl+a d(即按住Ctrl，依次再按a,d)\n1.3 恢复screen会话恢复到离开前创建的lnmp会话的工作界面,执行：\naaaq lnmp \n如果忘记了,或者当时没有指定会话名,列出当前存在的会话列表,可以执行：\nscreen -ls screen\n11791.lnmp即为刚才的screen创建的lnmp会话，目前已经暂时退出了lnmp会话，所以状态为Detached，当使用\nscreen -r lnmp\n后状态就会变为Attached，11791是这个screen的会话的进程ID，恢复会话时也可以使用：\nscreen -r 11791\n\n1.4 关闭screen的会话执行：\nexit\n会提示：[screen is terminating]，表示已经成功退出screen会话。VPS侦探 https://www.vpser.net/\n1.5 删除会话screen -S session_name -X quit\nor\nscreen -X -S 122128 quit\n2、远程演示首先演示者先在服务器上执行:\nscreen -S test\n创建一个screen会话，观众可以链接到远程服务器上执行:\nscreen -x test\n观众屏幕上就会出现和演示者同步。\n3、常用快捷键3.1 在当前screen会话中创建窗口Ctrl+a c\n3.2 窗口列表Ctrl+a w\n3.3 下一个窗口Ctrl+a n\n3.4 上一个窗口Ctrl+a p\n3.5 在第0个窗口和第9个窗口之间切换&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEADCtrl+a 0-9=======Ctrl+a 0-9\n\n\n\n\n\n\n\ndevelop\n\n\n\n\n\n\n\n","categories":["服务器"],"tags":["Linux","部署"]}]